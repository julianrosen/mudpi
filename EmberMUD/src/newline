In fight.c:
  100:	    for ( ch = char_list; ch != NULL; ch = ch->next )
  102:	        ch_next = ch->next;
  104:	        if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
  107:	        if ( IS_AWAKE( ch ) && ch->in_room == victim->in_room )
  114:	        if ( ( victim = ch->fighting ) == NULL )
  136:	    for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
  138:	        rch_next = rch->next_in_room;
  140:	        if ( IS_AWAKE( rch ) && rch->fighting == NULL )
  144:	                 && IS_SET( rch->off_flags, ASSIST_PLAYERS )
  145:	                 && rch->level + 6 > victim->level
  146:	                 && ( !chaos && !IS_SET( ch->act, PLR_KILLER ) ) )
  157:	                if ( ( ( !IS_NPC( rch ) && IS_SET( rch->act, PLR_AUTOASSIST ) )
  170:	                if ( ( IS_NPC( rch ) && IS_SET( rch->off_flags, ASSIST_ALL ) )
  171:	                     || ( IS_NPC( rch ) && rch->race == ch->race
  172:	                          && IS_SET( rch->off_flags, ASSIST_RACE ) )
  174:	                          && IS_SET( rch->off_flags, ASSIST_ALIGN )
  178:	                     || ( rch->pIndexData == ch->pIndexData
  179:	                          && IS_SET( rch->off_flags, ASSIST_VNUM ) ) )
  191:	                    for ( vch = ch->in_room->people; vch; vch = vch->next )
  219:	    if ( !ch->hate || ch->hate->who != victim )
  226:	    if ( ch->hate )
  228:	        free_string( &ch->hate->name );
  229:	        free_mem( &ch->hate );
  230:	        ch->hate = NULL;
  240:	    if ( ch->hate )
  243:	    ch->hate = alloc_mem( sizeof( HATE_DATA ) );
  244:	    ch->hate->name = str_dup( victim->name );
  245:	    ch->hate->who = victim;
  261:	    if ( ch->desc == NULL )
  262:	        ch->wait = UMAX( 0, ch->wait - PULSE_VIOLENCE );
  265:	    if ( ch->position < POS_RESTING )
  279:	    if ( ch->fighting != victim )
  285:	    if ( ch->fighting != victim || dt == gsn_backstab )
  288:	    if ( ch->fighting != victim || dt == gsn_circle )
  296:	        if ( ch->fighting != victim )
  305:	        if ( ch->fighting != victim )
  314:	        if ( ch->fighting != victim )
  334:	    if ( ch->fighting != victim )
  339:	    if ( IS_SET( ch->off_flags, OFF_AREA_ATTACK ) )
  341:	        for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
  343:	            vch_next = vch->next;
  344:	            if ( ( vch != victim && vch->fighting == ch ) )
  349:	    if ( IS_AFFECTED( ch, AFF_HASTE ) || IS_SET( ch->off_flags, OFF_FAST ) )
  352:	    if ( ch->fighting != victim || dt == gsn_backstab )
  355:	    if ( ch->fighting != victim || dt == gsn_circle )
  362:	        if ( ch->fighting != victim )
  370:	        if ( ch->fighting != victim )
  376:	    if ( ch->wait > 0 )
  381:	    /*if (number == 1 && IS_SET(ch->act,ACT_MAGE))
  384:	    /*if (number == 2 && IS_SET(ch->act,ACT_CLERIC))
  394:	        if ( IS_SET( ch->off_flags, OFF_BASH ) )
  399:	        if ( IS_SET( ch->off_flags, OFF_BERSERK )
  405:	        if ( IS_SET( ch->off_flags, OFF_DISARM )
  407:	                  && ( IS_SET( ch->act, ACT_WARRIOR )
  408:	                       || IS_SET( ch->act, ACT_THIEF ) ) ) )
  413:	        if ( IS_SET( ch->off_flags, OFF_KICK ) )
  418:	        if ( IS_SET( ch->off_flags, OFF_KICK_DIRT ) )
  423:	           if (IS_SET(ch->off_flags,OFF_TAIL))
  428:	        if ( IS_SET( ch->off_flags, OFF_TRIP ) )
  433:	           if (IS_SET(ch->off_flags,OFF_CRUSH))
  467:	    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
  479:	            dt += ch->dam_type;
  486:	            dam_type = attack_table[ch->dam_type].damage;
  504:	        if ( IS_SET( ch->act, ACT_WARRIOR ) )
  506:	        else if ( IS_SET( ch->act, ACT_THIEF ) )
  508:	        else if ( IS_SET( ch->act, ACT_CLERIC ) )
  510:	        else if ( IS_SET( ch->act, ACT_MAGE ) )
  515:	        thac0_00 = class_table[ch->Class].thac0_00;
  516:	        thac0_32 = class_table[ch->Class].thac0_32;
  519:	    thac0 = interpolate( ch->level, thac0_00, thac0_32 );
  551:	        if ( ch->level > skill_table[gsn_blind_fighting].skill_level[ch->Class]
  585:	        dam = dice( ch->damage[DICE_NUMBER], ch->damage[DICE_TYPE] );
  601:	                              2 * ch->level / 3 * skill / 100 );
  647:	            dam *= 2 + ch->level / 10;
  649:	            dam *= 2 + ch->level / 8;
  655:	            dam *= 2 + ch->level / 15;
  657:	            dam *= 2 + ch->level / 12;
  702:	                    dam += dam / 3 * UMIN( dice( 1, ch->level / 7 ), 5);
  713:	        if ( damaged && ( weapon != NULL && ch->fighting == victim ) )
  730:	                ch->alignment = UMAX( -1000, ch->alignment - 1 );
  731:	                ch->hit += dam / 2;
  770:	                                        ( 100 + MAX_LEVEL - ( 2 * ch->level ) +
  808:	                obj_to_room( obj, ch->in_room );
  814:	                         ( IS_NPC( ch ) ? ch->short_descr : ch->name ) );
  853:	        bug( "Damage: %s: more than %d points!", ch->name,
  884:	            if ( ch->fighting == NULL )
  894:	                 && victim->master->in_room == ch->in_room
  917:	        REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
  924:	        victim->hate->name = str_dup( ch->name );
  979:	    /* Ok, give the ch xp for his hit and add to ch->exp_stack */
  987:	        for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  992:	                group_levels += gch->level;
  998:	        ch->exp_stack += xp;
  1069:	                     ( IS_NPC( ch ) ? ch->short_descr : ch->name ),
  1076:	                    str_dup( IS_NPC( ch ) ? ch->short_descr : ch->name );
  1090:	            if ( ch->level < victim->level )
  1091:	                chaos_points = 2 * ( victim->level - ch->level );
  1094:	            ch->pcdata->chaos_score = chaos_points;
  1105:	                     IS_NPC( ch ) ? ch->short_descr : ch->name );
  1123:	                ch->pcdata->pk_kills++;
  1130:	            corpse = get_obj_list( ch, "corpse", ch->in_room->contents );
  1132:	            if ( IS_SET( ch->act, PLR_AUTOLOOT ) && corpse && corpse->contains )    /* exists and not empty */
  1135:	            if ( IS_SET( ch->act, PLR_AUTOGOLD ) && corpse && corpse->contains &&   /* exists and not empty */
  1136:	                 !IS_SET( ch->act, PLR_AUTOLOOT ) )
  1139:	            if ( IS_SET( ch->act, PLR_AUTOSAC ) )
  1141:	                if ( IS_SET( ch->act, PLR_AUTOLOOT ) && corpse
  1205:	        bug( "Damage: %s: more than %d points!", ch->name,
  1236:	            if ( ch->fighting == NULL )
  1246:	                 && victim->master->in_room == ch->in_room
  1269:	        REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
  1320:	    /* Ok, give the ch xp for his hit and add to ch->exp_stack */
  1328:	        for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  1333:	                group_levels += gch->level;
  1339:	        ch->exp_stack += xp;
  1410:	                     ( IS_NPC( ch ) ? ch->short_descr : ch->name ),
  1417:	                    str_dup( IS_NPC( ch ) ? ch->short_descr : ch->name );
  1431:	            if ( ch->level < victim->level )
  1432:	                chaos_points = 2 * ( victim->level - ch->level );
  1435:	            ch->pcdata->chaos_score = chaos_points;
  1441:	                     IS_NPC( ch ) ? ch->short_descr : ch->name );
  1455:	                ch->pcdata->pk_kills++;
  1463:	            corpse = get_obj_list( ch, "corpse", ch->in_room->contents );
  1465:	            if ( IS_SET( ch->act, PLR_AUTOLOOT ) && corpse && corpse->contains )    /* exists and not empty */
  1468:	            if ( IS_SET( ch->act, PLR_AUTOGOLD ) && corpse && corpse->contains &&   /* exists and not empty */
  1469:	                 !IS_SET( ch->act, PLR_AUTOLOOT ) )
  1472:	            if ( IS_SET( ch->act, PLR_AUTOSAC ) )
  1474:	                if ( IS_SET( ch->act, PLR_AUTOLOOT ) && corpse
  1561:	            if ( ch->fighting == NULL )
  1571:	                 && victim->master->in_room == ch->in_room
  1594:	        REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
  1604:	    /* Ok, give the ch xp for his hit and add to ch->exp_stack */
  1612:	        for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  1617:	                group_levels += gch->level;
  1625:	        ch->exp_stack += xp;
  1658:	                     ( IS_NPC( ch ) ? ch->short_descr : ch->name ),
  1665:	                    str_dup( IS_NPC( ch ) ? ch->short_descr : ch->name );
  1679:	            if ( ch->level < victim->level )
  1680:	                chaos_points = 2 * ( victim->level - ch->level );
  1683:	            ch->pcdata->chaos_score += chaos_points;
  1689:	                     victim->name, IS_NPC( ch ) ? ch->short_descr : ch->name );
  1704:	                ch->pcdata->pk_kills++;
  1711:	            corpse = get_obj_list( ch, "corpse", ch->in_room->contents );
  1713:	            if ( IS_SET( ch->act, PLR_AUTOLOOT ) && corpse && corpse->contains )    /* exists and not empty */
  1716:	            if ( IS_SET( ch->act, PLR_AUTOGOLD ) && corpse && corpse->contains &&   /* exists and not empty */
  1717:	                 !IS_SET( ch->act, PLR_AUTOLOOT ) )
  1720:	            if ( IS_SET( ch->act, PLR_AUTOSAC ) )
  1722:	                if ( IS_SET( ch->act, PLR_AUTOLOOT ) && corpse
  1748:	    if ( IS_SET( ch->in_room->room_flags, ROOM_SAFE ) )
  1762:	             ( IS_AFFECTED( ch, AFF_CHARM ) || IS_SET( ch->act, ACT_PET ) ) )
  1764:	            if ( !IS_SET( ch->master->act, PLR_KILLER ) ||
  1812:	    if ( IS_SET( ch->in_room->room_flags, ROOM_SAFE ) )
  1822:	                                    || IS_SET( ch->act, ACT_PET ) ) )
  1849:	                  || ( !chaos && !IS_SET( ch->act, PLR_KILLER ) ) ) )
  1889:	    if ( IS_SET( ch->affected_by, AFF_CHARM ) )
  1891:	        if ( ch->master == NULL )
  1894:	                     IS_NPC( ch ) ? ch->short_descr : ch->name );
  1897:	            REMOVE_BIT( ch->affected_by, AFF_CHARM );
  1917:	         || ch->level >= LEVEL_HERO
  1918:	         || IS_SET( ch->act, PLR_KILLER ) || victim->level >= LEVEL_HERO
  1923:	    SET_BIT( ch->act, PLR_KILLER );
  1967:	    if ( ch->fighting != NULL )
  1976:	    ch->fighting = victim;
  1977:	    ch->position = POS_FIGHTING;
  1990:	    for ( fch = char_list; fch != NULL; fch = fch->next )
  1992:	        if ( fch == ch || ( fBoth && fch->fighting == ch ) )
  1994:	            if ( fch->exp_stack == 0 && ( fch->position != POS_FIGHTING
  1995:	                                          && fch->fighting == NULL ) )
  1998:	            fch->fighting = NULL;
  1999:	            fch->position = IS_NPC( fch ) ? ch->default_pos : POS_STANDING;
  2000:	            if ( fch->exp_stack >= 0 )
  2002:	                         fch->exp_stack );
  2005:	                         fch->exp_stack * -1 );
  2010:	            fch->exp_stack = 0;
  2031:	        name = ch->short_descr;
  2034:	        if ( ch->gold > 0 )
  2036:	            obj_to_obj( create_money( ch->gold ), corpse );
  2037:	            ch->gold = 0;
  2043:	        name = ch->name;
  2046:	        REMOVE_BIT( ch->act, PLR_CANLOOT );
  2047:	        if ( !IS_SET( ch->act, PLR_THIEF ) )
  2048:	            corpse->owner = str_dup( ch->name );
  2054:	    corpse->level = ch->level;
  2064:	    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  2090:	        obj_to_room( corpse, ch->in_room );
  2095:	    obj_to_room( corpse, ch->in_room );
  2109:	    name = ch->name;
  2112:	    REMOVE_BIT( ch->act, PLR_CANLOOT );
  2113:	    if ( !IS_SET( ch->act, PLR_THIEF ) )
  2114:	        corpse->owner = str_dup( ch->name );
  2119:	    corpse->level = ch->level;
  2129:	    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  2159:	            obj_to_room( obj, ch->in_room );
  2165:	        obj_to_room( corpse, ch->in_room );
  2170:	    obj_to_room( corpse, ch->in_room );
  2196:	        if ( ch->material == 0 )
  2202:	        if ( IS_SET( ch->parts, PART_GUTS ) )
  2209:	        if ( IS_SET( ch->parts, PART_HEAD ) )
  2216:	        if ( IS_SET( ch->parts, PART_HEART ) )
  2223:	        if ( IS_SET( ch->parts, PART_ARMS ) )
  2230:	        if ( IS_SET( ch->parts, PART_LEGS ) )
  2237:	        if ( IS_SET( ch->parts, PART_BRAINS ) )
  2252:	        name = IS_NPC( ch ) ? ch->short_descr : ch->name;
  2266:	            if ( IS_SET( ch->form, FORM_POISON ) )
  2268:	            else if ( !IS_SET( ch->form, FORM_EDIBLE ) )
  2272:	        obj_to_room( obj, ch->in_room );
  2280:	    was_in_room = ch->in_room;
  2288:	            ch->in_room = pexit->u1.to_room;
  2292:	    ch->in_room = was_in_room;
  2425:	    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  2430:	            group_levels += gch->level;
  2438:	        group_levels = ch->level;
  2441:	    lch = ( ch->leader != NULL ) ? ch->leader : ch;
  2443:	    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  2460:	        if ( gch->exp_stack > 0 )
  2462:	        if ( gch->level < LEVEL_HERO && ( gch->exp + xp ) >=
  2463:	             exp_per_level( gch, gch->pcdata->points ) &&
  2464:	             gch->exp < exp_per_level( gch, gch->pcdata->points ) )
  2473:	        if ( gch->exp_stack > 0 )
  2476:	        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  2490:	                obj_to_room( obj, ch->in_room );
  2821:	    align = victim->alignment - gch->alignment;
  2830:	            ( align - 500 ) * ( gch->level / total_levels +
  2833:	        gch->alignment = UMAX( -1000, gch->alignment - change/10 ); /* Modified by JR */
  2839:	            ( -1 * align - 500 ) * ( gch->level / total_levels +
  2842:	        gch->alignment = UMIN( 1000, gch->alignment + change/10 );  /* Modified by JR */
  2848:	            gch->alignment * ( gch->level / total_levels +
  2850:	        gch->alignment -= change/10; /* Modified by JR */
  2860:	    else if ( gch->alignment > 500 )    /* for goodie two shoes */
  2881:	    else if ( gch->alignment < -500 )   /* for baddies */
  2902:	    else if ( gch->alignment > 200 )    /* a little good */
  2918:	    else if ( gch->alignment < -200 )   /* a little bad */
  2951:	        xp = ( gch->level * ( xp / total_levels ) );
  2952:	    if ( xp > ( exp_per_level( gch, gch->pcdata->points ) / 2 ) )
  2953:	        xp = ( exp_per_level( gch, gch->pcdata->points ) / 2 );
  3283:	/*    align = victim->alignment - gch->alignment;
  3293:	            ( align - 500 ) * ( gch->level / total_levels +
  3296:	        gch->alignment = UMAX( -1000, gch->alignment - change );
  3302:	            ( -1 * align - 500 ) * ( gch->level / total_levels +
  3305:	        gch->alignment = UMIN( 1000, gch->alignment + change );
  3311:	            gch->alignment * ( gch->level / total_levels +
  3313:	        gch->alignment -= change;
  3323:	    else if ( gch->alignment > 500 )    /* for goodie two shoes */
  3344:	    else if ( gch->alignment < -500 )   /* for baddies */
  3365:	    else if ( gch->alignment > 200 )    /* a little good */
  3381:	    else if ( gch->alignment < -200 )   /* a little bad */
  4181:	            logf_string( "BUG: ^^ ch: %s victim: %s ", ch->name, victim->name );
  4324:	            logf_string( "BUG: ^^ ch: %s victim: %s ", ch->name, victim->name );
  4552:	         || ( IS_NPC( ch ) && !IS_SET( ch->off_flags, OFF_BERSERK ) )
  4554:	              && ch->level < skill_table[gsn_berserk].skill_level[ch->Class] )
  4575:	    if ( ch->mana < 50 )
  4584:	    if ( ch->position == POS_FIGHTING )
  4588:	    hp_percent = 100 * ch->hit / ch->max_hit;
  4596:	        ch->mana -= 50;
  4597:	        ch->move /= 2;
  4600:	        ch->hit += ch->level * 2;
  4601:	        ch->hit = UMIN( ch->hit, ch->max_hit );
  4609:	        af.level = ch->level;
  4610:	        af.duration = number_fuzzy( ch->level / 8 );
  4611:	        af.modifier = UMAX( 1, ch->level / 5 );
  4620:	        af.modifier = UMAX( 10, 10 * ( ch->level / 5 ) );
  4628:	        ch->mana -= 25;
  4629:	        ch->move /= 2;
  4645:	         || ( IS_NPC( ch ) && !IS_SET( ch->off_flags, OFF_BASH ) )
  4647:	              && ch->level < skill_table[gsn_bash].skill_level[ch->Class] )
  4656:	        victim = ch->fighting;
  4673:	              || ( !chaos && !IS_SET( ch->act, PLR_KILLER ) ) ) )
  4701:	    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  4710:	    chance += ch->carry_weight / 25;
  4713:	    if ( ch->size < victim->size )
  4714:	        chance += ( ch->size - victim->size ) * 25;
  4716:	        chance += ( ch->size - victim->size ) * 10;
  4723:	    if ( IS_SET( ch->off_flags, OFF_FAST ) )
  4729:	    chance += ( ch->level - victim->level ) * 2;
  4747:	                number_range( 2, 2 + 2 * ch->size + chance / 20 ), gsn_bash,
  4759:	        ch->position = POS_RESTING;
  4773:	         || ( IS_NPC( ch ) && !IS_SET( ch->off_flags, OFF_KICK_DIRT ) )
  4775:	              && ch->level < skill_table[gsn_dirt].skill_level[ch->Class] ) )
  4783:	        victim = ch->fighting;
  4815:	              || ( !chaos && !IS_SET( ch->act, PLR_KILLER ) ) ) )
  4827:	    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  4840:	    if ( IS_SET( ch->off_flags, OFF_FAST ) || IS_AFFECTED( ch, AFF_HASTE ) )
  4847:	    chance += ( ch->level - victim->level ) * 2;
  4855:	    switch ( ch->in_room->sector_type )
  4905:	        af.level = ch->level;
  4930:	         || ( IS_NPC( ch ) && !IS_SET( ch->off_flags, OFF_TRIP ) )
  4932:	              && ch->level < skill_table[gsn_trip].skill_level[ch->Class] ) )
  4940:	        victim = ch->fighting;
  4960:	              || ( !chaos && !IS_SET( ch->act, PLR_KILLER ) ) ) )
  4992:	    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  5001:	    if ( ch->size < victim->size )
  5002:	        chance += ( ch->size - victim->size ) * 10; /* bigger = harder to trip */
  5009:	    if ( IS_SET( ch->off_flags, OFF_FAST ) || IS_AFFECTED( ch, AFF_HASTE ) )
  5016:	    chance += ( ch->level - victim->level ) * 2;
  5063:	              || ( !chaos && !IS_SET( ch->act, PLR_KILLER ) ) ) )
  5085:	    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  5091:	    if ( ch->position == POS_FIGHTING )
  5124:	         || ( IS_NPC( ch ) && IS_SET( ch->act, ACT_PET ) ) )
  5148:	    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  5154:	    if ( ch->position == POS_FIGHTING )
  5162:	        sprintf( buf, "`YHelp! I am being attacked by %s!`w", ch->short_descr );
  5164:	        sprintf( buf, "`YHelp! I am being attacked by %s!`w", ch->name );
  5205:	              || ( !chaos && !IS_SET( ch->act, PLR_KILLER ) ) ) )
  5248:	         || number_percent(  ) < ch->pcdata->learned[gsn_backstab] )
  5272:	        victim = ch->fighting;
  5303:	    /*if ( ( victim = ch->fighting ) == NULL )
  5334:	    if ( ( victim = ch->fighting ) == NULL )
  5336:	        if ( ch->position == POS_FIGHTING )
  5337:	            ch->position = POS_STANDING;
  5342:	    was_in = ch->in_room;
  5358:	        if ( ( now_in = ch->in_room ) == was_in )
  5361:	        ch->in_room = was_in;
  5363:	        ch->in_room = now_in;
  5368:	                ( long ) ( 0.05 * exp_per_level( ch, ch->pcdata->points ) );
  5371:	            ch->exp_stack -= lost_exp;
  5418:	    if ( ch->fighting == victim )
  5431:	    if ( !IS_NPC( ch ) && number_percent(  ) > ch->pcdata->learned[gsn_rescue] )
  5439:	         ( ( ( ( abs( ch->level - RESCUE_PENALTY ) +
  5504:	             || ( !chaos && !IS_SET( ch->act, PLR_KILLER ) )
  5525:	    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  5531:	    chance += ( ch->level - victim->level ); /* Fixed by JR */
  5563:	        naf.level = ch->level;
  5564:	        naf.duration = ch->level / 10;
  5586:	        naf.level = ch->level;
  5587:	        naf.duration = ch->level / 10;
  5618:	         && ch->level < skill_table[gsn_kick].skill_level[ch->Class] )
  5625:	    if ( IS_NPC( ch ) && !IS_SET( ch->off_flags, OFF_KICK ) )
  5628:	    if ( ( victim = ch->fighting ) == NULL )
  5637:	              || ( !chaos && !IS_SET( ch->act, PLR_KILLER ) ) ) )
  5644:	    if ( IS_NPC( ch ) || number_percent(  ) < ch->pcdata->learned[gsn_kick] )
  5646:	        damage( ch, victim, NULL, number_range( 1, ch->level ), gsn_kick,
  5678:	              || ( IS_NPC( ch ) && !IS_SET( ch->off_flags, OFF_DISARM ) ) ) )
  5684:	    if ( ( victim = ch->fighting ) == NULL )
  5720:	    chance += ( ch->level - victim->level ) * 2;
  5779:	    if ( !str_cmp( arg, "all" ) && ( ch->level >= MAX_LEVEL ) )
  5945:	        ( get_curr_stat( ch, STAT_DEX ) / 4 ) + ( ( ch->level ) / 2 ) +
  5983:	    if ( ( ( victim->level ) - 5 ) > ( ch->level ) )
  6008:	    if ( number_percent(  ) >= chance + victim->level - ch->level )
  6058:	    if ( number_percent(  ) >= chance + victim->level - ch->level )
In merc.h:
  1061:	#define GET_AGE(ch)             ((int) (ch->start_age + ((ch)->played \
  1064:	#define IS_GOOD(ch)             (ch->alignment >= 350)
  1065:	#define IS_EVIL(ch)             (ch->alignment <= -350)
  1068:	#define IS_AWAKE(ch)            (ch->position > POS_SLEEPING)
In marry.c:
  24:	    if ( ( ch->level >= LEVEL_IMMORTAL ) )
  124:	    if ( ch->level >= LEVEL_IMMORTAL )
  205:	    if ( IS_SET( ch->act, PLR_CONSENT ) )
  208:	        REMOVE_BIT( ch->act, PLR_CONSENT );
  213:	    SET_BIT( ch->act, PLR_CONSENT );
In act_wiz.c:
  256:	                sprintf( buf, "%s frees %s from jail.", ch->name,
  259:	                sprintf( buf, "%s frees %s from jail.", ch->name,
  271:	            sprintf( buf, "%s frees %s from jail.", ch->name, victim->name );
  304:	            sprintf( buf, "%s has tossed %s in the slammer!", ch->name,
  307:	            sprintf( buf, "%s has tossed %s in the slammer!", ch->name,
  349:	    if ( ch->level > 5 || IS_NPC( ch ) )
  382:	            create_object( get_obj_index( class_table[ch->Class].weapon ), 0 );
  802:	            sprintf( buf, "Your poofin is %s\n\r`w", ch->pcdata->bamfin );
  807:	        if ( str_str( argument, ch->name ) == NULL )
  813:	        free_string( &ch->pcdata->bamfin );
  815:	        ch->pcdata->bamfin = str_dup( buf );
  817:	        sprintf( buf, "Your poofin is now %s\n\r`w", ch->pcdata->bamfin );
  832:	            sprintf( buf, "Your poofout is %s\n\r`w", ch->pcdata->bamfout );
  837:	        if ( str_str( argument, ch->name ) == NULL )
  843:	        free_string( &ch->pcdata->bamfout );
  845:	        ch->pcdata->bamfout = str_dup( buf );
  847:	        sprintf( buf, "Your poofout is now %s\n\r`w", ch->pcdata->bamfout );
  1074:	             && d->character->in_room == ch->in_room )
  1179:	        location = ch->in_room;
  1254:	    original = ch->in_room;
  1255:	    on = ch->on;
  1264:	    for ( wch = char_list; wch != NULL; wch = wch->next )
  1270:	            ch->on = on;
  1287:	        reset_area( ch->in_room->area );
  1349:	    if ( ch->fighting != NULL )
  1352:	    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
  1354:	        if ( get_trust( rch ) >= ch->invis_level )
  1356:	            if ( ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0' )
  1357:	                act( "$t", ch, ch->pcdata->bamfout, rch, TO_VICT );
  1366:	    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
  1368:	        if ( get_trust( rch ) >= ch->invis_level )
  1370:	            if ( ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0' )
  1371:	                act( "$t", ch, ch->pcdata->bamfin, rch, TO_VICT );
  1456:	    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
  1463:	    if ( ch->in_room != location && room_is_private( location ) &&
  1499:	    for ( rch = location->people; rch; rch = rch->next_in_room )
  1504:	            one_argument( rch->name, buf );
  2372:	    else if ( ch->lines )
  2445:	    else if ( ch->lines )
  2469:	    if ( ( chaos ) && ( ch->Class != 4 ) )
  2480:	    if ( !IS_SET( ch->act, PLR_WIZINVIS ) )
  2482:	        sprintf( buf, "Reboot by %s.", ch->name );
  2491:	    if ( ch->Class != 4 )
  2535:	    if ( ( chaos ) && ( ch->Class != 4 ) )
  2547:	    if ( !IS_SET( ch->act, PLR_WIZINVIS ) )
  2548:	        sprintf( buf, "Shutdown by %s.", ch->name );
  2558:	    if ( ch->Class != 4 )
  2605:	            if ( d->snoop_by == ch->desc )
  2623:	    if ( ch->desc != NULL )
  2625:	        for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
  2635:	    victim->desc->snoop_by = ch->desc;
  2653:	    if ( ch->desc == NULL )
  2656:	    if ( ch->desc->original != NULL )
  2692:	    if ( ch->pcdata->tick > 0 )
  2699:	    ch->pcdata->tick = 0;
  2700:	    ch->desc->character = victim;
  2701:	    ch->desc->original = ch;
  2702:	    victim->desc = ch->desc;
  2703:	    ch->desc = NULL;
  2705:	    victim->comm = ch->comm;
  2706:	    victim->lines = ch->lines;
  2713:	    if ( ch->desc == NULL )
  2716:	    if ( ch->desc->original == NULL )
  2722:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  2731:	    ch->desc->character = ch->desc->original;
  2732:	    ch->desc->original = NULL;
  2733:	    ch->desc->character->desc = ch->desc;
  2734:	    ch->desc = NULL;
  2836:	            obj_to_room( clone, ch->in_room );
  2879:	        char_to_room( clone, ch->in_room );
  2937:	    char_to_room( victim, ch->in_room );
  2988:	        obj_to_room( obj, ch->in_room );
  3009:	        for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
  3020:	        for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
  3037:	    if ( ( obj = get_obj_list( ch, arg, ch->in_room->contents ) ) != NULL )
  3063:	            sprintf( buf, "%s tried to purge you!\n\r", ch->name );
  3140:	    if ( victim->level > ch->level )
  3147:	                        ch->name );
  3256:	        for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
  3264:	            vch->hit = vch->max_hit;
  3265:	            vch->mana = vch->max_mana;
  3266:	            vch->move = vch->max_move;
  3575:	    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
  3577:	        if ( rch->fighting != NULL )
  3579:	        if ( IS_NPC( rch ) && IS_SET( rch->act, ACT_AGGRESSIVE ) )
  3580:	            REMOVE_BIT( rch->act, ACT_AGGRESSIVE );
  4219:	        if ( ( value > ch->pcdata->security || value < 0 )
  4222:	            if ( ch->pcdata->security != 0 )
  4225:	                         ch->pcdata->security );
  4788:	            strftime( s, 100, "%I:%M%p", localtime( &vch->logon ) );
  4790:	            if ( vch->timer > 0 )
  4791:	                sprintf( idle, "%-3d", vch->timer );
  4905:	        if ( ( get_trust( ch ) < MAX_LEVEL - 3 ) && ( ch->Class != 4 ) )
  4913:	            vch_next = vch->next;
  4935:	            vch_next = vch->next;
  4938:	                 && vch->level < LEVEL_HERO )
  4958:	            vch_next = vch->next;
  4961:	                 && vch->level >= LEVEL_HERO )
  5026:	        if ( IS_SET( ch->act, PLR_WIZINVIS ) )
  5028:	            REMOVE_BIT( ch->act, PLR_WIZINVIS );
  5029:	            ch->invis_level = 0;
  5035:	            SET_BIT( ch->act, PLR_WIZINVIS );
  5036:	            ch->invis_level = get_trust( ch );
  5052:	            ch->reply = NULL;
  5053:	            SET_BIT( ch->act, PLR_WIZINVIS );
  5054:	            ch->invis_level = level;
  5068:	    if ( IS_SET( ch->act, PLR_HOLYLIGHT ) )
  5070:	        REMOVE_BIT( ch->act, PLR_HOLYLIGHT );
  5075:	        SET_BIT( ch->act, PLR_HOLYLIGHT );
  5127:	        pArea = ch->in_room->area;
  5318:	        area = ch->in_room->area;
  5403:	        area = ch->in_room->area;
  5531:	        char_to_room( d.character, ch->in_room );
  5578:	        ch->was_in_room = NULL;
  5666:	        for ( orig = ch->pcdata->immcmdlist; orig != NULL; orig = orig->next )
  5684:	                     ch->name, tmp->cmd );
  5705:	             ch->name, tmp->cmd );
  5952:	    if ( ch->level < CFG_SHELL_LEVEL )
  5963:	        char_list = ch->next;
  5967:	        for ( tmpch = char_list; tmpch && tmpch->next != ch;
  5968:	              tmpch = tmpch->next );
  5972:	            tmpch->next = ch->next;
  5983:	        player_list = ch->next_player;
  5987:	        for ( tmpch = player_list; tmpch && tmpch->next_player != ch;
  5988:	              tmpch = tmpch->next );
  5992:	            tmpch->next_player = ch->next_player;
  6001:	    ch->next_in_shell = shell_char_list;
  6003:	    ch->next_player = NULL;
  6004:	    ch->next = NULL;
  6007:	    ch->desc->connected = CON_SHELL;
  6018:	    ch->fdpair[0] = tmp_fds[0];
  6019:	    ch->fdpair[1] = tmp_fds[1];
  6021:	    fcntl( ch->fdpair[0], F_SETFL, O_NONBLOCK );
  6028:	        close( ch->fdpair[1] );
  6029:	        fcntl( ch->fdpair[0], F_SETFL, O_NONBLOCK );
  6038:	        close( ch->fdpair[1] );
  6039:	        close( ch->fdpair[0] );
  6050:	        if ( d == ch->desc )
  6056:	    close( ch->fdpair[0] );
  6063:	        write_to_descriptor( ch->desc->descriptor,
  6066:	        close( ch->fdpair[1] );
  6083:	            close( ch->fdpair[1] );
  6093:	            close( ch->fdpair[1] );
  6111:	            close( ch->fdpair[1] );
  6122:	        close( ch->fdpair[1] );
  6134:	    fcntl( ch->desc->descriptor, F_SETFL, O_NONBLOCK );
  6137:	    write( ch->desc->descriptor, echo_off_str, 3 );
  6138:	    write( ch->desc->descriptor, will_suppress_ga_str, 3 );
  6141:	    route_io( ch->desc->descriptor, master_fd );
  6144:	    write( ch->desc->descriptor, echo_on_str, 3 );
  6145:	    write( ch->desc->descriptor, wont_suppress_ga_str, 3 );
  6149:	    close( ch->fdpair[1] );
In update.c:
  68:	    incarn = ch->incarnations;
  70:	    ch->pcdata->last_level =
  71:	        ( ch->played + ( int ) ( current_time - ch->logon ) ) / 3600;
  74:	        number_range( class_table[ch->Class].hp_min,
  75:	                      class_table[ch->Class].hp_max );
  80:	    if ( !class_table[ch->Class].fMana )
  90:	    if ( ch->incarnations != 0 );
  92:	        add_hp = add_hp * ( 1 + ( ch->incarnations / 10 ) );
  93:	        add_mana = add_mana * ( 1 + ( ch->incarnations / 10 ) );
  94:	        add_move = add_move * ( 1 + ( ch->incarnations / 10 ) );
  101:	    ch->exp -= exp_per_level( ch, ch->pcdata->points );
  102:	    ch->max_hit += add_hp;
  103:	    ch->max_mana += add_mana;
  104:	    ch->max_move += add_move;
  105:	    ch->practice += add_prac;
  106:	    ch->train += 1;
  108:	    ch->pcdata->perm_hit += add_hp;
  109:	    ch->pcdata->perm_mana += add_mana;
  110:	    ch->pcdata->perm_move += add_move;
  113:	        REMOVE_BIT( ch->act, PLR_BOUGHT_PET );
  117:	             add_hp, ch->max_hit,
  118:	             add_mana, ch->max_mana,
  119:	             add_move, ch->max_move, add_prac, ch->practice );
  127:	    if ( IS_NPC( ch ) || ch->level >= LEVEL_HERO )
  139:	    if ( gain > ( MAX_EXP - ch->exp ) )
  141:	        ch->exp = MAX_EXP;
  146:	    else if ( gain < 0 && abs( gain ) > ch->exp )
  148:	        ch->exp = 0;
  152:	        ch->exp += gain;
  169:	        gain = 5 + ch->level;
  171:	        switch ( ch->position )
  189:	        gain = UMAX( 3, get_curr_stat( ch, STAT_CON ) - 3 + ch->level / 2 );
  190:	        gain += class_table[ch->Class].hp_max - 10;
  193:	             && number < ch->pcdata->learned[gsn_fast_healing] )
  196:	            if ( ch->hit < ch->max_hit )
  200:	        switch ( ch->position )
  215:	        if ( ch->pcdata->condition[COND_FULL] < HUNGER_THRESH )
  218:	        if ( ch->pcdata->condition[COND_FULL] == 0 )
  221:	        if ( ch->pcdata->condition[COND_THIRST] == 0 )
  225:	    if ( ch->on != NULL && ch->on->item_type == ITEM_FURNITURE )
  226:	        gain = gain * ch->on->value[3] / 100;
  240:	    if ( ch->in_room && IS_SET(ch->in_room->room_flags, ROOM_FAST_REGEN) )
  243:	    if ( ch->in_room && IS_SET(ch->in_room->room_flags, ROOM_SLOW_REGEN))
  246:	    return UMIN( gain, ch->max_hit - ch->hit );
  257:	        gain = 5 + ch->level;
  258:	        switch ( ch->position )
  276:	                 + get_curr_stat( ch, STAT_INT ) + ch->level ) / 2;
  278:	        if ( number < ch->pcdata->learned[gsn_meditation] )
  281:	            if ( ch->mana < ch->max_mana )
  284:	        if ( !class_table[ch->Class].fMana )
  287:	        switch ( ch->position )
  302:	        if ( ch->pcdata->condition[COND_FULL] < HUNGER_THRESH )
  305:	        if ( ch->pcdata->condition[COND_FULL] == 0 )
  308:	        if ( ch->pcdata->condition[COND_THIRST] == 0 )
  313:	    if ( ch->on != NULL && ch->on->item_type == ITEM_FURNITURE )
  314:	        gain = gain * ch->on->value[4] / 100;
  329:	    if ( ch->in_room && IS_SET(ch->in_room->room_flags, ROOM_FAST_REGEN) )
  332:	    if ( ch->in_room && IS_SET(ch->in_room->room_flags, ROOM_SLOW_REGEN))
  335:	    return UMIN( gain, ch->max_mana - ch->mana );
  344:	        gain = ch->level;
  348:	        gain = UMAX( 15, ch->level );
  350:	        switch ( ch->position )
  360:	        if ( ch->pcdata->condition[COND_FULL] < HUNGER_THRESH )
  363:	        if ( ch->pcdata->condition[COND_FULL] == 0 )
  366:	        if ( ch->pcdata->condition[COND_THIRST] == 0 )
  370:	    if ( ch->on != NULL && ch->on->item_type == ITEM_FURNITURE )
  371:	        gain = gain * ch->on->value[3] / 100;
  382:	    return UMIN( gain, ch->max_move - ch->move );
  390:	    if ( value == 0 || IS_NPC( ch ) || ch->level >= LEVEL_HERO )
  393:	    condition = ch->pcdata->condition[iCond];
  396:	    ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 48 );
  399:	    if ( ch->pcdata->condition[iCond] == 0 )
  418:	    else if ( iCond == COND_FULL && ch->pcdata->condition[iCond] < HUNGER_THRESH )
  439:	        ch_next = ch->next;
  445:	        if ( ch->memory && !get_char_world( ch, ch->memory->name ) )
  446:	            ch->memory = NULL;
  448:	        if ( ch->in_room == NULL || IS_AFFECTED( ch, AFF_CHARM ) )
  451:	        if ( ch->in_room->area->empty && !IS_SET( ch->act, ACT_UPDATE_ALWAYS ) )
  454:	        if ( ch->in_room->area->nplayer > 0
  455:	             || IS_SET( ch->act, ACT_UPDATE_ALWAYS ) )
  461:	            if ( ch->position < POS_STANDING )
  466:	        if ( ch->position != POS_STANDING )
  470:	        if ( IS_SET( ch->act, ACT_SCAVENGER )
  471:	             && ch->in_room->contents != NULL && number_bits( 6 ) == 0 )
  479:	            for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
  502:	            for ( rch = ch->in_room->people; rch; rch = rch->next_in_room )
  506:	                     && ch->pIndexData->vnum != MOB_VNUM_SUPERMOB 
  520:	        if ( !IS_SET( ch->act, ACT_SENTINEL )
  523:	             && ( pexit = ch->in_room->exit[door] ) != NULL
  527:	             && ( !IS_SET( ch->act, ACT_STAY_AREA )
  528:	                  || pexit->u1.to_room->area == ch->in_room->area ) )
  531:	            if ( ch->position < POS_STANDING )
  684:	    for ( ch = char_list; ch != NULL; ch = ch->next )
  686:	        if ( !IS_NPC( ch ) && ch->desc != NULL && ch->desc->tintin )
  688:	            write_to_buffer( ch->desc, doparseprompt( ch ) , 0 );
  715:	        ch_next = ch->next;
  717:	        if ( IS_SET( ch->act, PLR_JAILED ) && ch->jail_timer == 1 )
  721:	                blarg = ch->was_in_room->vnum;
  726:	                    blarg = ch->pcdata->recall_room->vnum;
  733:	                REMOVE_BIT( ch->comm, COMM_NOSHOUT );
  738:	                REMOVE_BIT( ch->comm, COMM_NOEMOTE );
  743:	                REMOVE_BIT( ch->comm, COMM_NOTELL );
  748:	                REMOVE_BIT( ch->comm, COMM_NOCHANNELS );
  751:	            REMOVE_BIT( ch->act, PLR_JAILED );
  760:	                ch->jail_timer = 0;
  765:	                             ch->short_descr );
  769:	                             ch->name );
  778:	                ch->jail_timer = 0;
  782:	                         ch->short_descr );
  788:	        if ( IS_SET( ch->act, PLR_JAILED ) && ch->jail_timer > 0 )
  790:	            --ch->jail_timer;
  798:	        if ( !IS_NPC( ch ) && ch->pcdata->ticks == 0 && !ch->desc->tintin )
  800:	            if ( !IS_NPC( ch ) && ch->pcdata->tick == 1 && ch->desc->editor == 0
  801:	                 && ch->desc->pString == NULL && ch->desc->connected == 0 )
  803:	                write_to_buffer( ch->desc, doparseprompt(ch), 0 );
  811:	            if ( ch->position == POS_DEAD )
  815:	        if ( ( ch->timer*PULSE_TICK > AUTO_QUIT*60*PULSE_PER_SECOND ) && ch->level < LEVEL_IMMORTAL ) /* JR modified this */
  818:	        if ( ch->position >= POS_STUNNED )
  820:	            if ( ch->hit < ch->max_hit )
  821:	                ch->hit += hit_gain( ch );
  823:	                ch->hit = ch->max_hit;
  825:	            if ( ch->mana < ch->max_mana )
  826:	                ch->mana += mana_gain( ch );
  828:	                ch->mana = ch->max_mana;
  830:	            if ( ch->move < ch->max_move )
  831:	                ch->move += move_gain( ch );
  833:	                ch->move = ch->max_move;
  836:	        if ( ch->position == POS_STUNNED )
  846:	                if ( --obj->value[2] == 0 && ch->in_room != NULL )
  848:	                    --ch->in_room->light;
  853:	                else if ( obj->value[2] <= 5 && ch->in_room != NULL )
  857:	            ++ch->timer;
  858:	            if ( IS_SET( ch->act, PLR_JAILED ) )
  860:	                --ch->jail_timer;
  866:	            if ( ch->timer*PULSE_TICK >= AUTO_AFK*60*PULSE_PER_SECOND && ch->level < LEVEL_IMMORTAL && !IS_SET( ch->act, PLR_AFK ) )
  875:	            if ( ch->timer*PULSE_TICK >= AUTO_VANISH*60*PULSE_PER_SECOND && ch->level < LEVEL_IMMORTAL ) /* modified by JR*/
  877:	                if ( ch->was_in_room == NULL && ch->in_room != NULL )
  879:	                    ch->was_in_room = ch->in_room;
  880:	                    if ( ch->fighting != NULL )
  887:	                    if ( ch->level > 0 ) /* Modified by JR */
  893:	            if ( ch->level < LEVEL_IMMORTAL )
  905:	        for ( paf = ch->affected; paf != NULL; paf = paf_next )
  931:	        for ( npaf = ch->newaffected; npaf != NULL; npaf = npaf_next )
  971:	            if ( ch->in_room == NULL )
  977:	            for ( af = ch->affected; af != NULL; af = af->next )
  985:	                REMOVE_BIT( ch->affected_by, AFF_PLAGUE );
  999:	            for ( vch = ch->in_room->people; vch != NULL;
  1000:	                  vch = vch->next_in_room )
  1032:	            dam = UMIN( ch->level, 5 );
  1033:	            ch->mana -= dam;
  1034:	            ch->move -= dam;
  1043:	        else if ( ch->position == POS_INCAP && number_range( 0, 1 ) == 0 )
  1047:	        else if ( ch->position == POS_MORTAL )
  1059:	        ch_next = ch->next_player;
  1061:	        if ( ch->desc != NULL && save_number == 0 && !chaos ) /* JR modified this */
  1084:	        ch_next = ch->next;
  1086:	        if ( ch->position >= POS_STUNNED
  1089:	            if ( ch->hit < ch->max_hit )
  1090:	                ch->hit += hit_gain( ch );
  1092:	                ch->hit = ch->max_hit;
  1261:	        wch_next = wch->next_player;
  1267:	/*	if ( IS_NPC( wch ) && wch->mpactnum > 0
  1268:		    && wch->in_room->area->nplayer > 0 )
  1272:		    for ( tmp_act = wch->mpact; tmp_act != NULL;
  1279:		    for ( tmp_act = wch->mpact; tmp_act != NULL; tmp_act = 
  1285:		    wch->mpactnum = 0;
  1286:		    wch->mpact    = NULL; 
  1289:	        if ( wch->level >= LEVEL_IMMORTAL || !wch->in_room
  1290:	/*	||   wch->in_room->area->empty *//* How can the area be in it if this player is in that area? - Zane */
  1291:	             || IS_SET( wch->in_room->room_flags, ROOM_SAFE ) )
  1294:	        for ( ch = wch->in_room->people; ch != NULL; ch = ch_next )
  1296:	            ch_next = ch->next_in_room;
  1299:	                 || !IS_SET( ch->act, ACT_AGGRESSIVE )
  1300:	                 || ch->fighting
  1304:	                 || ( IS_SET( ch->act, ACT_WIMPY ) && IS_AWAKE( wch ) )
  1315:	            for ( vch = wch->in_room->people; vch != NULL; vch = vch->next )
  1318:	                     && vch->level < LEVEL_IMMORTAL
  1319:	                     && ch->level >= vch->level - 5
  1320:	                     && ( !IS_SET( ch->act, ACT_WIMPY ) || !IS_AWAKE( vch ) )
  1329:	            for ( vch = wch->in_room->people; vch != NULL; vch = vch_next )
  1331:	                vch_next = vch->next_in_room;
  1334:	                     && vch->level < LEVEL_IMMORTAL
  1335:	                     && ch->level >= vch->level - 5
  1336:	                     && ( !IS_SET( ch->act, ACT_WIMPY ) || !IS_AWAKE( vch ) )
In mprog_commands.c:
  221:	    location = ( !arg[0] ) ? ch->in_room : find_location( ch, arg );
  229:	    if ( ch->in_room != location
  453:	        bug( "Mpasound - No argument: vnum %d.", ch->pIndexData->vnum );
  457:	    was_in_room = ch->in_room;
  465:	            ch->in_room = pexit->u1.to_room;
  471:	    ch->in_room = was_in_room;
  494:	        bug( "MpKill - no argument: vnum %d.", ch->pIndexData->vnum );
  500:	        bug( "MpKill - Victim not in room: vnum %d.", ch->pIndexData->vnum );
  506:	        bug( "MpKill - Bad victim to attack: vnum %d.", ch->pIndexData->vnum );
  510:	    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  513:	             ch->pIndexData->vnum );
  517:	    if ( ch->position == POS_FIGHTING )
  519:	        bug( "MpKill - Already fighting: vnum %d", ch->pIndexData->vnum );
  548:	        bug( "Mpjunk - No argument: vnum %d.", ch->pIndexData->vnum );
  565:	        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  598:	        bug( "Mpechoaround - No argument:  vnum %d.", ch->pIndexData->vnum );
  605:	             ch->pIndexData->vnum );
  631:	        bug( "Mpechoat - No argument:  vnum %d.", ch->pIndexData->vnum );
  638:	             ch->pIndexData->vnum );
  659:	        bug( "Mpecho - called w/o argument: vnum %d.", ch->pIndexData->vnum );
  689:	        bug( "Mpmload - Bad vnum as arg: vnum %d.", ch->pIndexData->vnum );
  695:	        bug( "Mpmload - Bad mob vnum: vnum %d.", ch->pIndexData->vnum );
  700:	    char_to_room( victim, ch->in_room );
  724:	        bug( "Mpoload - Bad syntax: vnum %d.", ch->pIndexData->vnum );
  739:	            bug( "Mpoload - Bad syntax: vnum %d.", ch->pIndexData->vnum );
  745:	            bug( "Mpoload - Bad level: vnum %d.", ch->pIndexData->vnum );
  752:	        bug( "Mpoload - Bad vnum arg: vnum %d.", ch->pIndexData->vnum );
  763:	        obj_to_room( obj, ch->in_room );
  795:	        for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
  802:	        for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
  819:	            bug( "Mppurge - Bad argument: vnum %d.", ch->pIndexData->vnum );
  826:	        bug( "Mppurge - Purging a PC: vnum %d.", ch->pIndexData->vnum );
  863:	        ch->mobinvis = level;
  868:	    if ( ch->mobinvis < 2 )
  869:	        ch->mobinvis = ch->level;
  871:	    if ( IS_SET( ch->act, ACT_MOBINVIS ) )
  873:	        REMOVE_BIT( ch->act, ACT_MOBINVIS );
  879:	        SET_BIT( ch->act, ACT_MOBINVIS );
  903:	        bug( "Mpgoto - No argument: vnum %d.", ch->pIndexData->vnum );
  909:	        bug( "Mpgoto - No such location: vnum %d.", ch->pIndexData->vnum );
  913:	    if ( ch->fighting != NULL )
  942:	        bug( "Mpat - Bad argument: vnum %d.", ch->pIndexData->vnum );
  948:	        bug( "Mpat - No such location: vnum %d.", ch->pIndexData->vnum );
  952:	    original = ch->in_room;
  961:	    for ( wch = char_list; wch != NULL; wch = wch->next )
  996:	        bug( "Mptransfer - Bad syntax: vnum %d.", ch->pIndexData->vnum );
  1021:	        location = ch->in_room;
  1028:	                 ch->pIndexData->vnum );
  1034:	            bug( "Mptransfer - Private room: vnum %d.", ch->pIndexData->vnum );
  1041:	        bug( "Mptransfer - No such person: vnum %d.", ch->pIndexData->vnum );
  1047:	        bug( "Mptransfer - Victim in Limbo: vnum %d.", ch->pIndexData->vnum );
  1082:	                 arg, ch->pIndexData->vnum );
  1087:	        ch->memory = vict;
  1101:	    ch->memory = NULL;
  1122:	        bug( "Mpforce - Bad syntax: vnum %d.", ch->pIndexData->vnum );
  1133:	            vch_next = vch->next;
  1135:	            if ( vch->in_room == ch->in_room
  1148:	            bug( "Mpforce - No such victim: vnum %d.", ch->pIndexData->vnum );
  1154:	            bug( "Mpforce - Forcing oneself: vnum %d.", ch->pIndexData->vnum );
  1179:	        bug( "Mpsilentforce - Bad syntax: vnum %d.", ch->pIndexData->vnum );
  1191:	            vch_next = vch->next;
  1202:	                             ch->pIndexData->vnum );
  1209:	            if ( vch->in_room == ch->in_room
  1226:	                 ch->pIndexData->vnum );
  1233:	                 ch->pIndexData->vnum );
  1245:	                    bug( "mpsilentforce - mob vnum %d", ch->pIndexData->vnum );
  1284:	        bug( "Mpdefault - Bad syntax: vnum %d.", ch->pIndexData->vnum );
  1289:	        bug( "Mpdefault - No such victim: vnum %d.", ch->pIndexData->vnum );
  1295:	        bug( "Mpdefault - to oneself: vnum %d.", ch->pIndexData->vnum );
  1301:	        bug( "Mpdefault - npc victim: vnum %d.", ch->pIndexData->vnum );
  1317:	    if ( ( pMob = ch->pIndexData ) == NULL )
  1332:	    if ( ch->fighting != NULL || !pMob->path_move
  1333:	         || ch->position < POS_SLEEPING )
  1346:	        ch->position = POS_STANDING;
  1351:	        ch->position = POS_STANDING;
  1356:	        ch->position = POS_SLEEPING;
  1361:	        ch->position = POS_SLEEPING;
  1457:	    for ( corpse = ch->in_room->contents; corpse != NULL; corpse = c_next )
  1468:	            obj_to_room( obj, ch->in_room );
  1491:	    for ( trash = ch->in_room->contents; trash != NULL; trash = trash_next )
  1645:	    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
  1660:		spell_armor( skill_lookup( "armor" ), ch->level, ch, victim );
  1665:		spell_bless( skill_lookup( "bless" ), ch->level, ch, victim );
  1671:		    ch->level, ch, victim );
  1677:		    ch->level, ch, victim );
  1683:		    ch->level, ch, victim );
  1688:		spell_refresh( skill_lookup( "refresh" ), ch->level, ch, victim );
  1864:	    if ( ch->position == POS_FIGHTING )
In act_comm.c:
  269:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  283:	    if ( ch->pcdata->confirm_delete )
  288:	            ch->pcdata->confirm_delete = FALSE;
  294:	                     capitalize( ch->name ) );
  296:	                     time( NULL ), capitalize( ch->name ) );
  297:	            sprintf( buf, "%s has deleted.", ch->name );
  317:	    ch->pcdata->confirm_delete = TRUE;
  329:	    if ( !IS_SET( ch->comm, COMM_NOGOSSIP ) )
  337:	    if ( !IS_SET( ch->comm, COMM_NOGOC ) )
  345:	    if ( !IS_SET( ch->comm, COMM_NOAUCTION ) )
  351:	    if ( !IS_SET( ch->comm, COMM_NO_OOC ) )
  357:	    if ( !IS_SET( ch->comm, COMM_NOQUESTION ) )
  365:	        if ( !IS_SET( ch->comm, COMM_NOWIZ ) )
  376:	        if ( !IS_SET( ch->comm, COMM_NOADMIN ) )
  385:	    if ( ( IS_HERO( ch ) || IS_SET( ch->act, PLR_REMORT ) )
  389:	        if ( !IS_SET( ch->comm, COMM_NOHERO ) )
  398:	    if ( !IS_SET( ch->comm, COMM_DEAF ) )
  404:	    if ( !IS_SET( ch->comm, COMM_NOINFO ) )
  410:	    if ( !IS_SET( ch->comm, COMM_NOMUSIC ) )
  416:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  423:	        if ( ch->pcdata->spousec != 0 )
  427:	            if ( !IS_SET( ch->comm, COMM_NOSPOUSETALK ) )
  437:	        if ( ch->pcdata->tick == 1 )
  443:	    if ( ch->lines != PAGELEN )
  445:	        if ( ch->lines )
  448:	                     ch->lines + 2 );
  455:	    if ( IS_SET( ch->comm, COMM_NOSHOUT ) )
  458:	    if ( IS_SET( ch->comm, COMM_NOTELL ) )
  461:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  464:	    if ( IS_SET( ch->comm, COMM_NOEMOTE ) )
  472:	    if ( IS_SET( ch->comm, COMM_NOSHOUT ) )
  479:	    if ( IS_SET( ch->comm, COMM_DEAF ) )
  482:	        REMOVE_BIT( ch->comm, COMM_DEAF );
  487:	        SET_BIT( ch->comm, COMM_DEAF );
  494:	    if ( IS_SET( ch->comm, COMM_TELLOFF ) )
  497:	        REMOVE_BIT( ch->comm, COMM_TELLOFF );
  502:	        SET_BIT( ch->comm, COMM_TELLOFF );
  511:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  514:	        REMOVE_BIT( ch->comm, COMM_QUIET );
  515:	        if ( ch->pcdata->message != NULL )
  519:	                     ch->pcdata->messages,
  520:	                     ( ch->pcdata->messages > 1 ) ? "s" : "" );
  529:	        SET_BIT( ch->comm, COMM_QUIET );
  540:	        if ( IS_SET( ch->comm, COMM_NOGOSSIP ) )
  542:	            REMOVE_BIT( ch->comm, COMM_NOGOSSIP );
  547:	            SET_BIT( ch->comm, COMM_NOGOSSIP );
  555:	    if ( IS_SET( ch->comm, COMM_NOGOSSIP ) )
  563:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  571:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  580:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  635:	        if ( IS_SET( ch->comm, COMM_NOGOC ) )
  637:	            REMOVE_BIT( ch->comm, COMM_NOGOC );
  642:	            SET_BIT( ch->comm, COMM_NOGOC );
  665:	    if ( !IS_NPC( ch ) && IS_SET( ch->comm, COMM_QUIET ) )
  671:	    if ( !IS_NPC( ch ) && IS_SET( ch->comm, COMM_NOCHANNELS ) )
  678:	    switch ( ch->position )
  706:	                 !IS_SET( vch->comm, COMM_NOGOC ) &&
  707:	                 !IS_SET( vch->comm, COMM_QUIET ) )
  729:	                 !IS_SET( vch->comm, COMM_NOGOC ) &&
  730:	                 !IS_SET( vch->comm, COMM_QUIET ) )
  887:	                 !IS_SET( vch->comm, COMM_NOGOC ) &&
  888:	                 !IS_SET( vch->comm, COMM_QUIET ) )
  906:	        if ( IS_SET( ch->comm, COMM_NOMUSIC ) )
  908:	            REMOVE_BIT( ch->comm, COMM_NOMUSIC );
  913:	            SET_BIT( ch->comm, COMM_NOMUSIC );
  921:	    if ( IS_SET( ch->comm, COMM_NOMUSIC ) )
  929:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  937:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  944:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  980:	        if ( IS_SET( ch->comm, COMM_NOQUESTION ) )
  982:	            if ( IS_SET( ch->comm, COMM_NOQUESTION ) )
  984:	                REMOVE_BIT( ch->comm, COMM_NOQUESTION );
  989:	                SET_BIT( ch->comm, COMM_NOQUESTION );
  998:	    if ( IS_SET( ch->comm, COMM_NOQUESTION ) )
  1007:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  1016:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  1025:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1061:	        if ( IS_SET( ch->comm, COMM_NOQUESTION ) )
  1063:	            REMOVE_BIT( ch->comm, COMM_NOQUESTION );
  1068:	            SET_BIT( ch->comm, COMM_NOQUESTION );
  1076:	    if ( IS_SET( ch->comm, COMM_NOQUESTION ) )
  1085:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  1095:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1100:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  1139:	        if ( IS_SET( ch->comm, COMM_NO_OOC ) )
  1141:	            REMOVE_BIT( ch->comm, COMM_NO_OOC );
  1146:	            SET_BIT( ch->comm, COMM_NO_OOC );
  1154:	    if ( IS_SET( ch->comm, COMM_NO_OOC ) )
  1162:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  1170:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  1178:	    REMOVE_BIT( ch->comm, COMM_NO_OOC );
  1182:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1217:	        if ( IS_SET( ch->comm, COMM_NOWIZ ) )
  1219:	            REMOVE_BIT( ch->comm, COMM_NOWIZ );
  1224:	            SET_BIT( ch->comm, COMM_NOWIZ );
  1232:	    if ( IS_SET( ch->comm, COMM_NOWIZ ) )
  1241:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  1250:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  1290:	        if ( IS_SET( ch->comm, COMM_NOADMIN ) )
  1292:	            REMOVE_BIT( ch->comm, COMM_NOADMIN );
  1297:	            SET_BIT( ch->comm, COMM_NOADMIN );
  1305:	    if ( IS_SET( ch->comm, COMM_NOADMIN ) )
  1314:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  1323:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  1363:	        if ( IS_SET( ch->comm, COMM_NOHERO ) )
  1365:	            REMOVE_BIT( ch->comm, COMM_NOHERO );
  1370:	            SET_BIT( ch->comm, COMM_NOHERO );
  1378:	    if ( IS_SET( ch->comm, COMM_NOHERO ) )
  1387:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  1396:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  1439:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1465:	    if ( IS_SET( ch->comm, COMM_NOSHOUT ) )
  1471:	    if ( IS_SET( ch->comm, COMM_DEAF ) )
  1487:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1514:	        if ( IS_SET( ch->comm, COMM_NOINFO ) )
  1517:	            REMOVE_BIT( ch->comm, COMM_NOINFO );
  1522:	            SET_BIT( ch->comm, COMM_NOINFO );
  1553:	    if ( ch->beep )
  1555:	        ch->beep = FALSE;
  1559:	    ch->beep = TRUE;
  1571:	    if ( IS_SET( ch->comm, COMM_NOTELL ) )
  1577:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  1596:	         || ( IS_NPC( victim ) && victim->in_room != ch->in_room ) )
  1626:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1672:	             ch->name, argument ); // JR: seems buf is written to but not used
  1684:	    if ( IS_SET( ch->comm, COMM_NOTELL ) )
  1690:	    if ( ( victim = ch->reply ) == NULL )
  1735:	             ch->name, argument );
  1754:	        victim->pcdata->message->sender = str_dup( ch->name );
  1757:	        victim->pcdata->message->wizilvl = ch->invis_level;
  1766:	        victim->pcdata->message->sender = str_dup( ch->name );
  1769:	        victim->pcdata->message->wizilvl = ch->invis_level;
  1799:	        victim->pcdata->tell_q->sender = str_dup( ch->name );
  1802:	        victim->pcdata->tell_q->wizilvl = ch->invis_level;
  1812:	        victim->pcdata->tell_q->sender = str_dup( ch->name );
  1815:	        victim->pcdata->tell_q->wizilvl = ch->invis_level;
  1861:	            str_dup( IS_NPC( ch ) ? ch->short_descr : ch->name );
  1863:	        last_list->wizilvl = ch->invis_level;
  1919:	    last_imm->sender = str_dup( IS_NPC( ch ) ? ch->short_descr : ch->name );
  1921:	    last_imm->wizilvl = IS_NPC( ch ) ? 0 : ch->invis_level;
  1969:	    last_admin->sender = str_dup( IS_NPC( ch ) ? ch->short_descr : ch->name );
  1971:	    last_admin->wizilvl = IS_NPC( ch ) ? 0 : ch->invis_level;
  2019:	    last_hero->sender = str_dup( IS_NPC( ch ) ? ch->short_descr : ch->name );
  2021:	    last_hero->wizilvl = IS_NPC( ch ) ? 0 : ch->invis_level;
  2035:	    if ( ch->pcdata->fmessage == NULL )
  2041:	    if ( ch->pcdata->fmessage->wizilvl > get_trust( ch ) )
  2043:	    else if ( ch->pcdata->fmessage->invis
  2045:	              && !IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2048:	        sender = ch->pcdata->fmessage->sender;
  2051:	             ch->pcdata->fmessage->text );
  2063:	        if ( str_cmp( reply->name, ch->pcdata->fmessage->sender ) == 0 )
  2065:	            ch->reply = reply;
  2074:	            if ( str_cmp( reply->name, ch->pcdata->fmessage->sender ) == 0 )
  2076:	                ch->reply = reply;
  2082:	    /* If no match is found, set ch->reply to NULL */
  2083:	    if ( reply == NULL ) ch->reply = NULL;
  2085:	    mq = ch->pcdata->fmessage;
  2086:	    ch->pcdata->fmessage = ch->pcdata->fmessage->next;
  2090:	    if ( !ch->pcdata->fmessage )
  2091:	        ch->pcdata->message = NULL;
  2093:	    ch->pcdata->messages--;
  2094:	    if ( ch->pcdata->messages > 0 )
  2097:	                 ch->pcdata->messages,
  2098:	                 ( ch->pcdata->messages > 1 ) ? "s" : "" );
  2114:	    if ( ch->pcdata->ftell_q == NULL )
  2120:	    for ( mq = ch->pcdata->ftell_q; mq != NULL; mq = mq->next )
  2125:	                  && !IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2166:	                  && !IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2226:	                  && !IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2286:	                  && !IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2346:	                  && !IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2392:	    if ( IS_SET( ch->comm, COMM_NOSHOUT ) )
  2406:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  2415:	             d->character->in_room->area == ch->in_room->area &&
  2430:	    if ( !IS_NPC( ch ) && IS_SET( ch->comm, COMM_NOEMOTE ) )
  2444:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  2455:	    if ( IS_SET( ch->comm, COMM_NOINFO ) )
  2458:	        REMOVE_BIT( ch->comm, COMM_NOINFO );
  2463:	        SET_BIT( ch->comm, COMM_NOINFO );
  2690:	        UMIN( ch->level, sizeof( pose_table ) / sizeof( pose_table[0] ) - 1 );
  2693:	    act( pose_table[pose].message[2 * ch->Class + 0], ch, NULL, NULL, TO_CHAR );
  2694:	    act( pose_table[pose].message[2 * ch->Class + 1], ch, NULL, NULL, TO_ROOM );
  2746:	    if ( !ch->desc->tintin )
  2749:	    if ( ch->position == POS_FIGHTING )
  2764:	    if ( ch->position < POS_STUNNED )
  2769:	    if ( IS_SET( ch->act, PLR_BUILDING ) ) // JR: removed (presumably) errant semicolon
  2771:	        REMOVE_BIT( ch->act, PLR_BUILDING );
  2774:	    if ( ch->desc->tintin )
  2776:	        write_to_buffer( ch->desc, "$*\n\r@^", 6 );
  2780:	    ch->pcdata->ticks = 0;
  2781:	    if ( !IS_SET( ch->act, PLR_WIZINVIS ) )
  2783:	        sprintf( buf, "%s has left the game.", ch->name );
  2787:	    sprintf( log_buf, "%s has quit.", ch->name );
  2800:	    if ( ch->pcdata->in_progress )
  2802:	        free_note( ch->pcdata->in_progress );
  2805:	    name = strdup( ch->name );
  2806:	    d = ch->desc;
  2821:	/*      if ((tch) && (!strcmp(tch->name,name)) && (ch != tch)) */
  2822:	        if ( ( tch ) && ( !strcmp( tch->name, name ) ) )
  2884:	    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master != NULL )
  2886:	        act( "But you'd rather follow $N!", ch, NULL, ch->master, TO_CHAR );
  2892:	        if ( ch->master == NULL )
  2909:	    REMOVE_BIT( ch->act, PLR_NOFOLLOW );
  2911:	    if ( ch->master != NULL )
  2920:	    if ( ch->master != NULL )
  2926:	    ch->master = master;
  2927:	    ch->leader = NULL;
  2939:	    if ( ch->master == NULL )
  2947:	        REMOVE_BIT( ch->affected_by, AFF_CHARM );
  2951:	    if ( can_see( ch->master, ch ) && ch->in_room != NULL )
  2953:	        act( "$n stops following you.", ch, NULL, ch->master, TO_VICT );
  2954:	        act( "You stop following $N.", ch, NULL, ch->master, TO_CHAR );
  2956:	    if ( ch->master->pet == ch )
  2957:	        ch->master->pet = NULL;
  2959:	    ch->master = NULL;
  2960:	    ch->leader = NULL;
  2969:	    if ( ( pet = ch->pet ) != NULL )
  2976:	    ch->pet = NULL;
  2985:	    if ( ch->master != NULL )
  2987:	        if ( ch->master->pet == ch )
  2988:	            ch->master->pet = NULL;
  2992:	    ch->leader = NULL;
  2994:	    for ( fch = char_list; fch != NULL; fch = fch->next )
  2996:	        if ( fch->master == ch )
  2998:	        if ( fch->leader == ch )
  2999:	            fch->leader = fch;
  3064:	    for ( och = ch->in_room->people; och != NULL; och = och_next )
  3066:	        och_next = och->next_in_room;
  3069:	             && och->master == ch && ( fAll || och == victim ) )
  3086:	                         ch->name, och->name, cmd_vi );
  3097:	                         ch->name, och->name, cmd_vi );
  3108:	                    sprintf( buf, "%s ordered %s to '%s'", ch->name, och->name,
  3154:	        leader = ( ch->leader != NULL ) ? ch->leader : ch;
  3158:	        for ( gch = char_list; gch != NULL; gch = gch->next )
  3164:	                         gch->level,
  3165:	                         IS_NPC( gch ) ? "Mob" : class_table[gch->Class].
  3166:	                         who_name, capitalize( PERS( gch, ch ) ), gch->hit,
  3167:	                         gch->max_hit, gch->mana, gch->max_mana, gch->move,
  3168:	                         gch->max_move, gch->exp );
  3181:	    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
  3259:	    if ( ch->gold < amount )
  3266:	    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  3287:	    ch->gold -= amount;
  3288:	    ch->gold += share + extra;
  3298:	    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  3304:	            gch->gold += share;
  3323:	    if ( IS_SET( ch->comm, COMM_NOTELL ) )
  3331:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  3338:	    sprintf( buf, "`C%s tells the group '%s`C'.\n\r`w", ch->name, argument );
  3340:	    for ( gch = char_list; gch != NULL; gch = gch->next )
  3360:	    if ( ach->leader != NULL )
  3361:	        ach = ach->leader;
  3362:	    if ( bch->leader != NULL )
  3363:	        bch = bch->leader;
  3377:	    if ( ch->pcdata->spousec == 0 )
  3385:	        if ( IS_SET( ch->comm, COMM_NOSPOUSETALK ) )
  3388:	            REMOVE_BIT( ch->comm, COMM_NOSPOUSETALK );
  3393:	            SET_BIT( ch->comm, COMM_NOSPOUSETALK );
  3398:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  3404:	    if ( IS_SET( ch->comm, COMM_DEAF ) )
  3410:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  3418:	    REMOVE_BIT( ch->comm, COMM_NOSPOUSETALK );
  3422:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  3443:	             is_name( victim->pcdata->spouse, ch->name ) )
  3487:	                            ch->name, victim->name, ch->name, argument );
  3489:	                            ch->name, victim->name, ch->name, argument );
In mprog_procs.c:
  118:	    return ch->pcdata->clan;
  144:	    for ( ch = ProgSource->in_room->people; ch; ch = ch->next_in_room )
  145:	        if ( ch->fighting )
  182:	    return ( ch->hit / ch->max_hit ) * 100;
  233:	    return ( ch->master != NULL && ch->master->in_room == ch->in_room );
  295:	        return ch->pIndexData->vnum;
In olc.h:
  345:	#define IS_SWITCHED( ch )       ( ch->desc->original )  /* ROM OLC */
  347:	#define IS_BUILDER(ch, Area)	( ( ch->pcdata->security >= Area->security  \
  348:					|| strstr( Area->builders, ch->name )	    \
In save.c:
  106:	    if ( ch->desc != NULL && ch->desc->original != NULL )
  107:	        ch = ch->desc->original;
  110:	    if ( IS_HERO( ch ) || ch->level >= LEVEL_HERO )
  113:	        sprintf( strsave, "%s/%s", sysconfig.god_dir, capitalize( ch->name ) );
  128:	                 ch->level, get_trust( ch ), ch->name, ch->pcdata->title );
  147:	        if ( ch->carrying != NULL )
  148:	            fwrite_obj( ch, ch->carrying, fp, 0 );
  151:	        if ( ch->pet != NULL && ch->pet->in_room == ch->in_room )
  152:	            fwrite_pet( ch->pet, fp );
  157:	        for ( tmpcmd = ch->pcdata->immcmdlist; tmpcmd != NULL;
  171:	        if ( ch->pcdata->faction_standings != NULL )
  182:	                 capitalize( ch->name ) );
  212:	    fprintf( fp, "Name %s~\n", ch->name );
  214:	    if ( ch->short_descr[0] != '\0' )
  215:	        fprintf( fp, "ShD  %s~\n", ch->short_descr );
  216:	    if ( ch->long_descr[0] != '\0' )
  217:	        fprintf( fp, "LnD  %s~\n", ch->long_descr );
  218:	    if ( ch->description[0] != '\0' )
  219:	        fprintf( fp, "Desc %s~\n", ch->description ); /* JR replace \n\r with \n */
  220:	    fprintf( fp, "Race %s~\n", pc_race_table[ch->race].name );
  221:	    fprintf( fp, "Sex  %d\n", ch->sex );
  222:	    fprintf( fp, "Cla  %d\n", ch->Class );
  223:	    fprintf( fp, "Beep %d\n", ch->beep );
  224:	    fprintf( fp, "Anon %d\n", ch->anonymous );
  225:	    fprintf( fp, "Levl %d\n", ch->level );
  226:	    if ( ch->trust != 0 )
  227:	        fprintf( fp, "Tru  %d\n", ch->trust );
  228:	    fprintf( fp, "Sec  %d\n", ch->pcdata->security );   /* OLC */
  229:	    fprintf( fp, "Logn %d\n", ( int ) ( ch->logon ) );  /* Added for finger command */
  231:	             ch->played + ( int ) ( current_time - ch->logon ) );
  232:	    fprintf( fp, "Age %d\n", ch->start_age ); // JR
  233:	    fprintf( fp, "Note %d\n", ( int ) ch->last_note );
  234:	    fprintf( fp, "Scro %d\n", ch->lines );
  236:	             ( ch->in_room == get_room_index( ROOM_VNUM_LIMBO )
  237:	               && ch->was_in_room != NULL )
  238:	             ? ch->was_in_room->vnum
  239:	             : ch->in_room == NULL ? 3001 : ch->in_room->vnum );
  242:	             ch->hit, ch->max_hit, ch->mana, ch->max_mana, ch->move,
  243:	             ch->max_move );
  244:	    if ( ch->gold > 0 )
  245:	        fprintf( fp, "Gold %ld\n", ch->gold );
  248:	    if ( ch->pcdata->gold_bank > 0 )
  249:	        fprintf( fp, "Gold_bank %ld\n", ch->pcdata->gold_bank );
  252:	    fprintf( fp, "Exp  %ld\n", ch->exp );
  253:	    if ( ch->act != 0 )
  254:	        fprintf( fp, "Act  %ld\n", ch->act );
  255:	    if ( ch->affected_by != 0 )
  256:	        fprintf( fp, "AfBy %ld\n", ch->affected_by );
  257:	    if ( ch->newaff[0] != 0 )
  258:	        fprintf( fp, "NewAfBy %s\n", ch->newaff );
  259:	    fprintf( fp, "Comm %ld\n", ch->comm );
  260:	    if ( ch->incarnations != 0 )
  261:	        fprintf( fp, "Inca %d\n", ch->incarnations );
  262:	    if ( ch->invis_level != 0 )
  263:	        fprintf( fp, "Invi %d\n", ch->invis_level );
  265:	             ch->position == POS_FIGHTING ? POS_STANDING : ch->position );
  266:	    if ( ch->practice != 0 )
  267:	        fprintf( fp, "Prac %d\n", ch->practice );
  268:	    if ( ch->train != 0 )
  269:	        fprintf( fp, "Trai %d\n", ch->train );
  270:	    if ( ch->qp != 0 )
  271:	        fprintf( fp, "Qp %d\n", ch->qp );
  272:	    if ( ch->saving_throw != 0 )
  273:	        fprintf( fp, "Save  %d\n", ch->saving_throw );
  274:	    fprintf( fp, "Alig  %d\n", ch->alignment );
  275:	    if ( ch->hitroll != 0 )
  276:	        fprintf( fp, "Hit   %d\n", ch->hitroll );
  277:	    if ( ch->damroll != 0 )
  278:	        fprintf( fp, "Dam   %d\n", ch->damroll );
  280:	             ch->armor[0], ch->armor[1], ch->armor[2], ch->armor[3] );
  281:	    if ( ch->wimpy != 0 )
  282:	        fprintf( fp, "Wimp  %d\n", ch->wimpy );
  284:	             ch->perm_stat[STAT_STR],
  285:	             ch->perm_stat[STAT_INT],
  286:	             ch->perm_stat[STAT_WIS],
  287:	             ch->perm_stat[STAT_DEX], ch->perm_stat[STAT_CON] );
  290:	             ch->mod_stat[STAT_STR],
  291:	             ch->mod_stat[STAT_INT],
  292:	             ch->mod_stat[STAT_WIS],
  293:	             ch->mod_stat[STAT_DEX], ch->mod_stat[STAT_CON] );
  297:	        fprintf( fp, "Vnum %d\n", ch->pIndexData->vnum );
  301:	        fprintf( fp, "Pass %s~\n", ch->pcdata->pwd );
  302:	        if ( ch->pcdata->bamfin[0] != '\0' )
  303:	            fprintf( fp, "Bin  %s~\n", ch->pcdata->bamfin );
  304:	        if ( ch->pcdata->bamfout[0] != '\0' )
  305:	            fprintf( fp, "Bout %s~\n", ch->pcdata->bamfout );
  306:	        fprintf( fp, "Titl %s~\n", ch->pcdata->title );
  307:	        fprintf( fp, "Pnts %d\n", ch->pcdata->points );
  308:	        fprintf( fp, "TSex %d\n", ch->pcdata->true_sex );
  309:	        fprintf( fp, "LLev %d\n", ch->pcdata->last_level );
  310:	        fprintf( fp, "HMVP %d %d %d\n", ch->pcdata->perm_hit,
  311:	                 ch->pcdata->perm_mana, ch->pcdata->perm_move );
  313:	                 ch->pcdata->condition[0],
  314:	                 ch->pcdata->condition[1], ch->pcdata->condition[2] );
  315:	        fprintf( fp, "Prom %s~\n", ch->pcdata->prompt );
  316:	        fprintf( fp, "Clan %d\n", ch->pcdata->clan );
  317:	        fprintf( fp, "Rank %d\n", ch->pcdata->clan_rank );
  318:	        fprintf( fp, "Cmnt %s~\n", ch->pcdata->comment );
  319:	        fprintf( fp, "Eml  %s~\n", ch->pcdata->email );
  320:	        fprintf( fp, "Spoc %d\n", ch->pcdata->spousec );
  321:	        fprintf( fp, "Spou %s~\n", ch->pcdata->spouse );
  322:	        fprintf( fp, "Neme %s~\n", ch->pcdata->nemesis );
  323:	        fprintf( fp, "PKdi %d\n", ch->pcdata->pk_deaths );
  324:	        fprintf( fp, "PKki %d\n", ch->pcdata->pk_kills );
  325:	        //fprintf( fp, "TinTin %d\n", ch->tintin );
  326:	        fprintf( fp, "Tick %d\n", ch->pcdata->tick );
  327:	        fprintf( fp, "Ticks %d\n", ch->pcdata->ticks );
  328:	        if ( ch->pcdata->who_race )
  329:	            fprintf( fp, "WRace %s~\n", ch->pcdata->who_race );
  330:	        if ( ch->pcdata->who_prefix )
  331:	            fprintf( fp, "WPref %s~\n", ch->pcdata->who_prefix );
  338:	                     ch->pcdata->last_note[i] );
  341:	        if ( ch->pcdata->recall_room == NULL )
  342:	            ch->pcdata->recall_room = get_room_index( ROOM_VNUM_TEMPLE );
  343:	        fprintf( fp, "Recl %d\n", ch->pcdata->recall_room->vnum );
  348:	            if ( ch->pcdata->alias[pos] == NULL
  349:	                 || ch->pcdata->alias_sub[pos] == NULL )
  352:	            fprintf( fp, "Alias %s %s~\n", ch->pcdata->alias[pos],
  353:	                     ch->pcdata->alias_sub[pos] );
  358:	            if ( skill_table[sn].name != NULL && ch->pcdata->learned[sn] > 0 )
  361:	                         ch->pcdata->learned[sn], skill_table[sn].name );
  367:	            if ( group_table[gn].name != NULL && ch->pcdata->group_known[gn] )
  374:	    for ( paf = ch->affected; paf != NULL; paf = paf->next )
  384:	    for ( npaf = ch->newaffected; npaf != NULL; npaf = npaf->next )
  495:	                if ( ch->level < obj->value[1] )
  501:	                if ( ch->level > obj->value[2] )
  637:	        ch->pcdata = alloc_perm( sizeof( *ch->pcdata ) );
  641:	        ch->pcdata = pcdata_free;
  644:	    *ch->pcdata = pcdata_zero;
  647:	    ch->desc = d;
  648:	    ch->name = str_dup( name );
  649:	    ch->version = 0;
  650:	    ch->race = race_lookup( "human" );
  651:	    ch->affected_by = 0;
  652:	    ch->newaff[0] = 0;
  653:	    ch->act = PLR_NOSUMMON
  655:	    ch->comm = COMM_COMBINE | COMM_PROMPT;
  656:	    ch->invis_level = 0;
  657:	    ch->practice = 0;
  658:	    ch->train = 0;
  659:	    ch->hitroll = 0;
  660:	    ch->damroll = 0;
  661:	    ch->trust = 0;
  662:	    ch->wimpy = 0;
  663:	    ch->saving_throw = 0;
  664:	    ch->exp_stack = 0;
  665:	    ch->pcdata->points = 0;
  666:	    ch->pcdata->confirm_delete = FALSE;
  667:	    ch->pcdata->fmessage = NULL;
  668:	    ch->pcdata->message = NULL;
  669:	    ch->pcdata->ftell_q = NULL;
  670:	    ch->pcdata->tell_q = NULL;
  671:	    ch->pcdata->messages = 0;
  672:	    ch->pcdata->tells = 0;
  673:	    ch->pcdata->board = &boards[DEFAULT_BOARD];
  674:	    ch->pcdata->pwd = str_dup( "" );
  675:	    ch->pcdata->bamfin = str_dup( "" );
  676:	    ch->pcdata->bamfout = str_dup( "" );
  677:	    ch->pcdata->title = str_dup( "" );
  679:	        ch->perm_stat[stat] = 13;
  680:	    ch->pcdata->perm_hit = 0;
  681:	    ch->pcdata->perm_mana = 0;
  682:	    ch->pcdata->perm_move = 0;
  683:	    ch->pcdata->true_sex = 0;
  684:	    ch->pcdata->last_level = 0;
  685:	    ch->pcdata->condition[COND_THIRST] = 48;
  686:	    ch->pcdata->condition[COND_FULL] = 48;
  687:	    ch->pcdata->security = 0;   /* OLC */
  688:	    ch->pcdata->prompt = str_dup( PROMPT_DEFAULT ); /* JR changed default */
  689:	/*    ch->pcdata->clan			= 0; */
  690:	    ch->beep = TRUE;
  691:	    ch->anonymous = FALSE;
  692:	    ch->pcdata->recall_room = get_room_index( ROOM_VNUM_TEMPLE );
  693:	    ch->pcdata->pk_deaths = 0;
  694:	    ch->pcdata->pk_kills = 0;
  695:	    ch->pcdata->tick = 0;
  696:	    ch->pcdata->ticks = 0;
  697:	    ch->pcdata->spousec = 0;
  698:	    ch->pcdata->spouse = str_dup( "(none)" );
  699:	    ch->pcdata->nemesis = str_dup( "(none)" );
  700:	    ch->pcdata->email = str_dup( "(none)" );
  701:	    ch->pcdata->comment = str_dup( "(none)" );
  702:	    ch->pcdata->who_race = NULL;
  703:	    ch->pcdata->who_prefix = NULL;
  704:	    ch->pcdata->immcmdlist = NULL;
  705:	    ch->pcdata->faction_standings = NULL;
  707:	    ch->start_age = 0; 
  708:	    //ch->tintin = 0;
  782:	        if ( ch->race == 0 )
  783:	            ch->race = race_lookup( "human" );
  785:	        ch->size = pc_race_table[ch->race].size;
  786:	        ch->dam_type = 17;      /*punch */
  790:	            if ( pc_race_table[ch->race].skills[i] == NULL )
  792:	            group_add( ch, pc_race_table[ch->race].skills[i], FALSE );
  794:	        ch->affected_by = ch->affected_by | race_table[ch->race].aff;
  795:	        ch->imm_flags = ch->imm_flags | race_table[ch->race].imm;
  796:	        ch->res_flags = ch->res_flags | race_table[ch->race].res;
  797:	        ch->vuln_flags = ch->vuln_flags | race_table[ch->race].vuln;
  798:	        ch->form = race_table[ch->race].form;
  799:	        ch->parts = race_table[ch->race].parts;
  804:	    if ( found && ch->version < 2 ) /* need to add the new skills */
  807:	        group_add( ch, class_table[ch->Class].base_group, FALSE );
  808:	        group_add( ch, class_table[ch->Class].default_group, TRUE );
  809:	        ch->pcdata->learned[gsn_recall] = 50;
  813:	    if ( found && ch->version < 3 && ( ch->level > 35 || ch->trust > 35 ) )
  815:	        switch ( ch->level )
  818:	            ch->level = 60;
  821:	            ch->level = 58;
  824:	            ch->level = 56;
  827:	            ch->level = 53;
  831:	        switch ( ch->trust )
  834:	            ch->trust = 60;
  837:	            ch->trust = 58;
  840:	            ch->trust = 56;
  843:	            ch->trust = 53;
  846:	            ch->trust = 51;
  888:	            KEY( "Act", ch->act, fread_number( fp ) );
  889:	            KEY( "AffectedBy", ch->affected_by, fread_number( fp ) );
  890:	            KEY( "AfBy", ch->affected_by, fread_number( fp ) );
  891:	            KEY( "NewAffectedBy", ch->newaff[0], fread_number( fp ) );
  892:	            KEY( "NewAfBy", ch->newaff[0], fread_number( fp ) );
  893:	            KEY( "Alignment", ch->alignment, fread_number( fp ) );
  894:	            KEY( "Alig", ch->alignment, fread_number( fp ) );
  895:	            KEY( "Anon", ch->anonymous, fread_number( fp ) );
  896:	            KEY( "Age", ch->start_age, fread_number( fp ) );
  907:	                ch->pcdata->alias[count] = str_dup( fread_word( fp ) );
  908:	                ch->pcdata->alias_sub[count] = fread_string( fp );
  926:	                    ch->armor[i] = fread_number( fp );
  957:	                if ( ch->version == 0 )
  958:	                    paf->level = ch->level;
  965:	                paf->next = ch->affected;
  966:	                ch->affected = paf;
  996:	                if ( ch->version == 0 )
  997:	                    npaf->level = ch->level;
  1004:	/*		npaf->next	= ch->newaff[0];
  1005:			ch->newaff	= npaf;*/
  1014:	                    ch->mod_stat[stat] = fread_number( fp );
  1024:	                    ch->perm_stat[stat] = fread_number( fp );
  1031:	            KEY( "Beep", ch->beep, fread_number( fp ) );
  1032:	            KEY( "Bamfin", ch->pcdata->bamfin, fread_string( fp ) );
  1033:	            KEY( "Bamfout", ch->pcdata->bamfout, fread_string( fp ) );
  1034:	            KEY( "Bin", ch->pcdata->bamfin, fread_string( fp ) );
  1035:	            KEY( "Bout", ch->pcdata->bamfout, fread_string( fp ) );
  1051:	                                 ch->name, boardname );
  1056:	                        ch->pcdata->last_note[i] = fread_number( fp );
  1064:	            KEY( "Class", ch->Class, fread_number( fp ) );
  1065:	            KEY( "Cla", ch->Class, fread_number( fp ) );
  1066:	            KEY( "Clan", ch->pcdata->clan, fread_number( fp ) );
  1070:	                ch->pcdata->condition[0] = fread_number( fp );
  1071:	                ch->pcdata->condition[1] = fread_number( fp );
  1072:	                ch->pcdata->condition[2] = fread_number( fp );
  1076:	            KEY( "Cmnt", ch->pcdata->comment, fread_string( fp ) );
  1077:	            KEY( "Comm", ch->comm, fread_number( fp ) );
  1082:	            KEY( "Damroll", ch->damroll, fread_number( fp ) );
  1083:	            KEY( "Dam", ch->damroll, fread_number( fp ) );
  1084:	            KEY( "Description", ch->description, fread_string( fp ) );
  1085:	            KEY( "Desc", ch->description, fread_string( fp ) );
  1092:	                if ( ch->desc->ansi && !fCopyOver )
  1093:	                    SET_BIT( ch->act, PLR_COLOR );
  1095:	                    REMOVE_BIT( ch->act, PLR_COLOR );
  1096:	                else if ( IS_SET( ch->act, PLR_COLOR ) )
  1097:	                    ch->desc->ansi = TRUE;
  1099:	                    ch->desc->ansi = FALSE;
  1100:	                if ( ch->start_age == 0 )
  1102:	                    ch->start_age = number_range( pc_race_table[ch->race].age[0], pc_race_table[ch->race].age[1] ); // JR: for old chars
  1106:	            KEY( "Eml", ch->pcdata->email, fread_string( fp ) );
  1107:	            KEY( "Exp", ch->exp, fread_number( fp ) );
  1111:	            KEY( "Gold_bank", ch->pcdata->gold_bank, fread_number( fp ) );
  1112:	            KEY( "Gold", ch->gold, fread_number( fp ) );
  1133:	            KEY( "Hitroll", ch->hitroll, fread_number( fp ) );
  1134:	            KEY( "Hit", ch->hitroll, fread_number( fp ) );
  1138:	                ch->hit = fread_number( fp );
  1139:	                ch->max_hit = fread_number( fp );
  1140:	                ch->mana = fread_number( fp );
  1141:	                ch->max_mana = fread_number( fp );
  1142:	                ch->move = fread_number( fp );
  1143:	                ch->max_move = fread_number( fp );
  1151:	                ch->pcdata->perm_hit = fread_number( fp );
  1152:	                ch->pcdata->perm_mana = fread_number( fp );
  1153:	                ch->pcdata->perm_move = fread_number( fp );
  1161:	            KEY( "InvisLevel", ch->invis_level, fread_number( fp ) );
  1162:	            KEY( "Invi", ch->invis_level, fread_number( fp ) );
  1163:	            KEY( "Inca", ch->incarnations, fread_number( fp ) );
  1167:	            KEY( "LastLevel", ch->pcdata->last_level, fread_number( fp ) );
  1168:	            KEY( "LLev", ch->pcdata->last_level, fread_number( fp ) );
  1169:	            KEY( "Level", ch->level, fread_number( fp ) );
  1170:	            KEY( "Lev", ch->level, fread_number( fp ) );
  1171:	            KEY( "Levl", ch->level, fread_number( fp ) );
  1172:	            KEY( "LongDescr", ch->long_descr, fread_string( fp ) );
  1173:	            KEY( "LnD", ch->long_descr, fread_string( fp ) );
  1175:	            if ( ch->version == 3 )
  1184:	            else if ( ch->version == 4 )
  1196:	            KEY( "Name", ch->name, fread_string( fp ) );
  1197:	            KEY( "Neme", ch->pcdata->nemesis, fread_string( fp ) );
  1198:	            KEY( "Note", ch->last_note, fread_number( fp ) );
  1202:	        //    KEY( "OLC", ch->desc->editor, fread_number( fp ) );
  1205:	            KEY( "Password", ch->pcdata->pwd, fread_string( fp ) );
  1206:	            KEY( "Pass", ch->pcdata->pwd, fread_string( fp ) );
  1207:	            KEY( "PKdi", ch->pcdata->pk_deaths, fread_number( fp ) );
  1208:	            KEY( "PKki", ch->pcdata->pk_kills, fread_number( fp ) );
  1209:	            KEY( "Played", ch->played, fread_number( fp ) );
  1210:	            KEY( "Plyd", ch->played, fread_number( fp ) );
  1211:	            KEY( "Points", ch->pcdata->points, fread_number( fp ) );
  1212:	            KEY( "Pnts", ch->pcdata->points, fread_number( fp ) );
  1213:	            KEY( "Position", ch->position, fread_number( fp ) );
  1214:	            KEY( "Pos", ch->position, fread_number( fp ) );
  1215:	            KEY( "Practice", ch->practice, fread_number( fp ) );
  1216:	            KEY( "Prac", ch->practice, fread_number( fp ) );
  1217:	            KEY( "Prom", ch->pcdata->prompt, fread_string( fp ) );
  1221:	            KEY( "Qp", ch->qp, fread_number( fp ) );
  1225:	            /* KEY( "Race",        ch->race,    
  1231:	                ch->race = race_lookup( race );
  1236:	            KEY( "Rank", ch->pcdata->clan_rank, fread_number( fp ) );
  1240:	                ch->pcdata->recall_room = get_room_index( fread_number( fp ) );
  1241:	                if ( ch->pcdata->recall_room == NULL )
  1242:	                    ch->pcdata->recall_room =
  1250:	                ch->in_room = get_room_index( fread_number( fp ) );
  1251:	                if ( ch->in_room == NULL )
  1252:	                    ch->in_room = get_room_index( ROOM_VNUM_LIMBO );
  1259:	            KEY( "SavingThrow", ch->saving_throw, fread_number( fp ) );
  1260:	            KEY( "Save", ch->saving_throw, fread_number( fp ) );
  1261:	            KEY( "Scro", ch->lines, fread_number( fp ) );
  1262:	            KEY( "Sex", ch->sex, fread_number( fp ) );
  1263:	            KEY( "ShortDescr", ch->short_descr, fread_string( fp ) );
  1264:	            KEY( "ShD", ch->short_descr, fread_string( fp ) );
  1265:	            KEY( "Sec", ch->pcdata->security, fread_number( fp ) ); /* OLC */
  1266:	            KEY( "Spoc", ch->pcdata->spousec, fread_number( fp ) );
  1267:	            KEY( "Spou", ch->pcdata->spouse, fread_string( fp ) );
  1285:	                    ch->pcdata->learned[sn] = value;
  1292:	            KEY( "Tick", ch->pcdata->tick, fread_number( fp ) );
  1293:	            KEY( "Ticks", ch->pcdata->ticks, fread_number( fp ) );
  1294:	            KEY( "TrueSex", ch->pcdata->true_sex, fread_number( fp ) );
  1295:	            KEY( "TSex", ch->pcdata->true_sex, fread_number( fp ) );
  1296:	            KEY( "Trai", ch->train, fread_number( fp ) );
  1297:	            KEY( "Trust", ch->trust, fread_number( fp ) );
  1298:	            KEY( "Tru", ch->trust, fread_number( fp ) );
  1299:	            //KEY( "TinTin", ch->tintin, fread_number( fp ) ); // JR temp
  1303:	                ch->pcdata->title = fread_string( fp );
  1304:	                if ( ch->pcdata->title[0] != '.' && ch->pcdata->title[0] != ','
  1305:	                     && ch->pcdata->title[0] != '!'
  1306:	                     && ch->pcdata->title[0] != '?' )
  1308:	                    sprintf( buf, " %s", ch->pcdata->title );
  1309:	                    free_string( &ch->pcdata->title );
  1310:	                    ch->pcdata->title = str_dup( buf );
  1319:	            KEY( "Version", ch->version, fread_number( fp ) );
  1320:	            KEY( "Vers", ch->version, fread_number( fp ) );
  1323:	                ch->pIndexData = get_mob_index( fread_number( fp ) );
  1330:	            KEY( "Wimpy", ch->wimpy, fread_number( fp ) );
  1331:	            KEY( "Wimp", ch->wimpy, fread_number( fp ) );
  1332:	            KEY( "WRace", ch->pcdata->who_race, fread_string( fp ) );
  1333:	            KEY( "WPref", ch->pcdata->who_prefix, fread_string( fp ) );
  1362:	        tmp->next = ch->pcdata->immcmdlist;
  1363:	        ch->pcdata->immcmdlist = tmp;
  1487:	                ch->pet = pet;
  1532:	                ch->race = race_lookup( race );
  1658:	                if ( ch->version == 0 )
In socialolc.c:
  240:	            ch->desc->pEdit = ( void * ) pSocial;
  241:	            ch->desc->editor = ED_SOCIAL;
  242:	            SET_BIT( ch->act, PLR_BUILDING );
  254:	                    ch->desc->editor = ED_SOCIAL;
  255:	                    SET_BIT( ch->act, PLR_BUILDING );
  281:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  335:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  390:	    ch->desc->pEdit = ( void * ) pSocial;
  399:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  439:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  465:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  491:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  517:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  543:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  569:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  595:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
  621:	    pSocial = ( SOCIALLIST_DATA * ) ch->desc->pEdit;
In mud_progs.c:
  1168:	    for ( ch = ProgSource->in_room->people; ch; ch = ch->next_in_room )
  1176:	    for ( ch = ProgSource->in_room->people; ch; ch = ch->next_in_room )
  1191:	    for ( ch = ProgSource->in_room->people; ch; ch = ch->next_in_room )
  1199:	    for ( ch = ProgSource->in_room->people; ch; ch = ch->next_in_room )
  1214:	    for ( ch = ProgSource->in_room->people; ch; ch = ch->next_in_room )
  1222:	    for ( ch = ProgSource->in_room->people; ch; ch = ch->next_in_room )
  1236:	    for ( ch = ProgSource->in_room->people; ch; ch = ch->next_in_room )
  1238:	            if ( ch->fighting && ch->alignment < max_evil )
  1240:	                max_evil = ch->alignment;
  1450:	        if ( IS_NPC( ch ) && ch->pIndexData == mob->pIndexData )
  1512:	        if ( IS_NPC( ch ) && ch->pIndexData == mob->pIndexData )
  1558:	        if ( IS_NPC( ch ) && ch->pIndexData == mob->pIndexData )
  1589:	    for ( vmob = ch->in_room->people; vmob; vmob = vmob->next_in_room )
  1619:	        if ( IS_NPC( ch ) && ch->pIndexData == mob->pIndexData )
  1710:	    for ( vmob = ch->in_room->people; vmob; vmob = vmob->next_in_room )
  1732:	    for ( obj = ch->carrying; obj; obj = obj->next_content )
  1757:	    for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
  1782:	    room = ch->in_room;
  1820:	    if ( IS_NPC( ch ) && ch->pIndexData == supermob->pIndexData )
  1823:	    if ( ch->in_room && ch->in_room->progtypes & ACT_PROG )
  1825:	        ProgRoomSource = ch->in_room;
  1836:	    if ( ch->in_room && ch->in_room->progtypes & LEAVE_PROG )
  1838:	        set_supermob( ch->in_room, ROOM_PROG );
  1850:	    if ( ch->in_room && ch->in_room->progtypes & ENTER_PROG )
  1852:	        set_supermob( ch->in_room, ROOM_PROG );
  1865:	    if ( ch->in_room && ch->in_room->progtypes & SLEEP_PROG )
  1867:	        set_supermob( ch->in_room, ROOM_PROG );
  1880:	    if ( ch->in_room && ch->in_room->progtypes & REST_PROG )
  1882:	        set_supermob( ch->in_room, ROOM_PROG );
  1895:	    if ( ch->in_room && ch->in_room->progtypes & RFIGHT_PROG )
  1897:	        set_supermob( ch->in_room, ROOM_PROG );
  1910:	    if ( ch->in_room && ch->in_room->progtypes & RDEATH_PROG )
  1912:	        set_supermob( ch->in_room, ROOM_PROG );
  1926:	    if ( IS_NPC( ch ) && ch->pIndexData == supermob->pIndexData )
  1929:	    if ( ch->in_room && ch->in_room->progtypes & SPEECH_PROG )
  1931:	        ProgRoomSource = ch->in_room;
  1943:	    if ( ch->in_room && ch->in_room->progtypes & RAND_PROG )
  1945:	        set_supermob( ch->in_room, ROOM_PROG );
  1969:	    for ( vobj = ch->in_room->contents; vobj; vobj = vobj->next_content )
  1990:	    for ( vobj = ch->in_room->contents; vobj; vobj = vobj->next_content )
  2229:	    for ( vobj = ch->in_room->contents; vobj; vobj = vobj->next_content )
In string.c:
  222:	    ch->desc->color_edit = color;
  237:	    ch->desc->pString = pString;
  249:	    ch->desc->color_edit = color;
  263:	    ch->desc->pString = pString;
  306:	    ch->desc->color_edit = color; // JR
  309:	        ch->desc->pString = NULL;
  327:	            **ch->desc->pString = '\0';
  334:	            show_line_numbers( ch, *ch->desc->pString, color );
  348:	            *ch->desc->pString =
  349:	                string_replace( *ch->desc->pString, arg2, arg3 );
  357:	            if ( !( *ch->desc->pString ) || !( *ch->desc->pString[0] ) )
  375:	            *ch->desc->pString =
  376:	                line_replace( *ch->desc->pString, atoi( arg2 ), arg3 );
  382:	            if ( !( *ch->desc->pString ) || !( *ch->desc->pString[0] ) )
  400:	            *ch->desc->pString =
  401:	                line_add( *ch->desc->pString, atoi( arg2 ), arg3 );
  409:	            if ( !( *ch->desc->pString ) || !( *ch->desc->pString[0] ) )
  417:	                line = count_lines( *ch->desc->pString );
  428:	            *ch->desc->pString = line_delete( *ch->desc->pString, line );
  434:	            *ch->desc->pString = format_string( *ch->desc->pString );
  462:	        ch->desc->pString = NULL;
  466:	    strcpy( buf, *ch->desc->pString );
  477:	        ch->desc->pString = NULL;
  489:	    free_string( ch->desc->pString );
  490:	    *ch->desc->pString = str_dup( buf );
In olc_save.c:
  1259:	            if ( ( ch->Class != 4 ) && ( !IS_BUILDER( ch, pArea ) ) )
  1266:	                if ( ch->Class != 4 )
  1273:	        if ( ( !changed ) && ( ch->Class != 4 ) )
  1292:	        if ( ch->desc->editor == 0 )
  1300:	        switch ( ch->desc->editor )
  1303:	            pArea = ( AREA_DATA * ) ch->desc->pEdit;
  1306:	            pArea = ch->in_room->area;
  1309:	            pArea = ( ( OBJ_INDEX_DATA * ) ch->desc->pEdit )->area;
  1312:	            pArea = ( ( MOB_INDEX_DATA * ) ch->desc->pEdit )->area;
  1315:	            pArea = ch->in_room->area;
In helpolc.c:
  109:	            ch->desc->pEdit = ( void * ) pHelp;
  110:	            ch->desc->editor = ED_HELPOLC;
  111:	            SET_BIT( ch->act, PLR_BUILDING );
  119:	            ch->desc->editor = ED_HELPOLC;
  120:	            SET_BIT( ch->act, PLR_BUILDING );
  145:	    pHelp = ( HELP_DATA * ) ch->desc->pEdit;
  199:	    pHelp = ( HELP_DATA * ) ch->desc->pEdit;
  239:	    ch->desc->pEdit = ( void * ) pHelp;
  248:	    pHelp = ( HELP_DATA * ) ch->desc->pEdit;
  288:	    pHelp = ( HELP_DATA * ) ch->desc->pEdit;
  313:	    pHelp = ( HELP_DATA * ) ch->desc->pEdit;
In skills.c:
  34:	    if ( ( victim = ch->fighting ) == NULL )
  91:	    chance += ch->level - victim->level;
  95:	/*    SET_BIT(ch->affected_by,AFF_WEAK_STUN);*/
  126:	    if ( ( victim = ch->fighting ) == NULL )
  183:	/*    chance += (ch->level - victim->level) * 2; */
  184:	    chance += ch->level - victim->level;
  188:	/*    SET_BIT(ch->affected_by,AFF_WEAK_STUN);*/
  235:	    for ( trainer = ch->in_room->people;
  268:	            if ( !ch->pcdata->group_known[gn]
  269:	                 && group_table[gn].rating[ch->Class] > 0 )
  273:	                dgld_group[dgld_group_count].cost  = group_table[gn].rating[ch->Class];
  312:	            if ( !ch->pcdata->learned[sn]
  313:	                 && skill_table[sn].rating[ch->Class] > 0
  317:	                dgld_skill[dgld_skill_count].cost  = skill_table[sn].rating[ch->Class];
  318:	                dgld_skill[dgld_skill_count].level = skill_table[sn].skill_level[ch->Class];
  363:	        if ( ch->practice < 7 )
  372:	        ch->practice -= 7;
  373:	        ch->train += 1;
  381:	        if ( ch->train < 1 )
  390:	        ch->train -= 1;
  391:	        ch->practice += 5;
  398:	        if ( ch->train < 2 )
  405:	        if ( ch->pcdata->points <= CP_TRAIN_MIN )
  415:	        ch->train -= 2;
  416:	        ch->pcdata->points -= 1;
  417:	        ch->exp = 0;
  426:	        if ( ch->pcdata->group_known[gn] )
  433:	        if ( group_table[gn].rating[ch->Class] <= 0 )
  440:	        if ( ch->train < group_table[gn].rating[ch->Class] )
  451:	        ch->train -= group_table[gn].rating[ch->Class];
  465:	        if ( ch->pcdata->learned[sn] )
  472:	        if ( skill_table[sn].rating[ch->Class] <= 0 )
  479:	        if ( ch->train < skill_table[sn].rating[ch->Class] )
  487:	        ch->pcdata->learned[sn] = 1;
  490:	        ch->train -= skill_table[sn].rating[ch->Class];
  541:	    oldclass = ch->Class;
  557:	        if ( skill_table[sn].skill_level[ch->Class] < LEVEL_HERO &&
  559:	             ch->pcdata->learned[sn] > 0 )
  562:	            lev = skill_table[sn].skill_level[ch->Class];
  565:	                         skill_table[sn].rating[ch->Class] );
  584:	        ch->Class = oldclass;
  592:	    ch->Class = oldclass;
  608:	    top_level = ch->level < LEVEL_HERO ? LEVEL_HERO : ch->level;
  620:	        if ( skill_table[sn].skill_level[ch->Class] < top_level &&
  622:	             ch->pcdata->learned[sn] > 0 )
  625:	            lev = skill_table[sn].skill_level[ch->Class];
  626:	            if ( ch->level < lev )
  631:	                             100 / ( 2 + ch->level - lev ) );
  722:	            dsd_racial[dsd_racial_count].learned = ch->pcdata->learned[sn];
  726:	        else if ( ch->level >= skill_table[sn].skill_level[ch->Class] && ch->pcdata->learned[sn] > 0 )
  729:	            dsd_learned[dsd_learned_count].level   = skill_table[sn].skill_level[ch->Class];
  730:	            dsd_learned[dsd_learned_count].learned = ch->pcdata->learned[sn];
  734:	        else if ( ch->pcdata->learned[sn] > 0 )
  737:	            dsd_unlearned[dsd_unlearned_count].level   = skill_table[sn].skill_level[ch->Class];
  738:	            dsd_unlearned[dsd_unlearned_count].learned = ch->pcdata->learned[sn];
  864:	    oldclass = ch->Class;
  880:	        if ( skill_table[sn].skill_level[ch->Class] < LEVEL_HERO &&
  884:	            lev = skill_table[sn].skill_level[ch->Class];
  886:	                     skill_table[sn].rating[ch->Class] );
  904:	        ch->Class = oldclass;
  912:	    ch->Class = oldclass;
  920:	    int race_points = pc_race_table[ch->race].points;
  935:	        if ( !ch->gen_data->group_chosen[gn]
  936:	             && !ch->pcdata->group_known[gn]
  937:	             && group_table[gn].rating[ch->Class] > 0 )
  939:	            sprintf( buf, "%-2d %-18s ", group_table[gn].rating[ch->Class],
  960:	        if ( !ch->gen_data->skill_chosen[sn]
  961:	             && ch->pcdata->learned[sn] == 0
  963:	             && skill_table[sn].rating[ch->Class] > 0 
  964:	             && skill_table[sn].skill_level[ch->Class] < LEVEL_HERO )
  967:	            sprintf( buf, "%-2d %-2d %-18s ", skill_table[sn].rating[ch->Class],
  968:	                    skill_table[sn].skill_level[ch->Class], skill_table[sn].name );
  979:	    //if ( ch->pcdata->points < CP_MIN_CREATE ) /* Modified by JR */
  980:	    //    sprintf( buf, "Creation points: %d (Minimum required: %d)\n\r", ch->pcdata->points, CP_MIN_CREATE );
  982:	    //    sprintf( buf, "Creation points: %d\n\r", ch->pcdata->points );
  984:	        ch->pcdata->points - race_points, CP_CAP); // JR JR
  988:	    //         figure_difference( ch->gen_data->points_chosen ) );
  990:	    sprintf( buf, "Training sessions: %d\n\r\n\r", (CP_MAX - ch->pcdata->points)/2 + STARTING_TRAINS ); // JR
  998:	    int race_points = pc_race_table[ch->race].points;
  1014:	        if ( ch->gen_data->group_chosen[gn]
  1015:	             && group_table[gn].rating[ch->Class] > 0 )
  1018:	                     group_table[gn].rating[ch->Class] );
  1039:	        if ( ch->gen_data->skill_chosen[sn]
  1040:	             && skill_table[sn].rating[ch->Class] > 0 )
  1043:	                     skill_table[sn].rating[ch->Class] );
  1054:	            ch->pcdata->points - race_points, CP_CAP );
  1058:	    //         figure_difference( ch->gen_data->points_chosen ) );
  1060:	    sprintf( buf, "Training sessions: %d\n\r\n\r", (CP_MAX - ch->pcdata->points)/2 + STARTING_TRAINS ); // JR
  1072:	    switch ( ch->level )
  1149:	        expl = 5500000 + 1000000*(ch->level - 25);
  1187:	            expl = 35100000 + 1600000*(ch->level-50);
  1269:		return 1000 * pc_race_table[ch->race].class_mult[ch->Class]/100;
  1287:	    return (expl * pc_race_table[ch->race].class_mult[ch->Class]) / 100; /* Modified by JR to avoid integer division bug*/
  1296:	    int race_points = pc_race_table[ch->race].points;
  1326:	            if ( ch->gen_data->group_chosen[gn] || ch->pcdata->group_known[gn] )
  1332:	            if ( group_table[gn].rating[ch->Class] < 1 )
  1343:	                if ( ch->pcdata->
  1360:	                if ( ch->gen_data->
  1372:	            if ( ch->pcdata->points + group_table[gn].rating[ch->Class] - race_points <= CP_CAP )
  1376:	                ch->gen_data->group_chosen[gn] = TRUE;
  1377:	                ch->gen_data->points_chosen += group_table[gn].rating[ch->Class];
  1379:	                ch->pcdata->points += group_table[gn].rating[ch->Class];
  1393:	            if ( ch->gen_data->skill_chosen[sn] || ch->pcdata->learned[sn] > 0 )
  1399:	            if ( skill_table[sn].rating[ch->Class] < 1
  1405:	            if ( ch->pcdata->points + skill_table[sn].rating[ch->Class]  - race_points <= CP_CAP )
  1409:	                ch->gen_data->skill_chosen[sn] = TRUE;
  1410:	                ch->gen_data->points_chosen += skill_table[sn].rating[ch->Class];
  1411:	                ch->pcdata->learned[sn] = 1;
  1412:	                ch->pcdata->points += skill_table[sn].rating[ch->Class];
  1437:	        if ( gn != -1 && ch->gen_data->group_chosen[gn] )
  1440:	            ch->gen_data->group_chosen[gn] = FALSE;
  1441:	            ch->gen_data->points_chosen -= group_table[gn].rating[ch->Class];
  1445:	                if ( ch->gen_data->group_chosen[gn] )
  1448:	            ch->pcdata->points -= group_table[gn].rating[ch->Class];
  1453:	        if ( sn != -1 && ch->gen_data->skill_chosen[sn] )
  1456:	            ch->gen_data->skill_chosen[sn] = FALSE;
  1457:	            ch->gen_data->points_chosen -= skill_table[sn].rating[ch->Class];
  1458:	            ch->pcdata->learned[sn] = 0;
  1459:	            ch->pcdata->points -= skill_table[sn].rating[ch->Class];
  1512:	            if ( ch->pcdata->group_known[gn] )
  1522:	        sprintf( buf, "Creation points: %d\n\r", ch->pcdata->points );
  1575:	    if ( ch->level < skill_table[sn].skill_level[ch->Class]
  1576:	         || skill_table[sn].rating[ch->Class] == 0
  1577:	         || ch->pcdata->learned[sn] == 0 || ch->pcdata->learned[sn] == 100 )
  1582:	    chance /= ( multiplier * skill_table[sn].rating[ch->Class] * 4 );
  1583:	    chance += ch->level;
  1590:	    printf_to_char( ch, "checking on %s's skills", ch->name );
  1594:	        chance = URANGE( 5, 100 - ch->pcdata->learned[sn], 95 );
  1600:	            ch->pcdata->learned[sn]++;
  1601:	            gain_exp( ch, 2 * skill_table[sn].rating[ch->Class] );
  1607:	        chance = URANGE( 5, ch->pcdata->learned[sn] / 2, 30 );
  1614:	            ch->pcdata->learned[sn] += number_range( 1, 3 );
  1615:	            ch->pcdata->learned[sn] = UMIN( ch->pcdata->learned[sn], 100 );
  1616:	            gain_exp( ch, 2 * skill_table[sn].rating[ch->Class] );
  1643:	    ch->pcdata->group_known[gn] = TRUE;
  1657:	    ch->pcdata->group_known[gn] = FALSE;
  1679:	        if ( ch->pcdata->learned[sn] == 0 ) /* i.e. not known */
  1681:	            ch->pcdata->learned[sn] = 1;
  1683:	                ch->pcdata->points += skill_table[sn].rating[ch->Class];
  1694:	        if ( ch->pcdata->group_known[gn] == FALSE )
  1696:	            ch->pcdata->group_known[gn] = TRUE;
  1698:	                ch->pcdata->points += group_table[gn].rating[ch->Class];
  1714:	        ch->pcdata->learned[sn] = 0;
  1722:	    if ( gn != -1 && ch->pcdata->group_known[gn] == TRUE )
  1724:	        ch->pcdata->group_known[gn] = FALSE;
In olc.c:
  91:	    switch ( ch->desc->editor )
  174:	    switch ( ch->desc->editor )
  421:	    REMOVE_BIT( ch->act, PLR_BUILDING );
  422:	    ch->desc->pEdit = NULL;
  423:	    ch->desc->editor = 0;
  707:	    if ( !IS_SET( ch->act, PLR_CAN_PROG ) )
  772:	    if ( !IS_SET( ch->act, PLR_CAN_PROG ) )
  848:	        ch->desc->pEdit = ( void * ) pMudProg;
  849:	        ch->desc->editor = ED_MPROG;
  850:	        SET_BIT( ch->act, PLR_BUILDING );
  860:	                ch->desc->editor = ED_MPROG;
  909:	        ch->desc->pEdit = ( void * ) pGroup;
  910:	        ch->desc->editor = ED_MPGROUP;
  911:	        SET_BIT( ch->act, PLR_BUILDING );
  921:	                ch->desc->editor = ED_MPGROUP;
  957:	    if ( !IS_SET( ch->act, PLR_CAN_EDIT ) )
  964:	/*     if ( ch->pcdata &&
  965:	       ( ch->in_room->vnum < ch->pcdata->vnum_range[0]
  966:	       || ch->in_room->vnum > ch->pcdata->vnum_range[1] ) )
  1006:	    pArea = ch->in_room->area;
  1029:	    SET_BIT( ch->act, PLR_BUILDING );
  1032:	    ch->desc->pEdit = ( void * ) pArea;
  1033:	    ch->desc->editor = ED_AREA;
  1045:	    pRoom = ch->in_room;
  1064:	            char_to_room( ch, ch->desc->pEdit );
  1069:	    ch->desc->editor = ED_ROOM;
  1070:	    SET_BIT( ch->act, PLR_BUILDING );
  1095:	        ch->desc->pEdit = ( void * ) pObj;
  1096:	        ch->desc->editor = ED_OBJECT;
  1097:	        SET_BIT( ch->act, PLR_BUILDING );
  1118:	                ch->desc->editor = ED_OBJECT;
  1119:	                SET_BIT( ch->act, PLR_BUILDING );
  1151:	        ch->desc->pEdit = ( void * ) pMob;
  1152:	        ch->desc->editor = ED_MOBILE;
  1153:	        SET_BIT( ch->act, PLR_BUILDING );
  1174:	                ch->desc->editor = ED_MOBILE;
  1175:	                SET_BIT( ch->act, PLR_BUILDING );
  1442:	/*    if ( ch->pcdata &&
  1443:	       ( ch->in_room->vnum < ch->pcdata->vnum_range[0]
  1444:	       || ch->in_room->vnum > ch->pcdata->vnum_range[1] ) )
  1462:	        if ( ch->in_room->reset_first )
  1472:	    if ( !IS_BUILDER( ch, ch->in_room->area ) )
  1485:	        ROOM_INDEX_DATA *pRoom = ch->in_room;
  1495:	            if ( !ch->in_room->reset_first )
  1507:	                SET_BIT( ch->in_room->area->area_flags, AREA_CHANGED );
  1540:	            SET_BIT( ch->in_room->area->area_flags, AREA_CHANGED );
  1586:	                pReset->arg3 = ch->in_room->vnum;
  1616:	                    pReset->arg3 = ch->in_room->vnum;
  1638:	            SET_BIT( ch->in_room->area->area_flags, AREA_CHANGED );
  1640:	            add_reset( ch->in_room, pReset, atoi( arg ) );
In interp.c:
  508:	        if ( ch->desc != NULL )
  510:	            ch = ch->desc->original;
  519:	    for ( tmp = ch->pcdata->immcmdlist; tmp != NULL; tmp = tmp->next )
  543:	    ch->newline = FALSE; // Don't need newline after command
  557:	    REMOVE_BIT( ch->affected_by, AFF_HIDE );
  562:	    if ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_FREEZE ) )
  618:	    if ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_AFK ) )
  625:	                     ch->pcdata->messages,
  626:	                     ( ( ch->pcdata->messages > 1 )
  627:	                       || ( ch->pcdata->messages < 1 ) ) ? "s" : "" );
  635:	    if ( ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_LOG ) )
  638:	        sprintf( log_buf, "Log %s: %s", ch->name, logline );
  642:	    if ( ch->desc && ch->desc->snoop_by )
  644:	        write_to_buffer( ch->desc->snoop_by, "% ", 2 );
  645:	        write_to_buffer( ch->desc->snoop_by, logline, 0 );
  646:	        write_to_buffer( ch->desc->snoop_by, "\n\r", 2 );
  671:	    if ( ch->position < cmd->position )
  673:	        switch ( ch->position )
  737:	    if ( !IS_NPC( ch ) && IS_SET( ch->comm, COMM_NOEMOTE ) )
  743:	    switch ( ch->position )
  1008:	    if ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_FREEZE ) )
  1069:	        if ( ch->position < cmd_table[cmd].position )
  1089:	            if ( !IS_NPC( ch ) && IS_SET( ch->comm, COMM_NOEMOTE ) )
  1093:	                switch ( ch->position )
  1189:	    if ( !IS_NPC( ch ) && ch->pcdata->immcmdlist == NULL )
  1260:	    if ( ch->position < cmd_table[cmd].position )
  1376:	        p->disabled_by = str_dup( ch->name );   /* save name of disabler */
In act_info.c:
  127:	    if ( ch->desc == NULL )
  161:	            if ( IS_NPC( ch ) || IS_SET( ch->comm, COMM_COMBINE ) )
  195:	        if ( IS_NPC( ch ) || IS_SET( ch->comm, COMM_COMBINE ) )
  214:	        if ( IS_NPC( ch ) || IS_SET( ch->comm, COMM_COMBINE ) )
  296:	    if ( !IS_NPC( victim ) && !IS_SET( ch->comm, COMM_BRIEF )
  297:	         && victim->position == POS_STANDING && ch->on == NULL )
  553:	         && number_percent(  ) < ch->pcdata->learned[gsn_peek] )
  567:	    for ( rch = list; rch != NULL; rch = rch->next_in_room )
  573:	             && IS_SET( rch->act, PLR_WIZINVIS )
  574:	             && get_trust( ch ) < rch->invis_level )
  581:	        else if ( room_is_dark( ch->in_room )
  595:	    if ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_HOLYLIGHT ) )
  619:	        if ( ch->lines == 0 )
  624:	                     ch->lines + 2 );
  641:	        ch->lines = 0;
  653:	    ch->lines = lines - 2;
  704:	    if ( IS_SET( ch->act, PLR_AUTOASSIST ) )
  710:	    if ( IS_SET( ch->act, PLR_AUTOEXIT ) )
  716:	    if ( IS_SET( ch->act, PLR_AUTOGOLD ) )
  722:	    if ( IS_SET( ch->act, PLR_AUTOLOOT ) )
  728:	    if ( IS_SET( ch->act, PLR_AUTOSAC ) )
  734:	    if ( IS_SET( ch->act, PLR_AUTOSPLIT ) )
  740:	    if( IS_SET( ch->act, PLR_AUTOTRACK ) )
  746:	    if ( IS_SET( ch->comm, COMM_PROMPT ) )
  752:	    if ( IS_SET( ch->comm, COMM_COMBINE ) )
  757:	    if ( !IS_SET( ch->act, PLR_CANLOOT ) )
  762:	    if ( IS_SET( ch->act, PLR_NOSUMMON ) )
  769:	    if ( IS_SET( ch->act, PLR_NOFOLLOW ) )
  774:	    if ( IS_SET( ch->act, PLR_COLOR ) )
  780:	    if ( ch->desc->tintin )
  792:	    if ( IS_SET( ch->act, PLR_AUTOASSIST ) )
  795:	        REMOVE_BIT( ch->act, PLR_AUTOASSIST );
  800:	        SET_BIT( ch->act, PLR_AUTOASSIST );
  809:	    if ( IS_SET( ch->act, PLR_AUTOEXIT ) )
  812:	        REMOVE_BIT( ch->act, PLR_AUTOEXIT );
  817:	        SET_BIT( ch->act, PLR_AUTOEXIT );
  826:	    if ( IS_SET( ch->act, PLR_AUTOGOLD ) )
  829:	        REMOVE_BIT( ch->act, PLR_AUTOGOLD );
  834:	        SET_BIT( ch->act, PLR_AUTOGOLD );
  843:	    if ( IS_SET( ch->act, PLR_AUTOLOOT ) )
  846:	        REMOVE_BIT( ch->act, PLR_AUTOLOOT );
  851:	        SET_BIT( ch->act, PLR_AUTOLOOT );
  860:	    if ( IS_SET( ch->act, PLR_AUTOSAC ) )
  863:	        REMOVE_BIT( ch->act, PLR_AUTOSAC );
  868:	        SET_BIT( ch->act, PLR_AUTOSAC );
  877:	    if ( IS_SET( ch->act, PLR_AUTOSPLIT ) )
  880:	        REMOVE_BIT( ch->act, PLR_AUTOSPLIT );
  885:	        SET_BIT( ch->act, PLR_AUTOSPLIT );
  894:	    if ( IS_SET( ch->act, PLR_AUTOTRACK ) )
  897:	        REMOVE_BIT( ch->act, PLR_AUTOTRACK );
  902:	        SET_BIT( ch->act, PLR_AUTOTRACK );
  908:	    if ( IS_SET( ch->comm, COMM_BRIEF ) )
  911:	        REMOVE_BIT( ch->comm, COMM_BRIEF );
  916:	        SET_BIT( ch->comm, COMM_BRIEF );
  922:	    if ( IS_SET( ch->comm, COMM_COMPACT ) )
  925:	        REMOVE_BIT( ch->comm, COMM_COMPACT );
  930:	        SET_BIT( ch->comm, COMM_COMPACT );
  957:	        if ( ch->desc->tintin )
  974:	        free_string( &ch->pcdata->prompt );
  975:	        ch->pcdata->prompt = prompt;
  988:	    if ( IS_SET( ch->comm, COMM_COMBINE ) )
  991:	        REMOVE_BIT( ch->comm, COMM_COMBINE );
  996:	        SET_BIT( ch->comm, COMM_COMBINE );
  1005:	    if ( IS_SET( ch->act, PLR_CANLOOT ) )
  1008:	        REMOVE_BIT( ch->act, PLR_CANLOOT );
  1013:	        SET_BIT( ch->act, PLR_CANLOOT );
  1022:	    if ( IS_SET( ch->act, PLR_NOFOLLOW ) )
  1025:	        REMOVE_BIT( ch->act, PLR_NOFOLLOW );
  1030:	        SET_BIT( ch->act, PLR_NOFOLLOW );
  1040:	        if ( IS_SET( ch->imm_flags, IMM_SUMMON ) )
  1043:	            REMOVE_BIT( ch->imm_flags, IMM_SUMMON );
  1048:	            SET_BIT( ch->imm_flags, IMM_SUMMON );
  1053:	        if ( IS_SET( ch->act, PLR_NOSUMMON ) )
  1056:	            REMOVE_BIT( ch->act, PLR_NOSUMMON );
  1063:	            SET_BIT( ch->act, PLR_NOSUMMON );
  1070:	    if ( IS_SET( ch->act, PLR_COLOR ) )
  1073:	        REMOVE_BIT( ch->act, PLR_COLOR );
  1078:	        SET_BIT( ch->act, PLR_COLOR );
  1089:	    if ( IS_SET( ch->act, PLR_AFK ) )
  1092:	        REMOVE_BIT( ch->act, PLR_AFK );
  1093:	        if ( ch->pcdata->message != NULL )
  1097:	                     ch->pcdata->messages,
  1098:	                     ( ch->pcdata->messages > 1 ) ? "s" : "" );
  1102:	        sprintf( buf2, "%s is no-longer AFK.", ch->name );
  1103:	        if ( !IS_SET( ch->act, PLR_WIZINVIS ) )
  1110:	        SET_BIT( ch->act, PLR_AFK );
  1113:	        sprintf( buf2, "%s has gone AFK.", ch->name );
  1114:	        if ( !IS_SET( ch->act, PLR_WIZINVIS ) )
  1124:	    if ( ch->anonymous == TRUE )
  1128:	        ch->anonymous = FALSE;
  1135:	        ch->anonymous = TRUE;
  1147:	    if ( ch->pcdata->confirm_pk )
  1152:	            ch->pcdata->confirm_pk = FALSE;
  1157:	            if ( IS_SET( ch->act, PLR_KILLER ) )
  1159:	            SET_BIT( ch->act, PLR_KILLER );
  1164:	            sprintf( buf2, "%s has become a player killer!", ch->name );
  1175:	    if ( ch->pcdata->clan != 0 )
  1177:	        clan = get_clan( ch->pcdata->clan );
  1192:	    ch->pcdata->confirm_pk = TRUE;
  1249:	    ROOM_INDEX_DATA *cur_room = ch->in_room;
  1272:	    if ( room_is_dark( ch->in_room ) )
  1279:	    for ( mob_in_room = ch->in_room->people; mob_in_room != NULL;
  1314:	    switch ( ch->position )
  1341:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1343:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] == 0 )
  1345:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] == 0 )
  1347:	    else if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] < HUNGER_THRESH )
  1350:	    if ( ch->affected != NULL )
  1353:	        for ( paf = ch->affected; paf != NULL; paf = paf->next )
  1358:	            if ( ch->level >= 20 )
  1369:	    if ( ch->newaffected != NULL )
  1371:	        for ( npaf = ch->newaffected; npaf != NULL; npaf = npaf->next )
  1376:	            if ( ch->level >= 20 )
  1398:	        orig_level = ch->level;
  1399:	        if ( ch->level < 4 )
  1400:	            switch ( ch->level )
  1406:	                ch->level = 1;
  1410:	            ch->level -= 3;
  1411:	        for ( x = ch->level; x < orig_level + 5; x++ )
  1415:	                         ch->level, exp_per_level( ch, ch->pcdata->points ) );
  1417:	                sprintf( buf, "Level %d: %ld\n\r", ch->level,
  1418:	                         exp_per_level( ch, ch->pcdata->points ) );
  1419:	            ch->level++;
  1422:	        ch->level = orig_level;
  1433:	    if ( ch->desc->tintin )
  1438:	    if ( ch->pcdata->tick == 1 )
  1440:	        ch->pcdata->tick = 0;
  1445:	        ch->pcdata->tick = 1;
  1455:	    if ( ch->desc->tintin )
  1458:	        //ch->desc->tintin = 0;
  1463:	        //ch->desc->tintin = 1;
  1484:	    if ( ch->desc == NULL )
  1487:	    if ( ch->position < POS_SLEEPING )
  1493:	    if ( ch->position == POS_SLEEPING )
  1503:	         && !IS_SET( ch->act, PLR_HOLYLIGHT ) && room_is_dark( ch->in_room ) )
  1506:	        show_char_to_char( ch->in_room->people, ch );
  1519:	        send_to_char( ch->in_room->name, ch );
  1523:	             || ( !IS_NPC( ch ) && !IS_SET( ch->comm, COMM_BRIEF ) ) )
  1526:	            send_to_char( ch->in_room->description, ch );
  1529:	        if ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_AUTOEXIT ) )
  1531:	            if ( !IS_SET( ch->comm, COMM_COMPACT ) )
  1539:	        show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE );
  1540:	        show_char_to_char( ch->in_room->people, ch );
  1591:	            original = ch->in_room;
  1622:	    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
  1660:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
  1701:	    pdesc = get_extra_descr( arg, ch->in_room->extra_descr );
  1727:	    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
  1828:	        if ( ( pexit = ch->in_room->exit[door] ) != NULL
  1883:	        sprintf( buf, "You have %ld gold.\n\r", ch->gold );
  1890:	             ch->gold, ch->pcdata->gold_bank, ch->exp,
  1891:	             ( exp_per_level( ch, ch->pcdata->points ) - ch->exp ) );
  1926:	        sprintf( buf, "     |   `W%s%s", ch->name, ch->pcdata->title );
  1935:	                 ch->perm_stat[STAT_STR], statdiff( ch->perm_stat[STAT_STR],
  1938:	                 race_table[ch->race].name );
  1943:	                 ch->perm_stat[STAT_INT], statdiff( ch->perm_stat[STAT_INT],
  1946:	                 class_table[ch->Class].name );
  1951:	                ch->perm_stat[STAT_WIS],
  1952:	                statdiff( ch->perm_stat[STAT_WIS],get_curr_stat( ch, STAT_WIS ) ),
  1953:	                 ch->level );
  1958:	                 ch->perm_stat[STAT_DEX], statdiff( ch->perm_stat[STAT_DEX],
  1961:	                 ch->alignment );
  1962:	        if ( ch->alignment > 900 )
  1964:	        else if ( ch->alignment > 700 )
  1966:	        else if ( ch->alignment > 350 )
  1968:	        else if ( ch->alignment > 100 )
  1970:	        else if ( ch->alignment > -100 )
  1972:	        else if ( ch->alignment > -350 )
  1974:	        else if ( ch->alignment > -700 )
  1976:	        else if ( ch->alignment > -900 )
  1984:	            ch->perm_stat[STAT_CON],
  1985:	            statdiff( ch->perm_stat[STAT_CON], get_curr_stat( ch, STAT_CON ) ),
  1986:	            Gender( ch->sex ) );
  1989:	                    ch->pcdata->points, ch->pcdata->points >= 100 ? "" : " " );
  1997:	        sprintf( buf + strlen(buf), "`G%d`y/`G%d", ch->carry_number, can_carry_n( ch ) );
  2005:	        sprintf( buf + strlen(buf), "`G%d`y/`G%d", ch->carry_weight, can_carry_w( ch ) );
  2013:	        sprintf( buf + strlen(buf), "`G%ld", ch->gold );
  2028:	        sprintf( buf + strlen(buf), " `YCurrent XP       `G%ld", ch->exp );
  2033:	        sprintf( buf + strlen(buf), " `YXP to level      `G%ld", exp_per_level( ch, ch->pcdata->points ) - ch->exp);
  2036:	                 figure_difference( ch->pcdata->points ) );
  2043:	                 ch->hit, ch->max_hit );
  2049:	        sprintf( buf + strlen(buf), "`YMana: `G%5d `y/ `G%5d", ch->mana,
  2050:	                 ch->max_mana );
  2056:	        sprintf( buf + strlen(buf), "`YMove: `G%5d `y/ `G%5d", ch->move, ch->max_move );
  2066:	        if ( ch->pcdata->clan > 0 )
  2069:	            clan = get_clan( ch->pcdata->clan );
  2073:	                         clan->rank[ch->pcdata->clan_rank - 1], clan->name );
  2083:	                 ch->name,
  2084:	                 IS_NPC( ch ) ? "" : ch->pcdata->title,
  2085:	                 ch->level, get_age( ch ),
  2086:	                 ( ch->played + ( int ) ( current_time - ch->logon ) ) / 3600 );
  2089:	        if ( get_trust( ch ) != ch->level )
  2096:	                 race_table[ch->race].name,
  2097:	                 gender( ch->sex ),
  2098:	                 IS_NPC( ch ) ? "mobile" : class_table[ch->Class].name );
  2103:	                 ch->hit, ch->max_hit,
  2104:	                 ch->mana, ch->max_mana, ch->move, ch->max_move );
  2109:	                 ch->practice, ch->train );
  2114:	                 ch->carry_number, can_carry_n( ch ),
  2115:	                 ch->carry_weight, can_carry_w( ch ) );
  2120:	                 ch->perm_stat[STAT_STR],
  2122:	                 ch->perm_stat[STAT_INT],
  2124:	                 ch->perm_stat[STAT_WIS],
  2126:	                 ch->perm_stat[STAT_DEX],
  2128:	                 ch->perm_stat[STAT_CON], get_curr_stat( ch, STAT_CON ) );
  2133:	                 ch->exp, ch->gold );
  2137:	        if ( !IS_NPC( ch ) && ch->level < LEVEL_HERO )
  2141:	                     ( ( ch->level + 1 ) * exp_per_level( ch,
  2142:	                                                          ch->pcdata->points ) -
  2143:	                       ch->exp ) );
  2147:	        sprintf( buf, "Wimpy set to %d hit points.\n\r", ch->wimpy );
  2150:	        if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  2152:	        if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] == 0 )
  2154:	        if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] == 0 )
  2157:	        switch ( ch->position )
  2186:	        if ( ch->level >= 25 )
  2252:	            if ( IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2257:	            if ( IS_SET( ch->act, PLR_WIZINVIS ) )
  2259:	                sprintf( buf, "  Invisible: level %d", ch->invis_level );
  2265:	        if ( ch->level >= 15 )
  2272:	        if ( ch->level >= 10 )
  2274:	            sprintf( buf, "Alignment: %d.  ", ch->alignment );
  2279:	        if ( ch->alignment > 900 )
  2281:	        else if ( ch->alignment > 700 )
  2283:	        else if ( ch->alignment > 350 )
  2285:	        else if ( ch->alignment > 100 )
  2287:	        else if ( ch->alignment > -100 )
  2289:	        else if ( ch->alignment > -350 )
  2291:	        else if ( ch->alignment > -700 )
  2293:	        else if ( ch->alignment > -900 )
  2298:	        if ( ch->affected != NULL )
  2301:	            for ( paf = ch->affected; paf != NULL; paf = paf->next )
  2306:	                if ( ch->level >= 20 )
  2316:	            for ( npaf = ch->newaffected; npaf != NULL; npaf = npaf->next )
  2321:	                if ( ch->level >= 20 )
  2568:	    clan = get_clan( ch->pcdata->clan );
  2571:	        bug( "NULL nonzero clan %d in who_clan.", ch->pcdata->clan );
  2592:	         && ch->pcdata->clan == looker->pcdata->clan )
  2599:	         ( ch->pcdata->clan_rank == 1 || ch->pcdata->clan_rank == 2
  2600:	           || !str_cmp( ch->name, clan->god ) )
  2601:	         && ch->pcdata->clan == looker->pcdata->clan )
  2619:	    clan = get_clan( ch->pcdata->clan );
  2622:	        bug( "NULL nonzero clan %d in who_clan.", ch->pcdata->clan );
  2674:	        if ( !str_prefix( arg, wch->name ) )
  2679:	            Class = class_table[wch->Class].who_name;
  2680:	            switch ( wch->level )
  2720:	            sprintf( buf, "`K[`W%2d `Y%s `G%s`K] %s%s%s%s%s%s%s`w%s%s%s\n\r", ( wch->level > MAX_LEVEL ? MAX_LEVEL : wch->level ), wch->pcdata != NULL && wch->pcdata->who_race ? wch->pcdata->who_race : wch->race < MAX_PC_RACE ? pc_race_table[wch->race].who_name : "          ", Class, IS_NPC( wch ) ? "" : ( wch->pcdata->clan == 0 ) ? "" : pre_clan( wch, ch, empty, private, secret ), IS_NPC( wch ) ? "" : ( wch->pcdata->clan == 0 ) ? "" : who_clan( wch, ch, empty ), "", /* <---- if you need to add something, remove this */
  2721:	                     IS_SET( wch->act, PLR_WIZINVIS ) ? "W" : "",
  2722:	                     IS_SET( wch->act, PLR_AFK ) ? "A" : "-",
  2723:	                     IS_SET( wch->act, PLR_KILLER ) ? "`RP`W" : "-",
  2724:	                     IS_SET( wch->act, PLR_THIEF ) ? "T" : "-",
  2725:	                     wch->pcdata != NULL &&
  2726:	                     wch->pcdata->who_prefix ?
  2727:	                     wch->pcdata->who_prefix : "",
  2729:	                     wch->short_descr :
  2730:	                     wch->name, IS_NPC( wch ) ? "" : wch->pcdata->title );
  2746:	    while ( ( length ) && who_list[length - 1]->level < ch->level )
  2758:	            ch->pcdata->chaos_score )
  3066:	                  && !( d->character->invis_level > ch->level ) )
  3085:	    show_list_to_char( ch->carrying, ch, TRUE, TRUE );
  3161:	        for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
  3247:	    if ( ( chaos ) && ( ch->level < HERO ) )
  3253:	    if ( arg[0] == '\0' && ( ch->level > HERO ) )
  3274:	    else if ( ch->level > HERO )
  3292:	    else if ( arg[0] == '\0' && ( ch->level <= HERO ) )
  3303:	                 && victim->in_room->area == ch->in_room->area
  3321:	                 && victim->in_room->area == ch->in_room->area
  3368:	    diff = ( victim->max_hit / ch->max_hit ) * 100;
  3387:	    diff = victim->level - ch->level;
  3431:	    free_string( &ch->pcdata->title );
  3432:	    ch->pcdata->title = str_dup( buf );
  3451:	    if ( str_len( argument ) + str_len( ch->name ) > 45 )
  3459:	    sprintf( buf, "Ok, you are now %s%s\n\r", ch->name, ch->pcdata->title );
  3472:	        free_string( &ch->pcdata->comment );
  3473:	        ch->pcdata->comment = str_dup( "(none)" );
  3486:	    free_string( &ch->pcdata->comment );
  3487:	    ch->pcdata->comment = str_dup( argument );
  3489:	             ch->pcdata->comment );
  3505:	        free_string( &ch->pcdata->email );
  3506:	        ch->pcdata->email = str_dup( "(none)" );
  3578:	    free_string( &ch->pcdata->email );
  3579:	    ch->pcdata->email = str_dup( argument );
  3580:	    sprintf( buf, "Ok, your email address is now: %s\n\r", ch->pcdata->email );
  3586:	    if ( ch->desc != NULL )     /* only if ch has a descriptor 'cause string_append will barf */
  3588:	        string_append( ch, &ch->description, COLOR_DESC );
  3601:	             ch->hit, ch->max_hit,
  3602:	             ch->mana, ch->max_mana, ch->move, ch->max_move, ch->exp );
  3607:	             ch->hit, ch->max_hit,
  3608:	             ch->mana, ch->max_mana, ch->move, ch->max_move, ch->exp );
  3633:	            if ( ch->level < skill_table[sn].skill_level[ch->Class]
  3634:	                 || ch->pcdata->learned[sn] < 1 /* skill is not known */  )
  3638:	                     skill_table[sn].name, ch->pcdata->learned[sn] );
  3647:	        sprintf( buf, "You have %d practice sessions left.\n\r", ch->practice );
  3661:	        for ( mob = ch->in_room->people; mob != NULL; mob = mob->next_in_room )
  3673:	        if ( ch->practice <= 0 )
  3687:	        cp = skill_table[sn].rating[ch->Class];
  3692:	        adept = IS_NPC( ch ) ? 100 : class_table[ch->Class].skill_adept;
  3694:	        if ( ch->pcdata->learned[sn] >= adept )
  3702:	            ch->practice--;
  3703:	            ch->pcdata->learned[sn] +=
  3705:	            if ( ch->pcdata->learned[sn] < adept )
  3714:	                ch->pcdata->learned[sn] = adept;
  3738:	        wimpy = ch->max_hit / 5;
  3748:	    if ( wimpy > ch->max_hit / 2 )
  3754:	    ch->wimpy = wimpy;
  3820:	    if ( strcmp( crypt( arg, ch->pcdata->pwd ), ch->pcdata->pwd ) )
  3837:	    pwdnew = crypt( arg2, ch->name );
  3847:	    free_string( &ch->pcdata->pwd );
  3848:	    ch->pcdata->pwd = str_dup( pwdnew );
  3871:	        if ( ( pexit = ch->in_room->exit[door] ) != NULL
  4110:	                 || ( ch->pcdata->clan == nclan
  4190:	    if ( ch->level < LEVEL_HERO && ch->exp >=
  4191:	         exp_per_level( ch, ch->pcdata->points ) )
  4193:	        sprintf( buf, "%s has made it to level %d!", ch->name, ch->level + 1 );
  4198:	        ch->level += 1;
  4217:	    if ( str_cmp( ch->desc->incomm, "rebirth yes" ) )
  4223:	    if ( ch->level < LEVEL_HERO )
  4230:	    if ( ch->level > LEVEL_HERO )
  4236:	    if ( ch->incarnations >= 4 )
  4253:	    for ( obj = ch->carrying; obj; obj = obj->next_content )
  4258:	    if ( !IS_SET( ch->act, PLR_REMORT ) )
  4259:	        SET_BIT( ch->act, PLR_REMORT );
  4260:	    ++ch->incarnations; // JR fixed ch->incarnations = ++ch->incarnations;
  4262:	    ch->pcdata->condition[COND_THIRST] = 0;
  4263:	    ch->pcdata->condition[COND_FULL] = 0;
  4264:	    ch->pcdata->condition[COND_DRUNK] = 0;
  4265:	    ch->saving_throw = 0;
  4268:	    ch->max_hit = 20 + ( 20 * ch->incarnations );
  4269:	    ch->max_mana = 100 + ( 50 * ch->incarnations );
  4270:	    ch->max_move = 100 + ( 50 * ch->incarnations );
  4271:	    ch->pcdata->perm_hit = ch->max_hit;
  4272:	    ch->pcdata->perm_mana = ch->max_mana;
  4273:	    ch->pcdata->perm_move = ch->max_move;
  4274:	    ch->level = 1;
  4275:	    ch->hitroll = 0;
  4276:	    ch->damroll = 0;
  4277:	    ch->exp = 0;
  4278:	    ch->train = 0;
  4279:	/*    ch->raisepts = 0; *//*  We don't have raise points */
  4282:	    ch->hit = ch->max_hit;
  4283:	    ch->mana = ch->max_mana;
  4284:	    ch->move = ch->max_move;
  4332:	    if ( IS_NPC( ch ) || ch->pcdata->alias[0] == NULL
  4344:	        if ( ch->pcdata->alias[alias] == NULL )
  4347:	        if ( !str_prefix( argument, ch->pcdata->alias[alias] ) )
  4350:	            if ( !strcmp( ch->pcdata->alias[alias], name ) )
  4353:			strcat(buf,ch->pcdata->alias_sub[alias]);
  4361:	                strcat( buf, ch->pcdata->alias_sub[alias] );
  4394:	    if ( ch->desc == NULL )
  4397:	        rch = ch->desc->original ? ch->desc->original : ch;
  4410:	        if ( rch->pcdata->alias[0] == NULL )
  4419:	            if ( rch->pcdata->alias[pos] == NULL
  4420:	                 || rch->pcdata->alias_sub[pos] == NULL )
  4423:	            sprintf( buf, "    %s:  %s\n\r", rch->pcdata->alias[pos],
  4424:	                     rch->pcdata->alias_sub[pos] );
  4440:	            if ( rch->pcdata->alias[pos] == NULL
  4441:	                 || rch->pcdata->alias_sub[pos] == NULL )
  4444:	            if ( !str_cmp( arg, rch->pcdata->alias[pos] ) )
  4447:	                         rch->pcdata->alias[pos], rch->pcdata->alias_sub[pos] );
  4465:	        if ( rch->pcdata->alias[pos] == NULL )
  4468:	        if ( !str_cmp( arg, rch->pcdata->alias[pos] ) ) /* redefine an alias */
  4470:	            free_string( &rch->pcdata->alias_sub[pos] );
  4471:	            rch->pcdata->alias_sub[pos] = str_dup( argument );
  4485:	    rch->pcdata->alias[pos] = str_dup( arg );
  4486:	    rch->pcdata->alias_sub[pos] = str_dup( argument );
  4498:	    if ( ch->desc == NULL )
  4501:	        rch = ch->desc->original ? ch->desc->original : ch;
  4516:	        if ( rch->pcdata->alias[pos] == NULL )
  4521:	            rch->pcdata->alias[pos - 1] = rch->pcdata->alias[pos];
  4522:	            rch->pcdata->alias_sub[pos - 1] = rch->pcdata->alias_sub[pos];
  4523:	            rch->pcdata->alias[pos] = NULL;
  4524:	            rch->pcdata->alias_sub[pos] = NULL;
  4528:	        if ( !strcmp( arg, rch->pcdata->alias[pos] ) )
  4531:	            free_string( &rch->pcdata->alias[pos] );
  4532:	            free_string( &rch->pcdata->alias_sub[pos] );
In act_obj.c:
  66:	    for ( wch = char_list; wch != NULL; wch = wch->next )
  67:	        if ( !str_cmp( wch->name, obj->owner ) )
  73:	    if ( !str_cmp( ch->name, owner->name ) )
  99:	        for ( gch = obj->in_room->people; gch != NULL; gch = gch->next_in_room )
  100:	            if ( gch->on == obj )
  106:	    if ( ch->carry_number + get_obj_number( obj ) > can_carry_n( ch ) )
  113:	    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
  151:	        ch->gold += obj->value[0];
  152:	        if ( IS_SET( ch->act, PLR_AUTOSPLIT ) )
  155:	            for ( gch = ch->in_room->people; gch != NULL;
  156:	                  gch = gch->next_in_room )
  209:	            obj = get_obj_list( ch, arg, ch->in_room->contents );
  222:	            for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
  430:	        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  485:	    if ( IS_SET( ch->act, PLR_JAILED ) && JAIL_CAN_DONATE == 0 )
  510:	        was_in_room = ch->in_room;
  511:	        ch->in_room = donation;
  515:	        ch->in_room = was_in_room;
  521:	        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  534:	                was_in_room = ch->in_room;
  535:	                ch->in_room = donation;
  539:	                ch->in_room = was_in_room;
  586:	        if ( ch->gold < amount )
  592:	        ch->gold -= amount;
  594:	        for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
  612:	        obj_to_room( create_money( amount ), ch->in_room );
  634:	        obj_to_room( obj, ch->in_room );
  645:	        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  655:	                obj_to_room( obj, ch->in_room );
  721:	        if ( ch->gold < amount )
  727:	        ch->gold -= amount;
  812:	    for ( fountain = ch->in_room->contents; fountain != NULL;
  991:	        for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
  1012:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1026:	            ch->pcdata->condition[COND_THIRST] = 48;
  1059:	        if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  1061:	        if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] > 40 )
  1063:	        if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] > 40 )
  1116:	             && ch->pcdata->condition[COND_FULL] > 40 )
  1134:	            condition = ch->pcdata->condition[COND_FULL];
  1136:	            if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
  1138:	            else if ( ch->pcdata->condition[COND_FULL] > 40 )
  1206:	    if ( ch->level < obj->level )
  1471:	        if ( ( ( weapon != NULL ) && ( ch->size < SIZE_LARGE )
  1510:	        if ( ( !IS_NPC( ch ) && ch->size < SIZE_LARGE
  1528:	        if ( ( weapon != NULL ) && ( ch->size < SIZE_LARGE )
  1626:	    if ( IS_SET( ch->act, PLR_JAILED ) && JAIL_CAN_WEAR == 0 )
  1636:	        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  1696:	        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  1734:	    if ( arg[0] == '\0' || !str_cmp( arg, ch->name ) )
  1743:	    obj = get_obj_list( ch, arg, ch->in_room->contents );
  1751:	        for ( gch = obj->in_room->people; gch != NULL; gch = gch->next_in_room )
  1752:	            if ( gch->on == obj )
  1763:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  1799:	    ch->gold += gold;
  1801:	    if ( IS_SET( ch->act, PLR_AUTOSPLIT ) )
  1804:	        for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  1840:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  1858:	    if ( ch->level < obj->level )
  1894:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  1906:	    if ( ch->level < scroll->level )
  1969:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  1991:	        if ( ch->level < staff->level
  2000:	            for ( vch = ch->in_room->people; vch; vch = vch_next )
  2002:	                vch_next = vch->next_in_room;
  2055:	    if ( arg[0] == '\0' && ch->fighting == NULL )
  2068:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  2083:	        if ( ch->fighting != NULL )
  2085:	            victim = ch->fighting;
  2108:	                 || !IS_SET( ch->act, PLR_KILLER ) )
  2138:	        if ( ch->level < wand->level
  2201:	        name = IS_NPC( ch ) ? ch->short_descr : ch->name;
  2210:	                     name, his_her( ch->sex ) );
  2224:	        if ( !IS_SET( ch->act, PLR_THIEF ) )
  2226:	            SET_BIT( ch->act, PLR_THIEF );
  2238:	        name = IS_NPC( ch ) ? ch->short_descr : ch->name;
  2247:	                     name, his_her( ch->sex ) );
  2260:	        if ( !IS_SET( ch->act, PLR_THIEF ) )
  2262:	            SET_BIT( ch->act, PLR_THIEF );
  2283:	    if ( ch->level + 5 < victim->level || victim->position == POS_FIGHTING
  2288:	              && percent < ( victim->level - ch->level ) * 20 ) /* JR changed direction of inequality */
  2289:	         || ( !IS_NPC( ch ) && percent > ch->pcdata->learned[gsn_steal] ) )
  2298:	        name = IS_NPC( ch ) ? ch->short_descr : ch->name;
  2307:	                     name, his_her( ch->sex ) );
  2335:	                if ( !IS_SET( ch->act, PLR_THIEF ) )
  2337:	                    SET_BIT( ch->act, PLR_THIEF );
  2359:	        ch->gold += amount;
  2375:	         || obj->level > ch->level )
  2381:	    if ( ch->carry_number + get_obj_number( obj ) > can_carry_n( ch ) )
  2387:	    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
  2410:	    for ( keeper = ch->in_room->people; keeper; keeper = keeper->next_in_room )
  2422:	    if ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_THIEF ) )
  2425:	        sprintf( buf, "%s the THIEF is over here!\n\r", ch->name );
  2524:	    if ( IS_SET( ch->in_room->room_flags, ROOM_PET_SHOP ) )
  2535:	        pRoomIndexNext = get_room_index( ch->in_room->vnum + 1 );
  2538:	            bug( "Do_buy: bad pet shop at vnum %d.", ch->in_room->vnum );
  2543:	        in_room = ch->in_room;
  2544:	        ch->in_room = pRoomIndexNext;
  2546:	        ch->in_room = in_room;
  2554:	        if ( ch->pet != NULL )
  2562:	        if ( ch->gold < cost )
  2568:	        if ( ch->level < pet->level )
  2577:	        if ( !IS_NPC( ch ) && roll < ch->pcdata->learned[gsn_haggle] )
  2586:	        if ( !IS_NPC( ch ) && ch->pcdata->learned[gsn_haggle] > 0
  2587:	             && roll > ch->pcdata->learned[gsn_haggle] )
  2593:	        ch->gold -= cost;
  2595:	        SET_BIT( ch->act, PLR_BOUGHT_PET );
  2609:	                 pet->description, ch->name );
  2613:	        char_to_room( pet, ch->in_room );
  2616:	        ch->pet = pet;
  2644:	        if ( ch->fighting )
  2688:	                ch->reply = keeper;
  2704:	            ch->reply = keeper;
  2716:	        if ( ch->gold < ( cost * item_count ) )
  2725:	                if ( ( ch->gold / cost ) > 0 )  /* how many CAN he afford? */
  2728:	                             ( ch->gold / cost ) );
  2735:	                ch->reply = keeper; /* like the character really would reply to the shopkeeper... */
  2739:	            ch->reply = keeper; /* like the character really would reply to the shopkeeper... */
  2745:	        if ( !IS_NPC( ch ) && roll < ch->pcdata->learned[gsn_haggle] )
  2753:	        if ( !IS_NPC( ch ) && ch->pcdata->learned[gsn_haggle] > 0
  2754:	             && roll > ch->pcdata->learned[gsn_haggle] )
  2763:	        if ( obj->level > ch->level )
  2767:	            ch->reply = keeper;
  2771:	        if ( ch->carry_number + ( get_obj_number( obj ) * item_count ) >
  2779:	        if ( ch->carry_weight + item_count * get_obj_weight( obj ) >
  2791:	            ch->reply = keeper;
  2810:	        ch->gold -= cost * item_count;
  2844:	    for ( mob = ch->in_room->people; mob; mob = mob->next_in_room )
  2973:	    if ( cost > ( ch->gold ) )
  2982:	    ch->gold -= cost;
  2988:	        ch->mana += dice( 2, 8 ) + mob->level / 3;
  2989:	        ch->mana = UMIN( ch->mana, ch->max_mana );
  3007:	    if ( IS_SET( ch->in_room->room_flags, ROOM_PET_SHOP ) )
  3013:	        pRoomIndexNext = get_room_index( ch->in_room->vnum + 1 );
  3017:	            bug( "Do_list: bad pet shop at vnum %d.", ch->in_room->vnum );
  3062:	        if ( ch->fighting )
  3143:	    if ( ch->fighting )
  3176:	        ch->reply = keeper;
  3216:	    if ( !IS_NPC( ch ) && roll < ch->pcdata->learned[gsn_haggle] )
  3224:	    if ( !IS_NPC( ch ) && ch->pcdata->learned[gsn_haggle] > 0
  3225:	         && roll > ch->pcdata->learned[gsn_haggle] )
  3236:	    ch->gold += cost;
  3278:	    if ( ch->fighting )
  3311:	        ch->reply = keeper;
  3336:	    ch->reply = keeper;
  3358:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  3406:	        ch->gold += gold;
  3415:	        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  3456:	                ch->gold += gold;
  3489:	         && ch->level < skill_table[gsn_brew].skill_level[ch->Class] )
  3496:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  3511:	    for ( obj = ch->carrying; obj; obj = obj->next_content )
  3525:	       ch->level for scrolls and potions respectively. --- JH */
  3559:	         && ( number_percent(  ) > ch->pcdata->learned[gsn_brew] ||
  3570:	        new_damage( ch, ch, NULL, dice( UMIN( ch->level, 45 ), 10 ),
  3580:	    obj->level = ( sh_int ) ( ch->level * BREW_SCRIBE_USE_LEVEL );
  3581:	    obj->value[0] = ( int ) ( ch->level * BREW_SCRIBE_LEVEL );
  3582:	    spell_imprint( sn, ch->level, ch, obj );
  3593:	         && ch->level < skill_table[gsn_scribe].skill_level[ch->Class] )
  3601:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  3617:	    for ( obj = ch->carrying; obj; obj = obj->next_content )
  3640:	         && ( number_percent(  ) > ch->pcdata->learned[gsn_brew] ||
  3650:	        dam = dice( UMIN( ch->level, 45 ), 7 );
  3661:	    obj->level = ( sh_int ) ( ch->level * BREW_SCRIBE_USE_LEVEL );
  3662:	    obj->value[0] = ( int ) ( ch->level * BREW_SCRIBE_LEVEL );
  3663:	    spell_imprint( sn, ch->level, ch, obj );
  3694:	              && ch->level < skill_table[gsn_lore].skill_level[ch->Class] ) )
  3705:	    if ( obj->level >= ch->level )
  3716:	                  ( 1 - ( obj->level >= 1 ? obj->level : 1 ) / ch->level ) );
  3992:	    was_in = ch->in_room;
  4016:	        if ( ch->fighting )
  4018:	            for ( tmpch = ch->in_room->people; tmpch != NULL;
  4019:	                  tmpch = tmpch->next )
  4021:	                if ( tmpch->fighting )
In clan.c:
  389:	        ch->desc->pEdit = ( void * ) clan;
  390:	        ch->desc->editor = ED_CLAN;
  391:	        SET_BIT( ch->act, PLR_BUILDING );
  402:	                ch->desc->editor = ED_CLAN;
  403:	                SET_BIT( ch->act, PLR_BUILDING );
  531:	    ch->desc->pEdit = ( void * ) clan;
  857:	    if ( ch->level < clan->min_level )
  865:	           && ch->Class == CLASS_MAGE )
  867:	              && ch->Class == CLASS_CLERIC )
  869:	              && ch->Class == CLASS_WARRIOR )
  871:	              && ch->Class == CLASS_THIEF ) )
  878:	         && !IS_SET( ch->act, PLR_KILLER ) )
  887:	         && IS_SET( ch->act, PLR_KILLER ) )
  929:	            clan->members[i] = str_dup( ch->name );
  931:	            clan_log( clan, "New member: %s", ch->name );
  947:	        if ( !str_cmp( clan->members[i], ch->name ) )
  952:	            clan_log( clan, "Removed from clan: %s", ch->name );
  1056:	        if ( ch->pcdata->clan > 0 )
  1058:	            clan = get_clan( ch->pcdata->clan );
  1075:	    if ( ch->pcdata->clan == 0 )
  1098:	    if ( ch->pcdata == NULL )
  1101:	    if ( ch->pcdata->clan != 0 )
  1107:	    if ( argument[0] == '\0' && ch->pcdata->join_status != JOIN_START )
  1115:	    switch ( ch->pcdata->join_status )
  1125:	        ch->pcdata->join_status = JOIN_SEE_LIST;
  1138:	            ch->pcdata->join_status = JOIN_START;
  1162:	                        if ( ch->gold < clan->cost_gold )
  1173:	                    ch->pcdata->join_status = JOIN_CONFIRM;
  1174:	                    ch->pcdata->join_clan = num;
  1193:	            ch->pcdata->join_status = JOIN_START;
  1194:	            ch->pcdata->join_clan = 0;
  1198:	        if ( num != ch->pcdata->join_clan )
  1203:	                            ch->pcdata->join_clan );
  1220:	                        if ( clan->cost_gold > ch->gold )
  1227:	                        ch->gold -= clan->cost_gold;
  1230:	                                        ch->gold );
  1235:	                    ch->pcdata->clan = clan->number;
  1236:	                    ch->pcdata->join_status = JOIN_START;
  1238:	                    ch->pcdata->clan_rank = MAX_RANK;
  1258:	        ch->pcdata->join_status = JOIN_START;
  1262:	        bug( "Unknown join_status %d!", ch->pcdata->join_status );
  1263:	        ch->pcdata->join_status = JOIN_START;
  1278:	    if ( ch->pcdata == NULL )
  1281:	    if ( ch->pcdata->clan != 0 )
  1287:	    if ( ch->pcdata->join_status == JOIN_PETITIONING )
  1293:	    if ( ch->pcdata->join_status == JOIN_DECIDING )
  1372:	        if ( clan->cost_gold > ch->gold )
  1378:	    clan_log( clan, "%s petitions %s to join.", ch->name, victim->name );
  1380:	                    ch->name );
  1385:	    ch->pcdata->join_status = JOIN_PETITIONING;
  1387:	    ch->pcdata->clan_ch = victim;
  1398:	    if ( ch->pcdata == NULL )
  1401:	    if ( ch->pcdata->join_status != JOIN_DECIDING
  1402:	         && ch->pcdata->join_status != JOIN_CONSIDERING )
  1408:	    if ( ch->pcdata->join_status == JOIN_CONSIDERING )
  1410:	        clan = get_clan( ch->pcdata->clan );
  1411:	        if ( clan->cost_gold > ch->pcdata->clan_ch->gold )
  1417:	        clan_log( clan, "Petition accepted by %s", ch->name );
  1419:	                        ch->pcdata->clan_ch->name, clan->name );
  1420:	        printf_to_char( ch->pcdata->clan_ch,
  1423:	        ch->pcdata->clan_ch->gold -= clan->cost_gold;
  1425:	        ch->pcdata->clan_ch->pcdata->clan = clan->number;
  1426:	        ch->pcdata->clan_ch->pcdata->clan_rank = MAX_RANK;
  1427:	        ch->pcdata->clan_ch->pcdata->join_status = JOIN_START;
  1428:	        ch->pcdata->clan_ch->pcdata->clan_ch = NULL;
  1429:	        ch->pcdata->clan_ch->pcdata->join_clan = 0;
  1430:	        add_member( ch->pcdata->clan_ch, clan );
  1431:	        ch->pcdata->clan_ch = NULL;
  1432:	        ch->pcdata->join_status = JOIN_START;
  1436:	    clan = get_clan( ch->pcdata->clan_ch->pcdata->clan );
  1437:	    if ( ch->gold < clan->cost_gold )
  1445:	    clan_log( clan, "%s accepts membership.", ch->name );
  1447:	    printf_to_char( ch->pcdata->clan_ch,
  1448:	                    "%s has accepted membership in your clan!\n\r", ch->name );
  1449:	    ch->gold -= clan->cost_gold;
  1451:	    ch->pcdata->clan = clan->number;
  1452:	    ch->pcdata->clan_rank = MAX_RANK;
  1453:	    ch->pcdata->join_status = JOIN_START;
  1455:	    ch->pcdata->clan_ch->pcdata->clan_ch = NULL;
  1456:	    ch->pcdata->clan_ch->pcdata->join_status = JOIN_START;
  1457:	    ch->pcdata->clan_ch = NULL;
  1467:	    if ( ch->pcdata == NULL )
  1470:	    if ( ch->pcdata->join_status != JOIN_DECIDING
  1471:	         && ch->pcdata->join_status != JOIN_CONSIDERING )
  1477:	    if ( ch->pcdata->join_status == JOIN_CONSIDERING )
  1479:	        clan = get_clan( ch->pcdata->clan );
  1480:	        clan_log( clan, "%s declines the petition.", ch->name );
  1482:	                        ch->pcdata->clan_ch->name, clan->name );
  1483:	        printf_to_char( ch->pcdata->clan_ch,
  1486:	        ch->pcdata->clan_ch->pcdata->join_status = JOIN_START;
  1487:	        ch->pcdata->clan_ch->pcdata->clan_ch = NULL;
  1488:	        ch->pcdata->clan_ch = NULL;
  1489:	        ch->pcdata->join_status = JOIN_START;
  1493:	    clan = get_clan( ch->pcdata->clan_ch->pcdata->clan );
  1494:	    clan_log( clan, "%s declines to join.", ch->name );
  1496:	    printf_to_char( ch->pcdata->clan_ch,
  1497:	                    "%s has declined membership in your clan.\n\r", ch->name );
  1498:	    ch->pcdata->clan_ch->pcdata->join_status = JOIN_START;
  1499:	    ch->pcdata->clan_ch->pcdata->clan_ch = NULL;
  1500:	    ch->pcdata->clan_ch = NULL;
  1501:	    ch->pcdata->join_status = JOIN_START;
  1510:	    if ( IS_NPC( ch ) || ch->pcdata == NULL )
  1513:	    if ( ch->pcdata->clan == 0 )
  1535:	    if ( ch->pcdata->join_status != 0 && ch->pcdata->clan_ch != NULL )
  1539:	                        ch->pcdata->clan_ch->name );
  1543:	    clan = get_clan( ch->pcdata->clan );
  1545:	    if ( ch->pcdata->clan_rank < 1 || ch->pcdata->clan_rank > RANK_CAN_ACCEPT )
  1634:	                    clan->name, ch->name );
  1638:	    clan_log( clan, "Membership offered to %s by %s.", victim->name, ch->name );
  1639:	    ch->pcdata->clan_ch = victim;
  1640:	    ch->pcdata->join_status = JOIN_OFFERING;
  1655:	    if ( ch->pcdata == NULL )
  1685:	        if ( ch->pcdata->clan == 0 )
  1691:	        if ( ch->pcdata->clan != victim->pcdata->clan )
  1702:	        if ( ch->pcdata->clan_rank > 2 )
  1709:	        clan = get_clan( ch->pcdata->clan );
  1711:	        if ( str_cmp( ch->name, clan->leader ) )
  1713:	            if ( ( ch->pcdata->clan_rank == 2 && victim->pcdata->clan_rank < 4 )
  1714:	                 || ( ch->pcdata->clan_rank == 1
  1738:	                    ch->name, clan->rank[victim->pcdata->clan_rank - 1],
  1740:	    sprintf( buf, "%s promoted %s in clan %d.", ch->name, victim->name,
  1743:	    clan_log( clan, "%s promoted %s to %s.", ch->name, victim->name,
  1801:	        if ( IS_SET( ch->comm, COMM_SNOOP_CLAN ) )
  1803:	            REMOVE_BIT( ch->comm, COMM_SNOOP_CLAN );
  1810:	            SET_BIT( ch->comm, COMM_SNOOP_CLAN );
  1947:	            clan_log( clan, "%d credited by %s.", mod, ch->name );
  1962:	            clan_log( clan, "%d funds deducted by %s.", mod, ch->name );
  2061:	    if ( ( clan = get_clan( ch->pcdata->clan ) ) == NULL )
  2067:	    if ( IS_SET( ch->comm, COMM_QUIET ) )
  2073:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) )
  2082:	        if ( IS_SET( ch->comm, COMM_NOCLAN ) )
  2085:	            REMOVE_BIT( ch->comm, COMM_NOCLAN );
  2090:	            SET_BIT( ch->comm, COMM_NOCLAN );
  2095:	    REMOVE_BIT( ch->comm, COMM_NOCLAN );
  2099:	    if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  2117:	                                                ch->pcdata->clan )
  2127:	                            IS_NPC( ch ) ? ch->short_descr : ch->name,
  2143:	    if ( ch->pcdata->clan == 0 )
  2150:	    clan = get_clan( ch->pcdata->clan );
  2152:	    if ( !str_cmp( clan->leader, ch->name ) || !str_cmp( clan->god, ch->name ) )
  2160:	    if ( ch->pcdata->join_status != JOIN_RESIGNING )
  2165:	        ch->pcdata->join_status = JOIN_RESIGNING;
  2169:	    clan_log( clan, "%s resigned from the clan!", ch->name );
  2170:	    ch->pcdata->clan = 0;
  2171:	    ch->pcdata->clan_rank = 0;
  2172:	    ch->pcdata->join_status = 0;
  2186:	    if ( IS_NPC( ch ) && !IS_SET( ch->act, ACT_PET ) )
  2192:	    if ( !IS_NPC( ch ) && ch->pcdata->clan < 1 )
  2199:	    clan = get_clan( ch->pcdata->clan );
  2214:	    if ( ch->gold < mod )
  2222:	        ch->gold -= mod;
  2224:	        clan_log( clan, "%d credited by %s.", mod, ch->name );
  2237:	    if ( IS_NPC( ch ) && !IS_SET( ch->act, ACT_PET ) )
  2243:	    if ( !IS_NPC( ch ) && ch->pcdata->clan < 1 )
  2254:	        if ( ch->pcdata->clan == 0 )
  2260:	        clan = get_clan( ch->pcdata->clan );
  2265:	        clan = get_clan( ch->master->pcdata->clan );
  2275:	    if ( ch->in_room == location )
  2281:	    if ( IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL )
  2288:	    if ( ( victim = ch->fighting ) != NULL )
  2293:	            skill = 40 + ch->level;
  2295:	            skill = ch->pcdata->learned[gsn_recall];
  2306:	            lose = ( int ) ( 0.02 * exp_per_level( ch, ch->pcdata->points ) );
  2317:	    ch->move /= 2;
  2325:	    if ( ch->pet != NULL )
  2326:	        do_crecall( ch->pet, "" );
  2340:	    if ( ch->pcdata == NULL )
  2370:	        if ( ch->pcdata->clan == 0 )
  2376:	        if ( ch->pcdata->clan != victim->pcdata->clan )
  2387:	        if ( ch->pcdata->clan_rank > 1 )
  2394:	        clan = get_clan( ch->pcdata->clan );
  2396:	        if ( str_cmp( ch->name, clan->leader ) )
  2398:	            if ( ( ch->pcdata->clan_rank == 2
  2400:	                 || ( ch->pcdata->clan_rank == 1
  2424:	                    ch->name, clan->rank[victim->pcdata->clan_rank - 1],
  2426:	    sprintf( buf, "%s demoted %s in clan %d.", ch->name, victim->name,
  2429:	    clan_log( clan, "%s demoted %s to %s.", ch->name, victim->name,
  2441:	    i = ( ch->pcdata->clan );
In board.c:
  409:	    if ( !str_cmp( ch->name, note->sender ) )
  443:	    if ( ( ch->pcdata->clan >= 1 )
  449:	    if ( ch->pcdata->clan >= 1 )
  453:	        i = ( ch->pcdata->clan );
  460:	    if ( is_full_name( ch->name, note->to_list ) )
  482:	    last_read = ch->pcdata->last_note[board_number( board )];
  505:	    if ( get_trust( ch ) < ch->pcdata->board->write_level )
  512:	    if ( ch->pcdata->in_progress && ( !ch->pcdata->in_progress->text ) )
  517:	        free_note( ch->pcdata->in_progress );
  518:	        ch->pcdata->in_progress = NULL;
  521:	    if ( !ch->pcdata->in_progress )
  523:	        ch->pcdata->in_progress = new_note(  );
  524:	        ch->pcdata->in_progress->sender = str_dup( ch->name );
  530:	        ch->pcdata->in_progress->date = str_dup( strtime );
  534:	    if ( !IS_SET( ch->act, PLR_AFK ) )
  535:	        SET_BIT( ch->act, PLR_AFK );
  540:	             ch->pcdata->in_progress->text ? "continuing" : "posting",
  541:	             ch->pcdata->board->short_name );
  544:	    sprintf( buf, "`YFrom`w:    %s\n\r\n\r", ch->name );
  547:	    if ( !ch->pcdata->in_progress->text )   /* Are we continuing an old note or not? */
  549:	        switch ( ch->pcdata->board->force_type )
  554:	                     ch->pcdata->board->names );
  559:	                     ch->pcdata->board->names );
  565:	                     ch->pcdata->board->names );
  573:	        ch->desc->connected = CON_NOTE_TO;
  582:	                 ch->pcdata->in_progress->to_list,
  583:	                 ctime( &ch->pcdata->in_progress->expire ),
  584:	                 ch->pcdata->in_progress->subject );
  587:	        send_to_char( ch->pcdata->in_progress->text, ch );
  594:	        ch->desc->connected = CON_NOTE_TEXT;
  606:	        &ch->pcdata->last_note[board_number( ch->pcdata->board )];
  616:	        for ( p = ch->pcdata->board->note_first; p; p = p->next )
  633:	        for ( p = ch->pcdata->board->note_first; p; p = p->next, count++ )
  646:	                     ch->pcdata->board->short_name );
  665:	    p = find_note( ch, ch->pcdata->board, atoi( argument ) );
  672:	    if ( str_cmp( ch->name, p->sender ) && ( get_trust( ch ) < MAX_LEVEL ) )
  678:	    unlink_note( ch->pcdata->board, p );
  682:	    save_board( ch->pcdata->board );    /* save the board */
  698:	        for ( p = ch->pcdata->board->note_first; p; p = p->next )
  706:	    last_note = ch->pcdata->last_note[board_number( ch->pcdata->board )];
  708:	    for ( p = ch->pcdata->board->note_first; p; p = p->next )
  733:	    for ( p = ch->pcdata->board->note_first; p && p->next; p = p->next );
  739:	        ch->pcdata->last_note[board_number( ch->pcdata->board )] =
  752:	    if ( IS_SET( ch->comm, COMM_NOCHANNELS ) || IS_SET( ch->act, PLR_JAILED ) )
  817:	                 ch->pcdata->board->short_name );
  821:	        if ( ch->pcdata->board->read_level > get_trust( ch ) )
  824:	        else if ( ch->pcdata->board->write_level > get_trust( ch ) )
  845:	            ch->pcdata->board = &boards[i];
  879:	    ch->pcdata->board = &boards[i];
  939:	    int i = board_number( ch->pcdata->board ) + 1;
  949:	        ch->pcdata->board = &boards[i];
  959:	    if ( !ch->pcdata->in_progress )
  969:	    switch ( ch->pcdata->board->force_type )
  974:	            ch->pcdata->in_progress->to_list =
  975:	                str_dup( ch->pcdata->board->names );
  977:	                     ch->pcdata->board->names );
  981:	            ch->pcdata->in_progress->to_list = str_dup( buf );
  986:	        if ( !is_full_name( ch->pcdata->board->names, buf ) )
  989:	            strcat( buf, ch->pcdata->board->names );
  990:	            ch->pcdata->in_progress->to_list = str_dup( buf );
  994:	                     "`YNew To`w:  %s\n\r", ch->pcdata->board->names,
  995:	                     ch->pcdata->in_progress->to_list );
  999:	            ch->pcdata->in_progress->to_list = str_dup( buf );
  1003:	        if ( is_full_name( ch->pcdata->board->names, buf ) )
  1007:	                     "`YTo`w:      ", ch->pcdata->board->names );
  1012:	            ch->pcdata->in_progress->to_list = str_dup( buf );
  1026:	    if ( !ch->pcdata->in_progress )
  1052:	        ch->pcdata->in_progress->subject = str_dup( buf );
  1058:	                     "`YExpire`w:  ", ch->pcdata->board->purge_days );
  1064:	            ch->pcdata->in_progress->expire =
  1065:	                current_time + ch->pcdata->board->purge_days * 24L * 3600L;
  1067:	                     ctime( &ch->pcdata->in_progress->expire ) );
  1085:	    if ( !ch->pcdata->in_progress )
  1095:	        days = ch->pcdata->board->purge_days;
  1117:	    ch->pcdata->in_progress->expire = expire;
  1135:	    if ( !ch->pcdata->in_progress )
  1169:	    if ( ch->pcdata->in_progress->text )
  1171:	        strcpy( letter, ch->pcdata->in_progress->text );
  1172:	        free_string( &ch->pcdata->in_progress->text );
  1182:	        free_note( ch->pcdata->in_progress );
  1183:	        ch->pcdata->in_progress = NULL; /* important */
  1194:	    ch->pcdata->in_progress->text = str_dup( letter );
  1206:	    if ( !ch->pcdata->in_progress )
  1238:	        ch->pcdata->in_progress->text =
  1239:	            string_replace( ch->pcdata->in_progress->text, arg2, arg3 );
  1246:	        if ( ch->pcdata->in_progress->text )
  1248:	            ch->pcdata->in_progress->text =
  1249:	                format_string( ch->pcdata->in_progress->text );
  1260:	        if ( ch->pcdata->in_progress->text )
  1263:	            write_to_buffer( d, ch->pcdata->in_progress->text, 0 );
  1272:	        finish_note( ch->pcdata->board, ch->pcdata->in_progress );
  1276:	        ch->pcdata->in_progress = NULL;
  1278:	        if ( IS_SET( ch->act, PLR_AFK ) )
  1279:	            REMOVE_BIT( ch->act, PLR_AFK );
  1284:	        free_note( ch->pcdata->in_progress );
  1285:	        ch->pcdata->in_progress = NULL;
  1287:	        if ( IS_SET( ch->act, PLR_AFK ) )
  1288:	            REMOVE_BIT( ch->act, PLR_AFK );
In todoolc.c:
  109:	            ch->desc->pEdit = ( void * ) pTodo;
  110:	            ch->desc->editor = ED_TODOOLC;
  111:	            SET_BIT( ch->act, PLR_BUILDING );
  119:	            ch->desc->editor = ED_TODOOLC;
  120:	            SET_BIT( ch->act, PLR_BUILDING );
  145:	    pTodo = ( TODO_DATA * ) ch->desc->pEdit;
  199:	    pTodo = ( TODO_DATA * ) ch->desc->pEdit;
  239:	    ch->desc->pEdit = ( void * ) pTodo;
  248:	    pTodo = ( TODO_DATA * ) ch->desc->pEdit;
  288:	    pTodo = ( TODO_DATA * ) ch->desc->pEdit;
  313:	    pTodo = ( TODO_DATA * ) ch->desc->pEdit;
In bank.c:
  41:	    char const *Class = class_table[ch->Class].name;
  43:	    gold = ch->pcdata->gold_bank;
  44:	    /*silver = ch->pcdata->silver_bank; */
  48:	    if ( ( IS_NPC( ch ) || IS_SET( ch->act, ACT_PET ) )
  64:	                 "  Gold:   %10ld\n\r  ", ch->gold, gold );
  71:	                 "  Gold:   %10ld\n\r", ch->gold, gold );
  80:	    char const *Class = class_table[ch->Class].name;
  88:	    if ( ( IS_NPC( ch ) || IS_SET( ch->act, ACT_PET ) )
  94:	    if ( ch->in_room != get_room_index( ROOM_VNUM_BANK )
  100:	    else if ( ch->in_room != get_room_index( ROOM_VNUM_BANK_THIEF )
  124:	        if ( ch->in_room == get_room_index( ROOM_VNUM_BANK ) )
  152:	                        if ( ch->gold < amount )
  161:	                            ch->pcdata->gold_bank += amount;
  162:	                            ch->gold -= amount;
  167:	                                     amount, ch->pcdata->gold_bank, ch->gold );
  174:	                       if (ch->silver < amount)
  181:	                       ch->pcdata->silver_bank += amount;
  182:	                       ch->silver -= amount;
  184:	                       sprintf( buf, "GBS: You have deposited %ld Silver.\n\r   Account: %10ld.\n\r   Beltpouch: %8ld.\n\r", amount, ch->pcdata->silver_bank, ch->silver);
  192:	        else if ( ch->in_room == get_room_index( ROOM_VNUM_BANK_THIEF ) )
  221:	                        if ( ch->gold < amount )
  230:	                            ch->pcdata->gold_bank += amount;
  231:	                            ch->gold -= amount;
  236:	                                     amount, ch->pcdata->gold_bank, ch->gold );
  243:	                  if (ch->silver < amount)
  250:	                     ch->pcdata->silver_bank += amount;
  251:	                     ch->silver -= amount;
  253:	                     sprintf( buf, "THIEF: You have hidden %ld Silver.\n\r   Bedroll: %10ld.\n\r   Beltpouch: %8ld.\n\r", amount, ch->pcdata->silver_bank, ch->silver);
  280:	    char const *Class = class_table[ch->Class].name;
  288:	    if ( ( IS_NPC( ch ) || IS_SET( ch->act, ACT_PET ) )
  294:	    if ( ch->in_room != get_room_index( ROOM_VNUM_BANK )
  300:	    else if ( ch->in_room != get_room_index( ROOM_VNUM_BANK_THIEF )
  324:	        if ( ch->in_room == get_room_index( ROOM_VNUM_BANK ) )
  351:	                        if ( ch->pcdata->gold_bank < amount )
  360:	                            ch->pcdata->gold_bank -= amount;
  361:	                            ch->gold += amount;
  366:	                                     amount, ch->pcdata->gold_bank, ch->gold );
  373:	                  if (ch->pcdata->silver_bank < amount)
  380:	                     ch->pcdata->silver_bank -= amount;
  381:	                     ch->silver += amount;
  383:	                     sprintf( buf, "GBS: You have withdrawn %ld Silver.\n\r   Account: %10ld.\n\r   Beltpouch: %8ld.\n\r", amount, ch->pcdata->silver_bank, ch->silver);
  397:	        else if ( ch->in_room == get_room_index( ROOM_VNUM_BANK_THIEF ) )
  422:	                        if ( ch->pcdata->gold_bank < amount )
  431:	                            ch->pcdata->gold_bank -= amount;
  432:	                            ch->gold += amount;
  437:	                                     amount, ch->pcdata->gold_bank, ch->gold );
  444:	                  if (ch->pcdata->silver_bank < amount)
  451:	                     ch->pcdata->silver_bank -= amount;
  452:	                     ch->silver += amount;
  454:	                     sprintf( buf, "THIEF: You have grabbed %ld Silver.\n\r   Bedroll: %10ld.\n\r   Beltpouch: %8ld.\n\r", amount, ch->pcdata->silver_bank, ch->silver);
In handler.c:
  120:	    for ( fch = obj->in_room->people; fch != NULL; fch = fch->next_in_room )
  121:	        if ( fch->on == obj )
  189:	        if ( IS_SET( ch->imm_flags, IMM_WEAPON ) )
  191:	        else if ( IS_SET( ch->res_flags, RES_WEAPON ) )
  193:	        else if ( IS_SET( ch->vuln_flags, VULN_WEAPON ) )
  198:	        if ( IS_SET( ch->imm_flags, IMM_MAGIC ) )
  200:	        else if ( IS_SET( ch->res_flags, RES_MAGIC ) )
  202:	        else if ( IS_SET( ch->vuln_flags, VULN_MAGIC ) )
  258:	    if ( IS_SET( ch->imm_flags, bit ) )
  260:	    else if ( IS_SET( ch->res_flags, bit ) )
  262:	    else if ( IS_SET( ch->vuln_flags, bit ) )
  275:	        skill = ch->level * 5 / 2;
  286:	        if ( ch->level < skill_table[sn].skill_level[ch->Class] )
  289:	            skill = ch->pcdata->learned[sn];
  296:	            skill = ch->level * 2 + 20;
  299:	             && ( IS_SET( ch->act, ACT_WARRIOR )
  300:	                  || IS_SET( ch->act, ACT_THIEF ) ) )
  301:	            skill = 10 + 3 * ch->level;
  303:	        else if ( sn == gsn_third_attack && IS_SET( ch->act, ACT_WARRIOR ) )
  304:	            skill = 4 * ch->level - 40;
  306:	        else if ( sn == gsn_fourth_attack && IS_SET( ch->act, ACT_WARRIOR ) )
  307:	            skill = 4 * ch->level - 50;
  310:	            skill = 40 + 2 * ch->level;
  312:	        else if ( sn == gsn_trip && IS_SET( ch->off_flags, OFF_TRIP ) )
  313:	            skill = 10 + 3 * ch->level;
  315:	        else if ( sn == gsn_bash && IS_SET( ch->off_flags, OFF_BASH ) )
  316:	            skill = 10 + 3 * ch->level;
  319:	                  && ( IS_SET( ch->off_flags, OFF_DISARM )
  320:	                       || IS_SET( ch->off_flags, ACT_WARRIOR )
  321:	                       || IS_SET( ch->off_flags, ACT_THIEF ) ) )
  322:	            skill = 20 + 3 * ch->level;
  325:	                  && ( IS_SET( ch->act, ACT_WARRIOR )
  326:	                       || IS_SET( ch->act, ACT_THIEF ) ) )
  327:	            skill = ch->level;
  329:	        else if ( sn == gsn_berserk && IS_SET( ch->off_flags, OFF_BERSERK ) )
  330:	            skill = 3 * ch->level;
  338:	            skill = 40 + 5 * ch->level / 2;
  345:	        skill -= ch->level / 2;
  443:	            skill = 3 * ch->level;
  445:	            skill = 40 + 2 * ch->level;
  447:	            skill = 40 + 5 * ch->level / 2;
  453:	            skill = 3 * ch->level;
  455:	            skill = ch->pcdata->learned[sn];
  473:	    if ( ch->pcdata->perm_hit == 0
  474:	         || ch->pcdata->perm_mana == 0
  475:	         || ch->pcdata->perm_move == 0 || ch->pcdata->last_level == 0 )
  491:	                        ch->sex -= mod;
  492:	                        if ( ch->sex < 0 || ch->sex > NUM_SEXES ) /* Modified by JR */
  493:	                            ch->sex = IS_NPC( ch ) ? 0 : ch->pcdata->true_sex;
  496:	                        ch->max_mana -= mod;
  499:	                        ch->max_hit -= mod;
  502:	                        ch->max_move -= mod;
  513:	                    ch->sex -= mod;
  516:	                    ch->max_mana -= mod;
  519:	                    ch->max_hit -= mod;
  522:	                    ch->max_move -= mod;
  528:	        ch->pcdata->perm_hit = ch->max_hit;
  529:	        ch->pcdata->perm_mana = ch->max_mana;
  530:	        ch->pcdata->perm_move = ch->max_move;
  531:	        ch->pcdata->last_level = ch->played / 3600;
  532:	        if ( ch->pcdata->true_sex < 0 || ch->pcdata->true_sex > NUM_SEXES )
  534:	            if ( ch->sex > 0 && ch->sex < 4 )
  535:	                ch->pcdata->true_sex = ch->sex;
  537:	                ch->pcdata->true_sex = 0;
  544:	        ch->mod_stat[stat] = 0;
  546:	    if ( ch->pcdata->true_sex < 0 || ch->pcdata->true_sex > NUM_SEXES )
  547:	        ch->pcdata->true_sex = 0;
  548:	    ch->sex = ch->pcdata->true_sex;
  549:	    ch->max_hit = ch->pcdata->perm_hit;
  550:	    ch->max_mana = ch->pcdata->perm_mana;
  551:	    ch->max_move = ch->pcdata->perm_move;
  554:	        ch->armor[i] = 100;
  556:	    ch->hitroll = 0;
  557:	    ch->damroll = 0;
  558:	    ch->saving_throw = 0;
  567:	            ch->armor[i] -= apply_ac( obj, loc, i );
  576:	                    ch->mod_stat[STAT_STR] += mod;
  579:	                    ch->mod_stat[STAT_DEX] += mod;
  582:	                    ch->mod_stat[STAT_INT] += mod;
  585:	                    ch->mod_stat[STAT_WIS] += mod;
  588:	                    ch->mod_stat[STAT_CON] += mod;
  592:	                    ch->sex += mod;
  595:	                    ch->max_mana += mod;
  598:	                    ch->max_hit += mod;
  601:	                    ch->max_move += mod;
  606:	                        ch->armor[i] += mod;
  609:	                    ch->hitroll += mod;
  612:	                    ch->damroll += mod;
  616:	                    ch->saving_throw += mod;
  619:	                    ch->saving_throw += mod;
  622:	                    ch->saving_throw += mod;
  625:	                    ch->saving_throw += mod;
  628:	                    ch->saving_throw += mod;
  631:	                    ch->alignment += mod;
  642:	                ch->mod_stat[STAT_STR] += mod;
  645:	                ch->mod_stat[STAT_DEX] += mod;
  648:	                ch->mod_stat[STAT_INT] += mod;
  651:	                ch->mod_stat[STAT_WIS] += mod;
  654:	                ch->mod_stat[STAT_CON] += mod;
  658:	                ch->sex += mod;
  661:	                ch->max_mana += mod;
  664:	                ch->max_hit += mod;
  667:	                ch->max_move += mod;
  672:	                    ch->armor[i] += mod;
  675:	                ch->hitroll += mod;
  678:	                ch->damroll += mod;
  682:	                ch->saving_throw += mod;
  685:	                ch->saving_throw += mod;
  688:	                ch->saving_throw += mod;
  691:	                ch->saving_throw += mod;
  694:	                ch->saving_throw += mod;
  697:	                ch->alignment += mod;
  704:	    for ( af = ch->affected; af != NULL; af = af->next )
  710:	            ch->mod_stat[STAT_STR] += mod;
  713:	            ch->mod_stat[STAT_DEX] += mod;
  716:	            ch->mod_stat[STAT_INT] += mod;
  719:	            ch->mod_stat[STAT_WIS] += mod;
  722:	            ch->mod_stat[STAT_CON] += mod;
  726:	            ch->sex += mod;
  729:	            ch->max_mana += mod;
  732:	            ch->max_hit += mod;
  735:	            ch->max_move += mod;
  740:	                ch->armor[i] += mod;
  743:	            ch->hitroll += mod;
  746:	            ch->damroll += mod;
  750:	            ch->saving_throw += mod;
  753:	            ch->saving_throw += mod;
  756:	            ch->saving_throw += mod;
  759:	            ch->saving_throw += mod;
  762:	            ch->saving_throw += mod;
  765:	            ch->alignment += mod;
  770:	    for ( naf = ch->newaffected; naf != NULL; naf = naf->next )
  776:	            ch->mod_stat[STAT_STR] += mod;
  779:	            ch->mod_stat[STAT_DEX] += mod;
  782:	            ch->mod_stat[STAT_INT] += mod;
  785:	            ch->mod_stat[STAT_WIS] += mod;
  788:	            ch->mod_stat[STAT_CON] += mod;
  792:	            ch->sex += mod;
  795:	            ch->max_mana += mod;
  798:	            ch->max_hit += mod;
  801:	            ch->max_move += mod;
  806:	                ch->armor[i] += mod;
  809:	            ch->hitroll += mod;
  812:	            ch->damroll += mod;
  816:	            ch->saving_throw += mod;
  819:	            ch->saving_throw += mod;
  822:	            ch->saving_throw += mod;
  825:	            ch->saving_throw += mod;
  828:	            ch->saving_throw += mod;
  831:	            ch->alignment += mod;
  837:	    if ( ch->sex < 0 || ch->sex > 3 )
  838:	        ch->sex = ch->pcdata->true_sex;
  846:	    if ( ch->desc != NULL && ch->desc->original != NULL )
  847:	        ch = ch->desc->original;
  849:	    if ( ch->trust != 0 )
  850:	        return ch->trust;
  852:	    if ( IS_NPC( ch ) && ch->level >= LEVEL_HERO )
  855:	        return ch->level;
  871:	    if ( IS_NPC( ch ) || ch->level > LEVEL_IMMORTAL )
  876:	        max = pc_race_table[ch->race].max_stats[stat] + 4;
  878:	        if ( class_table[ch->Class].attr_prime == stat )
  881:	        if ( ch->race == race_lookup( "human" ) )
  887:	    return URANGE( 3, ch->perm_stat[stat] + ch->mod_stat[stat], max );
  895:	    if ( IS_NPC( ch ) || ch->level > LEVEL_IMMORTAL )
  898:	    max = pc_race_table[ch->race].max_stats[stat];
  899:	    if ( class_table[ch->Class].attr_prime == stat )
  901:	        if ( ch->race == race_lookup( "human" ) )
  915:	    if ( !IS_NPC( ch ) && ch->level >= LEVEL_IMMORTAL )
  918:	    if ( IS_NPC( ch ) && IS_SET( ch->act, ACT_PET ) )
  921:	    return MAX_WEAR + 2 * get_curr_stat( ch, STAT_DEX ) + ch->level;
  929:	    if ( !IS_NPC( ch ) && ch->level >= LEVEL_IMMORTAL )
  932:	    if ( IS_NPC( ch ) && IS_SET( ch->act, ACT_PET ) )
  935:	    return str_app[get_curr_stat( ch, STAT_STR )].carry + ch->level * 5 / 2;
  1051:	        SET_BIT( ch->affected_by, paf->bitvector );
  1055:	        REMOVE_BIT( ch->affected_by, paf->bitvector );
  1068:	        ch->mod_stat[STAT_STR] += mod;
  1071:	        ch->mod_stat[STAT_DEX] += mod;
  1074:	        ch->mod_stat[STAT_INT] += mod;
  1077:	        ch->mod_stat[STAT_WIS] += mod;
  1080:	        ch->mod_stat[STAT_CON] += mod;
  1083:	        ch->sex += mod;
  1096:	        ch->max_mana += mod;
  1097:	        if ( ch->mana > ch->max_mana )
  1098:	            ch->mana = ch->max_mana;
  1101:	        ch->max_hit += mod;
  1102:	        if ( ch->hit > ch->max_hit )
  1103:	            ch->hit = ch->max_hit;
  1106:	        ch->max_move += mod;
  1107:	        if ( ch->move > ch->max_move )
  1108:	            ch->move = ch->max_move;
  1116:	            ch->armor[i] += mod;
  1119:	        ch->hitroll += mod;
  1122:	        ch->damroll += mod;
  1125:	        ch->saving_throw += mod;
  1128:	        ch->saving_throw += mod;
  1131:	        ch->saving_throw += mod;
  1134:	        ch->saving_throw += mod;
  1137:	        ch->saving_throw += mod;
  1140:	        ch->alignment += mod;
  1160:	            obj_to_room( wield, ch->in_room );
  1177:	        SET_NEWAFF( ch->newaff, npaf->bitvector );
  1181:	        REMOVE_NEWAFF( ch->newaff, npaf->bitvector );
  1194:	        ch->mod_stat[STAT_STR] += mod;
  1197:	        ch->mod_stat[STAT_DEX] += mod;
  1200:	        ch->mod_stat[STAT_INT] += mod;
  1203:	        ch->mod_stat[STAT_WIS] += mod;
  1206:	        ch->mod_stat[STAT_CON] += mod;
  1209:	        ch->sex += mod;
  1222:	        ch->max_mana += mod;
  1223:	        if ( ch->mana > ch->max_mana )
  1224:	            ch->mana = ch->max_mana;
  1228:	        ch->max_hit += mod;
  1229:	        if ( ch->hit > ch->max_hit )
  1230:	            ch->hit = ch->max_hit;
  1234:	        ch->max_move += mod;
  1235:	        if ( ch->move > ch->max_move )
  1236:	            ch->move = ch->max_move;
  1245:	            ch->armor[i] += mod;
  1249:	        ch->hitroll += mod;
  1252:	        ch->damroll += mod;
  1255:	        ch->saving_throw += mod;
  1258:	        ch->saving_throw += mod;
  1261:	        ch->saving_throw += mod;
  1264:	        ch->saving_throw += mod;
  1267:	        ch->saving_throw += mod;
  1270:	        ch->alignment += mod;
  1290:	            obj_to_room( wield, ch->in_room );
  1316:	    paf_new->next = ch->affected;
  1317:	    ch->affected = paf_new;
  1338:	    npaf_new->next = ch->newaffected;
  1339:	    ch->newaffected = npaf_new;
  1370:	    if ( ch->affected == NULL )
  1378:	    if ( paf == ch->affected )
  1380:	        ch->affected = paf->next;
  1386:	        for ( prev = ch->affected; prev != NULL; prev = prev->next )
  1409:	    if ( ch->newaffected == NULL )
  1417:	    if ( npaf == ch->newaffected )
  1419:	        ch->newaffected = npaf->next;
  1425:	        for ( nprev = ch->newaffected; nprev != NULL; nprev = nprev->next )
  1494:	    for ( paf = ch->affected; paf != NULL; paf = paf_next )
  1509:	    for ( npaf = ch->newaffected; npaf != NULL; npaf = npaf_next )
  1526:	    for ( paf = ch->affected; paf != NULL; paf = paf->next )
  1539:	    for ( npaf = ch->newaffected; npaf != NULL; npaf = npaf->next )
  1557:	    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
  1579:	    for ( npaf_old = ch->newaffected; npaf_old != NULL;
  1603:	    if ( ch->in_room == NULL )
  1610:	        --ch->in_room->area->nplayer;
  1614:	         && obj->value[2] != 0 && ch->in_room->light > 0 )
  1615:	        --ch->in_room->light;
  1617:	    if ( ch == ch->in_room->people )
  1619:	        ch->in_room->people = ch->next_in_room;
  1625:	        for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
  1629:	                prev->next_in_room = ch->next_in_room;
  1638:	    ch->in_room = NULL;
  1639:	    ch->next_in_room = NULL;
  1640:	    ch->on = NULL;              /* sanity check! */
  1653:	        bug( "Char_to_room: NULL. - ch->name = %s", ch->name );
  1657:	    ch->in_room = pRoomIndex;
  1658:	    ch->next_in_room = pRoomIndex->people;
  1663:	        if ( ch->in_room->area->empty )
  1665:	            ch->in_room->area->empty = FALSE;
  1666:	            ch->in_room->area->age = 0;
  1668:	        ++ch->in_room->area->nplayer;
  1673:	        ++ch->in_room->light;
  1681:	        for ( af = ch->affected; af != NULL; af = af->next )
  1689:	            REMOVE_BIT( ch->affected_by, AFF_PLAGUE );
  1703:	        for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
  1743:	    obj->next_content = ch->carrying;
  1744:	    ch->carrying = obj;
  1748:	    ch->carry_number += get_obj_number( obj );
  1749:	    ch->carry_weight += get_obj_weight( obj );
  1768:	    if ( ch->carrying == obj )
  1770:	        ch->carrying = obj->next_content;
  1776:	        for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
  1791:	    ch->carry_number -= get_obj_number( obj );
  1792:	    ch->carry_weight -= get_obj_weight( obj );
  1853:	    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
  1879:	         || ( IS_OBJ_STAT( obj, ITEM_ANTI_MAGE ) && ch->Class == CLASS_MAGE
  1881:	                                      && ch->Class == CLASS_CLERIC )
  1882:	         || ( IS_OBJ_STAT( obj, ITEM_ANTI_THIEF ) && ch->Class == CLASS_THIEF )
  1884:	              && ch->Class == CLASS_WARRIOR )
  1886:	         || ( IS_OBJ_STAT( obj, ITEM_ANTI_MALE ) && ch->sex == SEX_MALE )
  1887:	         || ( IS_OBJ_STAT( obj, ITEM_ANTI_FEMALE ) && ch->sex == SEX_FEMALE )
  1888:	         || ( IS_OBJ_STAT( obj, ITEM_ANTI_NEUTER ) && ch->sex == SEX_NEUTRAL )
  1891:	              && ch->pcdata->clan != obj->clan ) )
  1899:	        obj_to_room( obj, ch->in_room );
  1904:	        ch->armor[i] -= apply_ac( obj, iWear, i );
  1914:	         && obj->value[2] != 0 && ch->in_room != NULL )
  1915:	        ++ch->in_room->light;
  1935:	        ch->armor[i] += apply_ac( obj, obj->wear_loc, i );
  1946:	         && ch->in_room != NULL && ch->in_room->light > 0 )
  1947:	        --ch->in_room->light;
  1982:	    for ( ch = in_room->people; ch != NULL; ch = ch->next_in_room )
  1983:	        if ( ch->on == obj )
  1984:	            ch->on = NULL;
  2206:	    if ( ch->in_room == NULL )
  2213:	    ch->pet = NULL;             /* just in case */
  2221:	    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  2237:	        ch->pIndexData->count--;
  2238:	        if ( ch->reset_count )
  2239:	            ( *ch->reset_count )--;
  2242:	    if ( ch->desc != NULL && ch->desc->original != NULL )
  2247:	    for ( wch = char_list; wch != NULL; wch = wch->next )
  2249:	        if ( wch->reply == ch )
  2251:	            wch->reply = NULL;
  2258:	        char_list = ch->next;
  2269:	            prev->next = ch->next;
  2283:	            player_list = ch->next_player;
  2294:	                prev->next_player = ch->next_player;
  2304:	    if ( ch->desc )
  2306:	        ch->desc->character = NULL;
  2317:	    if ( ch->in_room == NULL )
  2324:	    ch->pet = NULL;             /* just in case */
  2342:	        ch->pIndexData->count--;
  2343:	        if ( ch->reset_count )
  2344:	            ( *ch->reset_count )--;
  2347:	    if ( ch->desc != NULL && ch->desc->original != NULL )
  2350:	    for ( wch = char_list; wch != NULL; wch = wch->next )
  2352:	        if ( wch->reply == ch )
  2353:	            wch->reply = NULL;
  2358:	        char_list = ch->next;
  2367:	            prev->next = ch->next;
  2379:	            player_list = ch->next_player;
  2389:	                prev->next_player = ch->next_player;
  2398:	    if ( ch->desc )
  2399:	        ch->desc->character = NULL;
  2418:	    if ( !ch->in_room )         /* Make sure in_room isn't NULL (ConsoleChar) - Zane */
  2420:	    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
  2422:	        if ( !can_see( ch, rch ) || !is_name( arg2, rch->name ) )
  2447:	    if ( !ch->in_room )         /* Make sure in_room isn't NULL (ConsoleChar) - Zane */
  2450:	    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
  2453:	             || !is_name( arg2, rch->name ) )
  2479:	    if ( !ch->in_room )         /* Make sure in_room isn't NULL (ConsoleChar) - Zane */
  2482:	    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
  2485:	             || !is_name( arg2, rch->name ) )
  2509:	    for ( wch = char_list; wch != NULL; wch = wch->next )
  2511:	        if ( wch->in_room == NULL || !can_see( ch, wch )
  2512:	             || !is_name( arg2, wch->name ) )
  2538:	    for ( wch = char_list; wch != NULL; wch = wch->next )
  2540:	        if ( wch->in_room == NULL || !can_see( ch, wch )
  2541:	             || !IS_NPC( wch ) || !is_name( arg2, wch->name ) )
  2567:	    for ( wch = player_list; wch != NULL; wch = wch->next_player )
  2569:	        if ( wch->in_room == NULL || !can_see( ch, wch )
  2570:	             || !is_name( arg2, wch->name ) )
  2631:	    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
  2656:	    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
  2676:	    obj = get_obj_list( ch, argument, ch->in_room->contents );
  2810:	    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
  2843:	         && ch->level > 5 && !IS_IMMORTAL( ch ) )
  2858:	        char *skill = pc_race_table[ch->race].skills[x];
  2886:	    if ( ch->level >= skill_table[sn].skill_level[ch->Class] )
  2907:	        if ( ch->pcdata->learned[sn] < 1 )
  2924:	         || IS_SET( ch->comm, VIS_CONSOLE ) )
  2932:	    if ( ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2939:	    if ( room_is_dark( ch->in_room ) && !IS_AFFECTED( ch, AFF_INFRARED ) )
  2956:	        chance += ch->level - victim->level * 3 / 2;
  2975:	    if ( !IS_NPC( ch ) && IS_SET( ch->act, PLR_HOLYLIGHT ) )
  2994:	    if ( room_is_dark( ch->in_room ) && !IS_AFFECTED( ch, AFF_INFRARED ) )
  3008:	    if ( !IS_NPC( ch ) && ch->level >= LEVEL_IMMORTAL )
In random.c:
  1037:	    if ( ch->level < obj->level )
  1187:	        if ( ( ( weapon != NULL ) && ( ch->size < SIZE_LARGE )
  1207:		if ((!IS_NPC(ch) && ch->size < SIZE_LARGE 
In drunk2.c:
  112:	        drunklevel = ch->pcdata->condition[COND_DRUNK];
In act_move.c:
  107:	            ch->move -= 5;
  109:	            REMOVE_BIT( ch->affected_by, AFF_WEB );
  110:	            ch->position = POS_RESTING;
  118:	            ch->move -= 5;
  127:	        if ( ch->pcdata->condition[COND_DRUNK] > 10 )
  129:	            if ( ch->pcdata->condition[COND_DRUNK] > number_percent(  ) )
  146:	    in_room = ch->in_room;
  184:	         && ch->master != NULL && in_room == ch->master->in_room )
  207:	                if ( iClass != ch->Class
  227:	                if ( !IS_SET(to_room->room_flags, GUILD_ROOMS[ch->Class]) )
  265:	            for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
  285:	        if ( ch->move < move )
  292:	        ch->move -= move;
  296:	         && ( IS_NPC( ch ) || !IS_SET( ch->act, PLR_WIZINVIS ) ) )
  299:	        if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  310:	         && ( IS_NPC( ch ) || !IS_SET( ch->act, PLR_WIZINVIS ) ) )
  313:	        if ( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > 10 )
  328:	        fch_next = fch->next_in_room;
  330:	        if ( fch->master == ch && IS_AFFECTED( fch, AFF_CHARM )
  331:	             && fch->position < POS_STANDING )
  334:	        if ( fch->master == ch && fch->position == POS_STANDING )
  337:	            if ( IS_SET( ch->in_room->room_flags, ROOM_LAW )
  338:	                 && ( IS_NPC( fch ) && IS_SET( fch->act, ACT_AGGRESSIVE ) ) )
  428:	            if ( ( pexit = ch->in_room->exit[door] ) != NULL
  437:	    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
  504:	        pexit = ch->in_room->exit[door];
  524:	             && pexit_rev->u1.to_room == ch->in_room )
  529:	            for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
  585:	        pexit = ch->in_room->exit[door];
  600:	             && pexit_rev->u1.to_room == ch->in_room )
  605:	            for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
  617:	    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
  682:	        pexit = ch->in_room->exit[door];
  711:	             && pexit_rev->u1.to_room == ch->in_room )
  776:	        pexit = ch->in_room->exit[door];
  805:	             && pexit_rev->u1.to_room == ch->in_room )
  832:	    for ( gch = ch->in_room->people; gch; gch = gch->next_in_room )
  834:	        if ( IS_NPC( gch ) && IS_AWAKE( gch ) && ch->level + 5 < gch->level )
  843:	         && number_percent(  ) > ch->pcdata->learned[gsn_pick_lock] )
  893:	        pexit = ch->in_room->exit[door];
  923:	             && pexit_rev->u1.to_room == ch->in_room )
  940:	        if ( ch->position == POS_FIGHTING )
  945:	        obj = get_obj_list( ch, argument, ch->in_room->contents );
  959:	        if ( ch->on != obj && count_users( obj ) >= obj->value[0] )
  965:	        ch->on = obj;
  968:	    switch ( ch->position )
  981:	            ch->on = NULL;
  1001:	        ch->position = POS_STANDING;
  1003:	        if ( ch->pcdata )
  1005:	            if ( ch->pcdata->message != NULL )
  1009:	                         ch->pcdata->messages,
  1010:	                         ( ch->pcdata->messages > 1 ) ? "s" : "" );
  1022:	            ch->on = NULL;
  1039:	        ch->position = POS_STANDING;
  1059:	        obj = get_obj_list( ch, argument, ch->in_room->contents );
  1067:	        obj = ch->on;
  1080:	        if ( obj != NULL && ch->on != obj
  1088:	        ch->on = obj;
  1091:	    switch ( ch->position )
  1123:	        ch->position = POS_RESTING;
  1151:	        ch->position = POS_RESTING;
  1175:	        ch->position = POS_RESTING;
  1191:	    if ( ch->position == POS_FIGHTING )
  1200:	        obj = get_obj_list( ch, argument, ch->in_room->contents );
  1208:	        obj = ch->on;
  1221:	        if ( obj != NULL && ch->on != obj
  1229:	        ch->on = obj;
  1231:	    switch ( ch->position )
  1264:	        ch->position = POS_SITTING;
  1280:	        ch->position = POS_SITTING;
  1309:	        ch->position = POS_SITTING;
  1319:	    switch ( ch->position )
  1329:	        if ( argument[0] == '\0' && ch->on == NULL )
  1334:	            ch->position = POS_SLEEPING;
  1339:	                obj = ch->on;
  1341:	                obj = get_obj_list( ch, argument, ch->in_room->contents );
  1357:	            if ( ch->on != obj && count_users( obj ) >= obj->value[0] )
  1364:	            ch->on = obj;
  1380:	            ch->position = POS_SLEEPING;
  1455:	              || number_percent(  ) < ch->pcdata->learned[gsn_sneak] ) )
  1459:	        af.level = ch->level;
  1460:	        af.duration = ch->level;
  1477:	        REMOVE_BIT( ch->affected_by, AFF_HIDE );
  1481:	              || number_percent(  ) < ch->pcdata->learned[gsn_hide] ) )
  1483:	        SET_BIT( ch->affected_by, AFF_HIDE );
  1500:	    REMOVE_BIT( ch->affected_by, AFF_HIDE );
  1501:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
  1502:	    REMOVE_BIT( ch->affected_by, AFF_SNEAK );
  1513:	    if ( IS_NPC( ch ) && !IS_SET( ch->act, ACT_PET ) )
  1519:	    if ( ch->level > RECALL_LEVEL && !IS_IMMORTAL( ch ) )
  1530:	        if ( ch->pcdata->recall_room == NULL )
  1532:	            ch->pcdata->recall_room = get_room_index( ROOM_VNUM_TEMPLE );
  1534:	        location = ch->pcdata->recall_room;
  1538:	        location = ch->master->pcdata->recall_room;
  1541:	    if ( ch->in_room == location )
  1547:	    if ( IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL )
  1554:	    if ( ( victim = ch->fighting ) != NULL )
  1559:	            skill = 40 + ch->level;
  1561:	            skill = ch->pcdata->learned[gsn_recall];
  1574:	            lose = ( int ) ( 0.05 * exp_per_level( ch, ch->pcdata->points ) );
  1585:	    ch->move /= 2;
  1593:	    if ( ch->pet != NULL )
  1594:	        do_recall( ch->pet, "" );
  1613:	    for ( mob = ch->in_room->people; mob; mob = mob->next_in_room )
  1627:	        sprintf( buf, "You have %d training sessions.\n\r", ch->train );
  1636:	        if ( class_table[ch->Class].attr_prime == STAT_STR )
  1644:	        if ( class_table[ch->Class].attr_prime == STAT_INT )
  1652:	        if ( class_table[ch->Class].attr_prime == STAT_WIS )
  1660:	        if ( class_table[ch->Class].attr_prime == STAT_DEX )
  1668:	        if ( class_table[ch->Class].attr_prime == STAT_CON )
  1683:	        if ( ch->perm_stat[STAT_STR] < get_max_train( ch, STAT_STR ) )
  1685:	        if ( ch->perm_stat[STAT_INT] < get_max_train( ch, STAT_INT ) )
  1687:	        if ( ch->perm_stat[STAT_WIS] < get_max_train( ch, STAT_WIS ) )
  1689:	        if ( ch->perm_stat[STAT_DEX] < get_max_train( ch, STAT_DEX ) )
  1691:	        if ( ch->perm_stat[STAT_CON] < get_max_train( ch, STAT_CON ) )
  1707:	                 ch->sex == SEX_MALE ? "big stud" :
  1708:	                 ch->sex == SEX_FEMALE ? "hot babe" : "wild thing", TO_CHAR );
  1716:	        if ( cost > ch->train )
  1722:	        ch->train -= cost;
  1723:	        ch->pcdata->perm_hit += 10;
  1724:	        ch->max_hit += 10;
  1725:	        ch->hit += 10;
  1733:	        if ( cost > ch->train )
  1739:	        ch->train -= cost;
  1740:	        ch->pcdata->perm_mana += 10;
  1741:	        ch->max_mana += 10;
  1742:	        ch->mana += 10;
  1748:	    if ( ch->perm_stat[stat] >= get_max_train( ch, stat ) )
  1754:	    if ( cost > ch->train )
  1760:	    ch->train -= cost;
  1762:	    ch->perm_stat[stat] += 1;
  1777:	    af = affect_find( ch->affected, skill_lookup( "web" ) );
  1779:	    chance = ( get_curr_stat( ch, STAT_STR ) + ( ch->level / 4 ) );
  1798:	    ch->pcdata->recall_room = ch->in_room;
  1810:	    ch->pcdata->recall_room = get_room_index( ROOM_VNUM_TEMPLE );
  1820:	    if ( !( room = ch->in_room ) )
  1823:	    if ( !( exit = ch->in_room->exit[dir] ) )
  1962:	         && ch->level < skill_table[gsn_track].skill_level[ch->Class] )
  1967:	    if ( !IS_NPC( ch ) && !( ch->pcdata->learned[gsn_track] ) )
  1980:	    dir = find_first_step( ch->in_room, vict->in_room );
  2006:	                 && number_percent(  ) > ch->pcdata->learned[gsn_track] )
  2029:	        if( IS_SET( ch->act, PLR_AUTOTRACK ) ) /* Added by JR*/
In olc_act.c:
  287:	    pArea = ch->in_room->area;
  340:	    pArea = ch->in_room->area;
  391:	    pArea = ch->in_room->area;
  440:	    pArea = ch->in_room->area;
  488:	    pArea = ch->in_room->area;
  545:	        ch->desc->pEdit = ( void * ) pMob;
  549:	    ch->desc->pEdit = ( void * ) ch->in_room;
  579:	        ch->desc->pEdit = ( void * ) pObj;
  583:	    ch->desc->pEdit = ( void * ) ch->in_room;
  710:	    ch->desc->pEdit = ( void * ) pArea;
  873:	    if ( value > ch->pcdata->security || value < 0 )
  875:	        if ( ch->pcdata->security != 0 )
  877:	            printf_to_char( ch, "Security is 0-%d.\n\r", ch->pcdata->security );
  1129:	    for ( rch = pRoom->people; rch; rch = rch->next_in_room )
  1131:	        one_argument( rch->name, buf );
  1336:	        pExit->u1.to_room = ch->in_room;
  1337:	/*	    pExit->vnum             = ch->in_room->vnum;    Can't set vnum in ROM */
  1753:	    ch->desc->pEdit = ( void * ) pRoom;
  3007:	    ch->desc->pEdit = ( void * ) pObj;
  3562:	    ch->desc->pEdit = ( void * ) pMob;
  4622:	    if ( ch->desc->pEdit )
  4649:	    ch->desc->pEdit = ( void * ) pMudProg;
  5671:	    if ( ch->desc->pEdit )
  5698:	    ch->desc->pEdit = ( void * ) pMprogGroup;
In magic.c:
  153:	    for ( rch = ch->in_room->people; rch; rch = rch->next_in_room )
  156:	            act( ch->Class == rch->Class ? buf : buf2, ch, NULL, rch, TO_VICT );
  249:	    if ( ch->level + 2 == level )
  251:	    return UMAX( min_mana, ( 100 / ( 2 + ch->level - level ) ) );
  283:	    if ( IS_SET( ch->act, PLR_JAILED ) )
  289:	    if ( IS_SET( ch->in_room->room_flags, ROOM_NOMAGIC ) )
  299:	              && ch->level < skill_table[sn].skill_level[ch->Class] ) )
  305:	    if ( ch->position < skill_table[sn].minimum_position )
  311:	    if ( ch->level + 2 == skill_table[sn].skill_level[ch->Class] )
  315:	                     100 / ( 2 + ch->level -
  316:	                             skill_table[sn].skill_level[ch->Class] ) );
  337:	            if ( ( victim = ch->fighting ) == NULL )
  369:	        if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  396:	        if ( arg2[0] != '\0' && !is_name( arg2, ch->name ) )
  437:	    if ( !IS_NPC( ch ) && ch->mana < mana )
  448:	    if ( !IS_NPC( ch ) && number_percent(  ) > ch->pcdata->learned[sn] )
  452:	        ch->mana -= mana / 2;
  456:	        ch->mana -= mana;
  457:	        ( *skill_table[sn].spell_fun ) ( sn, ch->level, ch, vo );
  467:	        for ( vch = ch->in_room->people; vch; vch = vch_next )
  469:	            vch_next = vch->next_in_room;
  506:	              && ch->level < skill_table[sn].skill_level[ch->Class] ) )
  512:	    if ( ch->position < skill_table[sn].minimum_position )
  518:	    if ( ch->level + 2 == skill_table[sn].skill_level[ch->Class] )
  522:	                     100 / ( 2 + ch->level -
  523:	                             skill_table[sn].skill_level[ch->Class] ) );
  544:	            if ( ( victim = ch->fighting ) == NULL )
  576:	        if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
  603:	        if ( arg2[0] != '\0' && !is_name( arg2, ch->name ) )
  636:	    if ( !IS_NPC( ch ) && ch->mana < mana )
  644:	    if ( !IS_NPC( ch ) && number_percent(  ) > ch->pcdata->learned[sn] )
  648:	        ch->mana -= mana / 2;
  652:	        ch->mana -= mana;
  654:	        ( *skill_table[sn].spell_fun ) ( sn, ch->level, ch, vo );
  658:	        if ( IS_NPC( ch ) && ch->pIndexData->vnum == MOB_VNUM_SUPERMOB )
  667:	        if ( IS_NPC( ch ) && ch->pIndexData->vnum == MOB_VNUM_SUPERMOB )
  676:	            for ( vch = ch->in_room->people; vch; vch = vch_next )
  678:	                vch_next = vch->next_in_room;
  720:	            victim = ch->fighting;
  763:	        for ( vch = ch->in_room->people; vch; vch = vch_next )
  765:	            vch_next = vch->next_in_room;
  863:	/*      sprintf(buf, "\n\r\n\rYou have been given an Immortal spellup from %s\n\r",  ch->name 
  933:	/* sprintf(buf, "\n\r\n\rYou have been given an Immortal spellup from %s\n\r",  ch->name );
  1082:	        vch_next = vch->next;
  1083:	        if ( vch->in_room == NULL )
  1085:	        if ( vch->in_room == ch->in_room )
  1095:	        if ( vch->in_room->area == ch->in_room->area
  1115:	    for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
  1117:	        if ( vch->position == POS_FIGHTING )
  1121:	                mlevel += vch->level;
  1123:	                mlevel += vch->level / 2;
  1124:	            high_level = UMAX( high_level, vch->level );
  1136:	        for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
  1138:	            if ( IS_NPC( vch ) && ( IS_SET( vch->imm_flags, IMM_MAGIC ) ||
  1139:	                                    IS_SET( vch->act, ACT_UNDEAD ) ) )
  1148:	            if ( vch->fighting || vch->position == POS_FIGHTING )
  1178:	    if ( ( !IS_NPC( ch ) && IS_NPC( victim ) && !( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim ) ) /* ||
  1385:	        for ( tmp_vict = ch->in_room->people;
  1585:	    obj_to_room( light, ch->in_room );
  1612:	    obj_to_room( mushroom, ch->in_room );
  1624:	    obj_to_room( spring, ch->in_room );
  1687:	                      cast_xp_compute( ch, ch, ch->level, 1, ch->level ) / 2 );
  1699:	           !( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim ) ) )
  1716:	                            cast_xp_compute( ch, ch, ch->level, 1,
  1746:	                      cast_xp_compute( ch, ch, ch->level, 1, ch->level ) / 2 );
  1758:	           !( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim ) ) )
  1775:	                            cast_xp_compute( ch, ch, ch->level, 1,
  1803:	                      cast_xp_compute( ch, ch, ch->level, 1, ch->level ) / 2 );
  1815:	           !( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim ) ) )
  1832:	                            cast_xp_compute( ch, ch, ch->level, 1,
  1878:	    ch->alignment = UMAX( -1000, ch->alignment - 20 );
  2039:	    if ( victim->hit > ( ch->level * 4 ) )
  2234:	        vch_next = vch->next;
  2235:	        if ( vch->in_room == NULL )
  2237:	        if ( vch->in_room == ch->in_room )
  2249:	        if ( vch->in_room->area == ch->in_room->area )
  2702:	    ch->alignment = UMAX( -1000, ch->alignment - 20 );
  2705:	        dam = ch->hit + 1;
  2713:	        ch->hit += dam;
  2790:	    for ( ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room )
  2792:	        if ( !IS_NPC( ich ) && IS_SET( ich->act, PLR_WIZINVIS ) )
  2801:	        REMOVE_BIT( ich->affected_by, AFF_HIDE );
  2802:	        REMOVE_BIT( ich->affected_by, AFF_INVISIBLE );
  2803:	        REMOVE_BIT( ich->affected_by, AFF_SNEAK );
  2908:	        if ( ( victim = get_char_world( ch, target_name ) ) == NULL || victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level >= level + 3 || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )  /* NOT trust */
  2933:	             || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL )
  2935:	             || IS_SET( ch->in_room->room_flags, ROOM_NOMAGIC )
  2936:	             || victim->level >= ch->level + NOSUMMONLEVELMOB
  2951:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level >= ch->level + NOSUMMONLEVELNONPK || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )   /* NOT trust */
  2966:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level > ch->level + NOSUMMONLEVELPK || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )   /* NOT trust */
  2969:	                  && victim->level > ch->level + NOSUMMONLEVELPK )
  2982:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || ( chaos ) || ( ch->level > ( victim->level + NOSUMMONLEVELPK ) || victim->level > ( ch->level + NOSUMMONLEVELPK ) ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )    /* NOT trust */
  2985:	                  && ( ch->level > ( victim->level + NOSUMMONLEVELPK )
  2986:	                       || victim->level > ( ch->level + NOSUMMONLEVELPK ) ) )
  2998:	    if ( ch->pet != NULL && ch->in_room == ch->pet->in_room )
  3013:	        act( "$n steps through a gate and vanishes.", ch->pet, NULL, NULL,
  3015:	        send_to_char( "You step through a gate and vanish.\n\r", ch->pet );
  3016:	        char_from_room( ch->pet );
  3017:	        char_to_room( ch->pet, victim->in_room );
  3018:	        act( "$n has arrived through a gate.", ch->pet, NULL, NULL, TO_ROOM );
  3019:	        do_look( ch->pet, "auto" );
  3057:	        if ( ( victim = get_char_world( ch, target_name ) ) == NULL || victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level >= level + 3 || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )  /* NOT trust */
  3079:	             || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL )
  3081:	             || ( IS_SET( ch->in_room->room_flags, ROOM_NOMAGIC ) )
  3082:	             || victim->level >= ch->level + NOSUMMONLEVELMOB
  3097:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level >= ch->level + NOSUMMONLEVELNONPK || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )   /* NOT trust */
  3112:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level > ch->level + NOSUMMONLEVELPK || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )   /* NOT trust */
  3116:	                  && victim->level > ch->level + NOSUMMONLEVELPK )
  3128:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || ( chaos ) || ( ch->level > ( victim->level + NOSUMMONLEVELPK ) || victim->level > ( ch->level + NOSUMMONLEVELPK ) ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )    /* NOT trust */
  3132:	                  && ( ch->level > ( victim->level + NOSUMMONLEVELPK )
  3133:	                       || victim->level > ( ch->level + NOSUMMONLEVELPK ) ) )
  3144:	    spawn_portal( ch->in_room->vnum, victim->in_room->vnum );
  3231:	           !( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim ) ) )
  3246:	                  cast_xp_compute( ch, ch, ch->level, 1,
  3268:	    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
  3270:	        vch_next = vch->next_in_room;
  3309:	    ch->move = 0;
  3310:	    ch->hit /= 2;
  3561:	             || ch->level < obj->level )
  3596:	    else if ( ch->lines )
  3643:	    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  3659:	    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
  3803:	        gain_exp( ch, cast_xp_compute( ch, ch, ch->level, 1, ch->level ) / 2 );
  3838:	                              cast_xp_compute( ch, ch, ch->level, 1,
  3839:	                                               ch->level ) / 2 );
  3859:	                              cast_xp_compute( ch, ch, ch->level, 1,
  3860:	                                               ch->level ) / 2 );
  4010:	        if ( ( victim = get_char_world( ch, target_name ) ) == NULL || victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level >= level + 3 || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )  /* NOT trust */
  4031:	             || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL )
  4032:	             || victim->level >= ch->level + NOSUMMONLEVELMOB
  4047:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level >= ch->level + NOSUMMONLEVELNONPK || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )   /* NOT trust */
  4061:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || victim->level > ch->level + NOSUMMONLEVELPK || ( chaos ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )   /* NOT trust */
  4066:	                  && victim->level > ch->level + NOSUMMONLEVELPK )
  4078:	        if ( victim == ch || victim->in_room == NULL || !can_see_room( ch, victim->in_room ) || IS_SET( victim->in_room->room_flags, ROOM_SAFE ) || IS_SET( victim->in_room->room_flags, ROOM_PRIVATE ) || IS_SET( victim->in_room->room_flags, ROOM_SOLITARY ) || IS_SET( victim->in_room->room_flags, ROOM_NO_RECALL ) || IS_SET( ch->in_room->room_flags, ROOM_NO_RECALL ) || ( chaos ) || ( ch->level > ( victim->level + NOSUMMONLEVELPK ) || victim->level > ( ch->level + NOSUMMONLEVELPK ) ) || ( !IS_NPC( victim ) && victim->level >= LEVEL_HERO )    /* NOT trust */
  4081:	                  && ( ch->level > ( victim->level + NOSUMMONLEVELPK )
  4082:	                       || victim->level > ( ch->level + NOSUMMONLEVELPK ) ) )
  4097:	    char_to_room( victim, ch->in_room );
  4157:	    for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
  4159:	        if ( !is_name( speaker, vch->name ) )
  4212:	    ch->move /= 2;
  4235:	        for ( obj_lose = ch->carrying; obj_lose != NULL; obj_lose = obj_next )
  4286:	    hpch = UMAX( 10, ch->hit );
  4351:	                    if ( number_bits( 2 ) == 0 || ch->in_room == NULL )
  4354:	                        obj_to_room( t_obj, ch->in_room );
  4362:	    hpch = UMAX( 10, ch->hit );
  4404:	    hpch = UMAX( 10, ch->hit );
  4419:	    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
  4421:	        vch_next = vch->next_in_room;
  4424:	            hpch = UMAX( 10, ch->hit );
  4440:	    hpch = UMAX( 10, ch->hit );
  4497:	    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
  4499:	        vch_next = vch->next_in_room;
  4542:	        for ( tmp_vict = ch->in_room->people;
  4662:	        for ( tmp_vict = ch->in_room->people;
  4749:	        for ( tmp_vict = ch->in_room->people;
  4824:	    original = ch->in_room;
  4882:	    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
  4884:	        vch_next = vch->next_in_room;
  4942:	        ch->hit -= 5;           /* modify the damage as you see fit */
  4976:	    ch->alignment = UMAX( -1000, ch->alignment - 20 );
  4979:	        dam = ch->hit + 1;
  4984:	        ch->hit += dam;
  5045:	                      cast_xp_compute( ch, ch, ch->level, 1, ch->level ) / 2 );
  5074:	    if ( ch->fighting )
  5087:	        pexit = ch->in_room->exit[door];
  5105:	            ch->level / 5 + get_curr_stat( ch, STAT_INT ) + get_skill( ch,
  5111:	        if ( room_is_dark( ch->in_room ) )
  5126:	                 && pexit_rev->u1.to_room == ch->in_room )
  5132:	                      rch = rch->next_in_room )
  5181:	    lev = skill_table[sn].skill_level[ch->Class];
  5183:	        4 * ( UMAX( skill_table[sn].min_mana, 100 / ( 2 + ch->level - lev ) ) );
  5186:	    if ( !IS_NPC( ch ) && ch->mana < mana )
  5192:	    if ( number_percent(  ) > ch->pcdata->learned[sn] )
  5195:	        ch->mana -= mana / 2;
  5200:	    ch->mana -= mana;
  5291:		 af.modifier     = -10 *(ch->level/10);
  5328:		for (tmp_vict = ch->in_room->people;
In db.c:
  324:	            switch ( och->desc->editor )  // JR: Save editing state
  335:	                    REMOVE_BIT( och->act, PLR_BUILDING );
  339:	            fprintf( fp, "%d %s %s %d %d %d\n", d->descriptor, och->name,
  340:	                    d->host, och->desc->editor, vnum, och->desc->tintin );
  341:	/*                      if (IS_SET(och->act,PLR_QUESTOR));
  343:					REMOVE_BIT(ch->act,PLR_QUESTOR);
  344:					ch->countdown = 0;
  345:					ch->nextquest = 0;
  346:					ch->questmob = 0;
  347:					ch->questobj = 0;
  348:					ch->questgiver = NULL;
  350:	/*                      if (och->level == 1)
  354:					och->level++;
  2496:	    ch->name = &str_empty[0];
  2497:	    ch->short_descr = &str_empty[0];
  2498:	    ch->long_descr = &str_empty[0];
  2499:	    ch->description = &str_empty[0];
  2500:	    ch->logon = current_time;
  2501:	    ch->last_note = 0;
  2502:	    ch->lines = PAGELEN;
  2504:	        ch->armor[i] = 100;
  2505:	    ch->comm = 0;
  2506:	    ch->position = POS_STANDING;
  2507:	    ch->practice = 0;
  2508:	    ch->hit = 20;
  2509:	    ch->max_hit = 20;
  2510:	    ch->mana = 100;
  2511:	    ch->max_mana = 100;
  2512:	    ch->move = 100;
  2513:	    ch->max_move = 100;
  2516:	        ch->perm_stat[i] = 13;
  2517:	        ch->mod_stat[i] = 0;
  2519:	    memset( ch->newaff, 0,
  2543:	    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
  2549:	    for ( paf = ch->affected; paf != NULL; paf = paf_next )
  2555:	    for ( npaf = ch->newaffected; npaf != NULL; npaf = npaf_next )
  2561:	    if ( ch->name )
  2562:	        free_string( &ch->name );
  2563:	    if ( ch->short_descr )
  2564:	        free_string( &ch->short_descr );
  2565:	    if ( ch->long_descr )
  2566:	        free_string( &ch->long_descr );
  2567:	    if ( ch->description )
  2568:	        free_string( &ch->description );
  2570:	    if ( ch->hate )
  2572:	        free_string( &ch->hate->name );
  2573:	        free_mem( &ch->hate );
  2574:	        ch->hate = NULL;
  2577:	    if ( ch->pcdata != NULL )
  2579:	        for ( mq = ch->pcdata->fmessage; mq != NULL; mq = mq_next )
  2586:	        for ( mq = ch->pcdata->ftell_q; mq != NULL; mq = mq_next )
  2596:	            if ( ch->pcdata->alias[i] == NULL
  2597:	                 || ch->pcdata->alias_sub[i] == NULL )
  2600:	            free_string( &ch->pcdata->alias[i] );
  2601:	            free_string( &ch->pcdata->alias_sub[i] );
  2603:	        free_string( &ch->pcdata->pwd );
  2604:	        free_string( &ch->pcdata->bamfin );
  2605:	        free_string( &ch->pcdata->bamfout );
  2606:	        free_string( &ch->pcdata->title );
  2607:	        free_string( &ch->pcdata->prompt );
  2608:	        free_string( &ch->pcdata->spouse );
  2609:	        free_string( &ch->pcdata->nemesis );
  2610:	        free_string( &ch->pcdata->email );
  2611:	        free_string( &ch->pcdata->comment );
  2613:	        while ( ch->pcdata->immcmdlist != NULL )
  2615:	            cmd = ch->pcdata->immcmdlist->next;
  2616:	            free_string( &ch->pcdata->immcmdlist->cmd );
  2617:	            free( ch->pcdata->immcmdlist );
  2618:	            ch->pcdata->immcmdlist = cmd;
  2621:	        free_faction_standings( ch->pcdata->faction_standings );
  2622:	        ch->pcdata->faction_standings = NULL;
  2624:	        ch->pcdata->next = pcdata_free;
  2625:	        pcdata_free = ch->pcdata;
  2628:	    ch->next = char_free;
  3441:	    for ( fch = char_list; fch != NULL; fch = fch->next )
  3444:	        if ( fch->pcdata != NULL )
  3446:	        for ( af = fch->affected; af != NULL; af = af->next )
  3448:	        for ( naf = fch->newaffected; naf != NULL; naf = naf->next )
  3451:	    for ( fch = char_free; fch != NULL; fch = fch->next )
  3858:	        if ( ch->Class != 4 )
  3863:	        if ( ch->Class != 4 )
  3865:	                     ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
  3867:	            fprintf( fp, "[Console] %s: %s\n", ch->name, str );
In factions.c:
  210:	        ch->desc->pEdit = ( void * ) pFact;
  211:	        ch->desc->editor = ED_FACTION;
  212:	        SET_BIT( ch->act, PLR_BUILDING );
  223:	                ch->desc->editor = ED_FACTION;
  224:	                SET_BIT( ch->act, PLR_BUILDING );
  250:	    pFact = ( FACTIONLIST_DATA * ) ch->desc->pEdit;
  303:	    pFact = ( FACTIONLIST_DATA * ) ch->desc->pEdit;
  343:	    ch->desc->pEdit = ( void * ) pFact;
  352:	    pFact = ( FACTIONLIST_DATA * ) ch->desc->pEdit;
  392:	    pFact = ( FACTIONLIST_DATA * ) ch->desc->pEdit;
  418:	    pFact = ( FACTIONLIST_DATA * ) ch->desc->pEdit;
  535:	        group_leader = ( ch->leader != NULL ) ? ch->leader : ch;
  538:	              group_ch = group_ch->next )
  542:	                for ( pFactPC = group_ch->pcdata->faction_standings;
  554:	                    pFactPC->next = group_ch->pcdata->faction_standings;
  555:	                    group_ch->pcdata->faction_standings = pFactPC;
  636:	        if ( ch->pcdata->faction_standings == NULL )
  638:	            ch->pcdata->faction_standings = pFactPC;
  642:	            pFactPC->next = ch->pcdata->faction_standings;
  643:	            ch->pcdata->faction_standings = pFactPC;
  660:	    for ( pFactPC = ch->pcdata->faction_standings;
  723:	    if ( !ch->pcdata->faction_standings )
  734:	    for ( pFactPC = ch->pcdata->faction_standings;
  855:	            for ( pFactPC = ch->pcdata->faction_standings;
In comm.c:
  737:	                for ( ch = shell_char_list; ch; ch = ch->next_in_shell )
  741:	                    if ( can_read_descriptor( ch->fdpair[0] ) )
  743:	                        close( ch->fdpair[0] );
  755:	                                prev->next = ch->next;
  762:	                        ch->next = char_list;
  764:	                        ch->next_player = player_list;
  765:	                        ch->next_in_shell = NULL;
  768:	                        ch->desc->connected = CON_PLAYING;
  1124:	        sprintf( log_buf, "Closing link to %s.", ch->name );
  1133:	            ch->pcdata->ticks = 1;
  1134:	            if ( IS_SET( ch->act, PLR_BUILDING ) );
  1136:	                REMOVE_BIT( ch->act, PLR_BUILDING );
  1139:	            ch->desc = NULL;
  1378:	    int n = ch->wait;
  1379:	    if ( ch->level >= LEVEL_ADMIN )
  1381:	    else if ( ch->desc->tintin )
  1386:	            sprintf( buf, "`B%d ", 1 + ch->wait / PULSE_PER_SECOND );
  1447:	            if ( !IS_SET( ch->comm, COMM_COMPACT ) )
  1452:	                        ch->newline = TRUE;
  1458:	            if ( IS_SET( ch->comm, COMM_PROMPT ) )
  1465:	                    sprintf( buf, "%s<H%d/%d M%d/%d V%d/%d>", wait_str( ch, waitbuf ), ch->hit,
  1466:	                             ch->max_hit, ch->mana, ch->max_mana, ch->move,
  1467:	                             ch->max_move );
  1471:	            if ( IS_SET( ch->comm, COMM_TELNET_GA ) )
  1670:	    update_last( "Nanny:", ch ? ch->name : "new", argument );
  1769:	                if ( ban_type == 16 && !IS_SET( ch->act, PLR_PERMIT ) )
  1781:	        if ( IS_SET( ch->act, PLR_DENY ) )
  1865:	        if ( check_playing( d, ch->name ) )
  1873:	        if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
  1880:	        if ( ch->pcdata->pwd[0] == 0 )
  1891:	        if ( check_reconnect( d, ch->name, TRUE ) )  // JR
  1894:	        if ( check_playing( d, ch->name ) )
  1897:	        sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
  1899:	        if ( IS_SET( ch->act, PLR_BUILDING ) );
  1901:	            REMOVE_BIT( ch->act, PLR_BUILDING );
  1935:	                if ( str_cmp( ch->name, d_old->character->name ) )
  1980:	                     ch->name, echo_off_str );
  1984:	                SET_BIT( ch->act, PLR_COLOR );
  2015:	        pwdnew = crypt( argument, ch->name );
  2027:	        free_string( &ch->pcdata->pwd );
  2028:	        ch->pcdata->pwd = str_dup( pwdnew );
  2036:	        if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
  2070:	                  && !IS_SET( ch->act, PLR_REMORT ) ) )
  2078:	        ch->race = race;
  2082:	            ch->perm_stat[i] = pc_race_table[race].stats[i];
  2083:	        ch->affected_by = ch->affected_by | race_table[race].aff;
  2084:	        ch->imm_flags = ch->imm_flags | race_table[race].imm;
  2085:	        ch->res_flags = ch->res_flags | race_table[race].res;
  2086:	        ch->vuln_flags = ch->vuln_flags | race_table[race].vuln;
  2087:	        ch->form = race_table[race].form;
  2088:	        ch->parts = race_table[race].parts;
  2099:	        ch->pcdata->points = pc_race_table[race].points;
  2100:	        ch->size = pc_race_table[race].size;
  2110:	            ch->sex = SEX_MALE;
  2111:	            ch->pcdata->true_sex = SEX_MALE;
  2115:	            ch->sex = SEX_FEMALE;
  2116:	            ch->pcdata->true_sex = SEX_FEMALE;
  2120:	            ch->sex = SEX_NB;
  2121:	            ch->pcdata->true_sex = SEX_NB;
  2141:	                ch->perm_stat[0] = stat1[atoi( argument )];
  2142:	                ch->perm_stat[1] = stat2[atoi( argument )];
  2143:	                ch->perm_stat[2] = stat3[atoi( argument )];
  2144:	                ch->perm_stat[3] = stat4[atoi( argument )];
  2145:	                ch->perm_stat[4] = stat5[atoi( argument )];
  2154:	                           && IS_SET( ch->act, PLR_REMORT ) ) )
  2165:	                           && IS_SET( ch->act, PLR_REMORT ) ) )
  2192:	                        roll_stat( pc_race_table[ch->race].stats[0],
  2193:	                                   pc_race_table[ch->race].max_stats[0] -
  2202:	                        roll_stat( pc_race_table[ch->race].stats[1],
  2203:	                                   pc_race_table[ch->race].max_stats[1] -
  2212:	                        roll_stat( pc_race_table[ch->race].stats[2],
  2213:	                                   pc_race_table[ch->race].max_stats[2] -
  2222:	                        roll_stat( pc_race_table[ch->race].stats[3],
  2223:	                                   pc_race_table[ch->race].max_stats[3] -
  2232:	                        roll_stat( pc_race_table[ch->race].stats[4],
  2233:	                                   pc_race_table[ch->race].max_stats[4] -
  2253:	                    roll_stat( pc_race_table[ch->race].stats[0],
  2254:	                               pc_race_table[ch->race].max_stats[0] );
  2262:	                    roll_stat( pc_race_table[ch->race].stats[1],
  2263:	                               pc_race_table[ch->race].max_stats[1] );
  2271:	                    roll_stat( pc_race_table[ch->race].stats[2],
  2272:	                               pc_race_table[ch->race].max_stats[2] );
  2280:	                    roll_stat( pc_race_table[ch->race].stats[3],
  2281:	                               pc_race_table[ch->race].max_stats[3] );
  2289:	                    roll_stat( pc_race_table[ch->race].stats[4],
  2290:	                               pc_race_table[ch->race].max_stats[4] );
  2306:	                  && !IS_SET( ch->act, PLR_REMORT ) ) )
  2313:	        ch->Class = iClass;
  2315:	        sprintf( log_buf, "%s@%s new player.", ch->name, d->host );
  2318:	        /*if (ch->race == 1) write_to_buffer( d, "Your class is evil by nature.\n\r",0);
  2327:	        /* if (ch->race == 1) ch->alignment = -750; */
  2332:	            ch->alignment = 750;
  2336:	            ch->alignment = 0;
  2340:	            ch->alignment = -750;
  2351:	        group_add( ch, class_table[ch->Class].base_group, FALSE );
  2352:	        ch->pcdata->learned[gsn_recall] = 50;
  2367:	            ch->gen_data = alloc_perm( sizeof( *ch->gen_data ) );
  2368:	            ch->gen_data->points_chosen = ch->pcdata->points;
  2379:	            group_add( ch, class_table[ch->Class].default_group, TRUE );
  2380:	            ch->train = (CP_MAX - ch->pcdata->points)/2 + STARTING_TRAINS;
  2395:	            /*if ( ch->pcdata->points < CP_MIN_CREATE )
  2397:	                sprintf(buf, "Continue now with 25 CP, +%d trains (Y/N):", CP_MIN_CREATE - ch->pcdata->points, CP_MIN_CREATE,
  2398:	                       (CP_MIN_CREATE - ch->pcdata->points)/2);
  2409:	            //sprintf( buf, "Creation points: %d\n\r", ch->pcdata->points );
  2413:	            //         figure_difference( ch->gen_data->points_chosen ) );
  2414:	            //if ( ch->pcdata->points < 40 )
  2415:	            //    ch->train = ( 40 - ch->pcdata->points + 1 ) / 2; /* What is this? Seems to be overwritten anyway. */
  2417:	            ch->train = (CP_MAX - ch->pcdata->points)/2 + STARTING_TRAINS;
  2418:	            ch->pcdata->points = CP_MAX;
  2445:	            SET_BIT( ch->act, PLR_NO_ANNOUNCE );
  2450:	            SET_BIT( ch->act, PLR_NO_ANNOUNCE );
  2451:	            SET_BIT( ch->act, PLR_WIZINVIS );
  2452:	            ch->invis_level = get_trust( ch );
  2466:	        ch->next = char_list;
  2469:	        ch->next_player = player_list;
  2474:	        if ( ch->level == 0 )
  2477:	            ch->level = 1;
  2478:	            ch->exp = 0;
  2479:	            ch->hit = ch->max_hit;
  2480:	            ch->mana = ch->max_mana;
  2481:	            ch->move = ch->max_move;
  2482:	            ch->start_age = number_range( pc_race_table[ch->race].age[0], pc_race_table[ch->race].age[1] ); // JR: randomize starting age
  2483:	            // ch->train = STARTING_TRAINS; // Training sessions are now determined by CP
  2484:	            ch->practice = STARTING_PRACTICES;
  2494:	            ch->pcdata->learned[get_weapon_sn( ch )] = 40;
  2502:	        else if ( ch->in_room != NULL )
  2504:	            char_to_room( ch, ch->in_room );
  2518:	        if ( IS_SET( ch->act, PLR_NO_ANNOUNCE ) )
  2520:	            REMOVE_BIT( ch->act, PLR_NO_ANNOUNCE );
  2525:	            if ( !IS_SET( ch->act, PLR_WIZINVIS ) )
  2527:	                if ( ch->played == 0 )
  2529:	                        ch->name );
  2531:	                    sprintf( buf, "%s has entered the game.", ch->name );
  2547:	        if ( ch->pet != NULL )
  2549:	            char_to_room( ch->pet, ch->in_room );
  2550:	            act( "$n has entered the game.", ch->pet, NULL, NULL, TO_ROOM );
  2553:	        if ( IS_SET( ch->act, PLR_AFK ) )
  2556:	        ch->pcdata->chaos_score = 0;
  2663:	    for ( ch = player_list; ch != NULL; ch = ch->next_player )
  2665:	        if ( ( !fConn || ch->desc == NULL )
  2666:	             && !str_cmp( d->character->name, ch->name ) )
  2671:	                d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
  2677:	                ch->desc = d;
  2678:	                ch->timer = 0;
  2679:	                if ( IS_SET( ch->act, PLR_BUILDING ) );
  2681:	                    REMOVE_BIT( ch->act, PLR_BUILDING );
  2691:	                ch->pcdata->ticks = 0;
  2692:	                sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
  2697:	                if ( ch->pcdata->in_progress )
  2740:	         || ch->desc == NULL
  2741:	         || ch->desc->connected != CON_PLAYING
  2742:	         || ch->was_in_room == NULL
  2743:	         || ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
  2746:	    ch->timer = 0;
  2748:	    char_to_room( ch, ch->was_in_room );
  2749:	    ch->was_in_room = NULL;
  2759:	    if ( txt != NULL && ch->desc != NULL )
  2761:	        //write_to_buffer( ch->desc, "`w", 2 ); // JR: trying to fix a text color bug
  2762:	        write_to_buffer( ch->desc, txt, strlen( txt ) );
  2777:	    if ( param[0] && ch->desc )
  2778:	        write_to_buffer( ch->desc, param, strlen( param ) );
  2788:	    if ( txt == NULL || ch->desc == NULL )
  2791:	    if ( ch->desc == NULL )
  2793:	    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
  2794:	    strcpy( ch->desc->showstr_head, txt );
  2795:	    ch->desc->showstr_point = ch->desc->showstr_head;
  2796:	    show_string( ch->desc, "" );
  2850:	    if ( ch->sex < 0 || ch->sex > NUM_SEXES ) /* Modified by JR */
  2851:	        ch->sex = IS_NPC( ch ) ? 0 : ch->pcdata->true_sex;
  2863:	#define NAME(ch)	(IS_NPC(ch) ? ch->short_descr : ch->name)
  2918:	                i = he_she( ch->sex );
  2921:	                i = he_she( vch->sex );
  2924:	                i = him_her( ch->sex );
  2927:	                i = him_her( vch->sex );
  2930:	                i = his_her( ch->sex );
  2933:	                i = his_her( vch->sex );
  2996:	    if ( !ch->in_room )
  3001:	        to = ch->in_room->people;
  3008:	            bug( "%s (%s)", ch->name, format );
  3012:	        if ( !vch->in_room )
  3015:	            bug( "%s -> %s (%s)", ch->name, vch->name, format );
  3020:	/*        to = vch->in_room->people;*/
  3311:	    if ( ch->max_hit > 0 )
  3312:	        percent = ch->hit * 100 / ch->max_hit;
  3347:	    orig_prompt = ch->pcdata->prompt;
  3350:	    if ( ch->desc->tintin )
  3387:	            sprintf( workstr, "%d", ch->hit );
  3393:	            sprintf( workstr, "%d", ch->max_hit );
  3399:	            sprintf( workstr, "%d", ch->mana );
  3405:	            sprintf( workstr, "%d", ch->max_mana );
  3411:	            sprintf( workstr, "%d", ch->move );
  3417:	            sprintf( workstr, "%d", ch->max_move );
  3423:	            if ( ch->desc->tintin )
  3442:	            sprintf( workstr, "%s", figurestate( ch->hit, ch->max_hit ) );
  3448:	            sprintf( workstr, "%s", figurestate( ch->mana, ch->max_mana ) );
  3454:	            sprintf( workstr, "%s", figurestate( ch->move, ch->max_move ) );
  3460:	            if ( ( tank = ch->fighting ) != NULL )
  3470:	            if ( ( victim = ch->fighting ) != NULL )
  3491:	            if ( IS_IMMORTAL( ch ) && ch->in_room != NULL )
  3493:	                sprintf( workstr, "%d", ch->in_room->vnum );
  3502:	            sprintf( workstr, "%d", ch->alignment );
  3508:	            if ( IS_SET( ch->act, PLR_BUILDING ) )
  3517:	            if ( IS_SET( ch->act, PLR_AFK ) )
  3523:	            if ( IS_SET( ch->act, PLR_KILLER ) )
  3529:	            if ( IS_SET( ch->act, PLR_THIEF ) )
  3535:	            if ( IS_IMMORTAL( ch ) && IS_SET( ch->act, PLR_WIZINVIS ) )
  3537:	                sprintf( workstr, "`B(Wizi:%d)", ch->invis_level );
  3544:	            sprintf( workstr, "%s", ch->in_room->area->name );
  3550:	            sprintf( workstr, "%ld", ch->exp );
  3557:	                     exp_per_level( ch, ch->pcdata->points ) - ch->exp );
  3616:	               && IS_SET( ch->act, PLR_REMORT ) ) )
  3626:	               && IS_SET( ch->act, PLR_REMORT ) ) )
In remort.c:
  53:	    if ( IS_NPC( ch ) || ( d = ch->desc ) == NULL )
  56:	    if ( ch->level < LEVEL_HERO )
  63:	    if ( ch->level > LEVEL_HERO )
  72:	    if ( ch->pcdata->confirm_remort )
  77:	            ch->pcdata->confirm_remort = FALSE;
  85:	            sprintf( buf, "%s is becoming a mortal again.", ch->name );
  89:	                     capitalize( ch->name ) );
  113:	            sprintf( player_name, "%s", capitalize( ch->name ) );
  114:	            sprintf( player_pwd, "%s", ch->pcdata->pwd );
  115:	            player_incarnations = ++ch->incarnations;
  132:	            if ( !IS_SET( ch->act, PLR_REMORT ) )
  133:	                SET_BIT( ch->act, PLR_REMORT );
  150:	    ch->pcdata->confirm_remort = TRUE;
In auction.c:
  58:	        if ( IS_SET( ch->comm, COMM_NOAUCTION ) )
  60:	            REMOVE_BIT( ch->comm, COMM_NOAUCTION );
  65:	        SET_BIT( ch->comm, COMM_NOAUCTION );
  93:	            spell_identify( skill_lookup( "identify" ), ch->level, ch, obj );
  350:	        if ( ( ch->gold ) < bid )
  361:	        gold = UMIN( ch->gold, bid );
  363:	        ch->gold -= gold;
